   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_console_help,"ax",@progbits
  12               	mousekey_console_help:
  13               	.LFB29:
  14               		.file 1 "./tmk_core/common/command.c"
   1:./tmk_core/common/command.c **** /*
   2:./tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/command.c **** 
   4:./tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/command.c **** (at your option) any later version.
   8:./tmk_core/common/command.c **** 
   9:./tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/command.c **** GNU General Public License for more details.
  13:./tmk_core/common/command.c **** 
  14:./tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/command.c **** */
  17:./tmk_core/common/command.c **** #include <stdint.h>
  18:./tmk_core/common/command.c **** #include <stdbool.h>
  19:./tmk_core/common/command.c **** #include "wait.h"
  20:./tmk_core/common/command.c **** #include "keycode.h"
  21:./tmk_core/common/command.c **** #include "host.h"
  22:./tmk_core/common/command.c **** #include "keymap.h"
  23:./tmk_core/common/command.c **** #include "print.h"
  24:./tmk_core/common/command.c **** #include "debug.h"
  25:./tmk_core/common/command.c **** #include "util.h"
  26:./tmk_core/common/command.c **** #include "timer.h"
  27:./tmk_core/common/command.c **** #include "keyboard.h"
  28:./tmk_core/common/command.c **** #include "bootloader.h"
  29:./tmk_core/common/command.c **** #include "action_layer.h"
  30:./tmk_core/common/command.c **** #include "action_util.h"
  31:./tmk_core/common/command.c **** #include "eeconfig.h"
  32:./tmk_core/common/command.c **** #include "sleep_led.h"
  33:./tmk_core/common/command.c **** #include "led.h"
  34:./tmk_core/common/command.c **** #include "command.h"
  35:./tmk_core/common/command.c **** #include "backlight.h"
  36:./tmk_core/common/command.c **** #include "quantum.h"
  37:./tmk_core/common/command.c **** #include "version.h"
  38:./tmk_core/common/command.c **** 
  39:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/command.c **** #include "mousekey.h"
  41:./tmk_core/common/command.c **** #endif
  42:./tmk_core/common/command.c **** 
  43:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  44:./tmk_core/common/command.c **** 	#include "usb_keyboard.h"
  45:./tmk_core/common/command.c **** 		#ifdef EXTRAKEY_ENABLE
  46:./tmk_core/common/command.c **** 		#include "usb_extra.h"
  47:./tmk_core/common/command.c **** 	#endif
  48:./tmk_core/common/command.c **** #endif
  49:./tmk_core/common/command.c **** 
  50:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  51:./tmk_core/common/command.c **** 	#include "usbdrv.h"
  52:./tmk_core/common/command.c **** #endif
  53:./tmk_core/common/command.c **** 
  54:./tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
  55:./tmk_core/common/command.c ****     #include "audio.h"
  56:./tmk_core/common/command.c **** #endif /* AUDIO_ENABLE */
  57:./tmk_core/common/command.c **** 
  58:./tmk_core/common/command.c **** 
  59:./tmk_core/common/command.c **** static bool command_common(uint8_t code);
  60:./tmk_core/common/command.c **** static void command_common_help(void);
  61:./tmk_core/common/command.c **** static void print_version(void);
  62:./tmk_core/common/command.c **** static void print_status(void);
  63:./tmk_core/common/command.c **** static bool command_console(uint8_t code);
  64:./tmk_core/common/command.c **** static void command_console_help(void);
  65:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  66:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  67:./tmk_core/common/command.c **** static void mousekey_console_help(void);
  68:./tmk_core/common/command.c **** #endif
  69:./tmk_core/common/command.c **** 
  70:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  71:./tmk_core/common/command.c **** 
  72:./tmk_core/common/command.c **** 
  73:./tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  74:./tmk_core/common/command.c **** 
  75:./tmk_core/common/command.c **** 
  76:./tmk_core/common/command.c **** bool command_proc(uint8_t code)
  77:./tmk_core/common/command.c **** {
  78:./tmk_core/common/command.c ****     switch (command_state) {
  79:./tmk_core/common/command.c ****         case ONESHOT:
  80:./tmk_core/common/command.c ****             if (!IS_COMMAND())
  81:./tmk_core/common/command.c ****                 return false;
  82:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  83:./tmk_core/common/command.c ****             break;
  84:./tmk_core/common/command.c ****         case CONSOLE:
  85:./tmk_core/common/command.c ****             if (IS_COMMAND())
  86:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  87:./tmk_core/common/command.c ****             else
  88:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  89:./tmk_core/common/command.c ****             break;
  90:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  91:./tmk_core/common/command.c ****         case MOUSEKEY:
  92:./tmk_core/common/command.c ****             mousekey_console(code);
  93:./tmk_core/common/command.c ****             break;
  94:./tmk_core/common/command.c **** #endif
  95:./tmk_core/common/command.c ****         default:
  96:./tmk_core/common/command.c ****             command_state = ONESHOT;
  97:./tmk_core/common/command.c ****             return false;
  98:./tmk_core/common/command.c ****     }
  99:./tmk_core/common/command.c ****     return true;
 100:./tmk_core/common/command.c **** }
 101:./tmk_core/common/command.c **** 
 102:./tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
 103:./tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
 104:./tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
 105:./tmk_core/common/command.c **** bool command_extra(uint8_t code)
 106:./tmk_core/common/command.c **** {
 107:./tmk_core/common/command.c ****     (void)code;
 108:./tmk_core/common/command.c ****     return false;
 109:./tmk_core/common/command.c **** }
 110:./tmk_core/common/command.c **** 
 111:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 112:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 113:./tmk_core/common/command.c **** {
 114:./tmk_core/common/command.c ****     (void)code;
 115:./tmk_core/common/command.c ****     return false;
 116:./tmk_core/common/command.c **** }
 117:./tmk_core/common/command.c **** 
 118:./tmk_core/common/command.c **** 
 119:./tmk_core/common/command.c **** /***********************************************************
 120:./tmk_core/common/command.c ****  * Command common
 121:./tmk_core/common/command.c ****  ***********************************************************/
 122:./tmk_core/common/command.c **** static void command_common_help(void)
 123:./tmk_core/common/command.c **** {
 124:./tmk_core/common/command.c **** 	print(                            "\n\t- Magic -\n"
 125:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG       ) ":	Debug Message Toggle\n"
 126:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MATRIX) ":	Matrix Debug Mode Toggle - Show keypresses in matrix grid\n"
 127:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_KBD   ) ":	Keyboard Debug Toggle - Show keypress report\n"
 128:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MOUSE ) ":	Debug Mouse Toggle\n"
 129:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_VERSION     ) ":	Version\n"
 130:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_STATUS      ) ":	Status\n"
 131:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_CONSOLE     ) ":	Activate Console Mode\n"
 132:./tmk_core/common/command.c **** 
 133:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 134:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0      ) ":	Switch to Layer 0\n"
 135:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER1      ) ":	Switch to Layer 1\n"
 136:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER2      ) ":	Switch to Layer 2\n"
 137:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER3      ) ":	Switch to Layer 3\n"
 138:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER4      ) ":	Switch to Layer 4\n"
 139:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER5      ) ":	Switch to Layer 5\n"
 140:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER6      ) ":	Switch to Layer 6\n"
 141:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER7      ) ":	Switch to Layer 7\n"
 142:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER8      ) ":	Switch to Layer 8\n"
 143:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER9      ) ":	Switch to Layer 9\n"
 144:./tmk_core/common/command.c **** #endif
 145:./tmk_core/common/command.c **** 
 146:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 147:./tmk_core/common/command.c **** 		                            "F1-F10:	Switch to Layer 0-9 (F10 = L0)\n"
 148:./tmk_core/common/command.c **** #endif
 149:./tmk_core/common/command.c **** 
 150:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 151:./tmk_core/common/command.c **** 		                            "0-9:	Switch to Layer 0-9\n"
 152:./tmk_core/common/command.c **** #endif
 153:./tmk_core/common/command.c **** 
 154:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT1 ) ":	Switch to Layer 0 (alternate key 1)\n"
 155:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT2 ) ":	Switch to Layer 0 (alternate key 2)\n"
 156:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_BOOTLOADER  ) ":	Jump to Bootloader (Reset)\n"
 157:./tmk_core/common/command.c **** 
 158:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 159:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LOCK        ) ":	Lock\n"
 160:./tmk_core/common/command.c **** #endif
 161:./tmk_core/common/command.c **** 
 162:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 163:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_EEPROM      ) ":	Print EEPROM Settings\n"
 164:./tmk_core/common/command.c **** #endif
 165:./tmk_core/common/command.c **** 
 166:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 167:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_NKRO        ) ":	NKRO Toggle\n"
 168:./tmk_core/common/command.c **** #endif
 169:./tmk_core/common/command.c **** 
 170:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 171:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_SLEEP_LED   ) ":	Sleep LED Test\n"
 172:./tmk_core/common/command.c **** #endif
 173:./tmk_core/common/command.c ****     );
 174:./tmk_core/common/command.c **** }
 175:./tmk_core/common/command.c **** 
 176:./tmk_core/common/command.c **** static void print_version(void)
 177:./tmk_core/common/command.c **** {
 178:./tmk_core/common/command.c **** 	// print version & information
 179:./tmk_core/common/command.c ****     print("\n\t- Version -\n");
 180:./tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 181:./tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 182:./tmk_core/common/command.c ****           "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 183:./tmk_core/common/command.c ****           "VER: " STR(DEVICE_VER) "\n");
 184:./tmk_core/common/command.c ****     print("BUILD: " STR(QMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
 185:./tmk_core/common/command.c **** 
 186:./tmk_core/common/command.c ****     /* build options */
 187:./tmk_core/common/command.c ****     print("OPTIONS:"
 188:./tmk_core/common/command.c **** 
 189:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 190:./tmk_core/common/command.c **** 	    " PJRC"
 191:./tmk_core/common/command.c **** #endif
 192:./tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 193:./tmk_core/common/command.c **** 	    " LUFA"
 194:./tmk_core/common/command.c **** #endif
 195:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 196:./tmk_core/common/command.c **** 	    " VUSB"
 197:./tmk_core/common/command.c **** #endif
 198:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 199:./tmk_core/common/command.c **** 	    " BOOTMAGIC"
 200:./tmk_core/common/command.c **** #endif
 201:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 202:./tmk_core/common/command.c **** 	    " MOUSEKEY"
 203:./tmk_core/common/command.c **** #endif
 204:./tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 205:./tmk_core/common/command.c **** 	    " EXTRAKEY"
 206:./tmk_core/common/command.c **** #endif
 207:./tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 208:./tmk_core/common/command.c **** 	    " CONSOLE"
 209:./tmk_core/common/command.c **** #endif
 210:./tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 211:./tmk_core/common/command.c **** 	    " COMMAND"
 212:./tmk_core/common/command.c **** #endif
 213:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 214:./tmk_core/common/command.c **** 	    " NKRO"
 215:./tmk_core/common/command.c **** #endif
 216:./tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 217:./tmk_core/common/command.c **** 	    " KEYMAP_SECTION"
 218:./tmk_core/common/command.c **** #endif
 219:./tmk_core/common/command.c **** 
 220:./tmk_core/common/command.c **** 	    " " STR(BOOTLOADER_SIZE) "\n");
 221:./tmk_core/common/command.c **** 
 222:./tmk_core/common/command.c ****     print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 223:./tmk_core/common/command.c **** #if defined(__AVR__)
 224:./tmk_core/common/command.c ****           " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 225:./tmk_core/common/command.c ****           " AVR_ARCH: avr" STR(__AVR_ARCH__)
 226:./tmk_core/common/command.c **** #endif
 227:./tmk_core/common/command.c **** 		  "\n");
 228:./tmk_core/common/command.c **** 
 229:./tmk_core/common/command.c **** 	return;
 230:./tmk_core/common/command.c **** }
 231:./tmk_core/common/command.c **** 
 232:./tmk_core/common/command.c **** static void print_status(void)
 233:./tmk_core/common/command.c **** {
 234:./tmk_core/common/command.c **** 
 235:./tmk_core/common/command.c ****     print("\n\t- Status -\n");
 236:./tmk_core/common/command.c **** 
 237:./tmk_core/common/command.c ****     print_val_hex8(host_keyboard_leds());
 238:./tmk_core/common/command.c **** #ifndef PROTOCOL_VUSB
 239:./tmk_core/common/command.c ****     // these aren't set on the V-USB protocol, so we just ignore them for now
 240:./tmk_core/common/command.c ****     print_val_hex8(keyboard_protocol);
 241:./tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 242:./tmk_core/common/command.c **** #endif
 243:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 244:./tmk_core/common/command.c ****     print_val_hex8(keymap_config.nkro);
 245:./tmk_core/common/command.c **** #endif
 246:./tmk_core/common/command.c ****     print_val_hex32(timer_read32());
 247:./tmk_core/common/command.c **** 
 248:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 249:./tmk_core/common/command.c ****     print_val_hex8(UDCON);
 250:./tmk_core/common/command.c ****     print_val_hex8(UDIEN);
 251:./tmk_core/common/command.c ****     print_val_hex8(UDINT);
 252:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_leds);
 253:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_idle_count);
 254:./tmk_core/common/command.c **** #endif
 255:./tmk_core/common/command.c **** 
 256:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 257:./tmk_core/common/command.c **** #   if USB_COUNT_SOF
 258:./tmk_core/common/command.c ****     print_val_hex8(usbSofCount);
 259:./tmk_core/common/command.c **** #   endif
 260:./tmk_core/common/command.c **** #endif
 261:./tmk_core/common/command.c **** 	return;
 262:./tmk_core/common/command.c **** }
 263:./tmk_core/common/command.c **** 
 264:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 265:./tmk_core/common/command.c **** static void print_eeconfig(void)
 266:./tmk_core/common/command.c **** {
 267:./tmk_core/common/command.c **** 
 268:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 269:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 270:./tmk_core/common/command.c **** 
 271:./tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 272:./tmk_core/common/command.c **** 
 273:./tmk_core/common/command.c ****     debug_config_t dc;
 274:./tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 275:./tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 276:./tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 277:./tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 278:./tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 279:./tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 280:./tmk_core/common/command.c **** 
 281:./tmk_core/common/command.c ****     keymap_config_t kc;
 282:./tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 283:./tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 284:./tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 285:./tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 286:./tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 287:./tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 288:./tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 289:./tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 290:./tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 291:./tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 292:./tmk_core/common/command.c **** 
 293:./tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 294:./tmk_core/common/command.c ****     backlight_config_t bc;
 295:./tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 296:./tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 297:./tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 298:./tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 299:./tmk_core/common/command.c **** #endif /* BACKLIGHT_ENABLE */
 300:./tmk_core/common/command.c **** 
 301:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 302:./tmk_core/common/command.c **** 
 303:./tmk_core/common/command.c **** }
 304:./tmk_core/common/command.c **** #endif /* BOOTMAGIC_ENABLE */
 305:./tmk_core/common/command.c **** 
 306:./tmk_core/common/command.c **** static bool command_common(uint8_t code)
 307:./tmk_core/common/command.c **** {
 308:./tmk_core/common/command.c **** 
 309:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 310:./tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 311:./tmk_core/common/command.c **** #endif
 312:./tmk_core/common/command.c **** 
 313:./tmk_core/common/command.c ****     switch (code) {
 314:./tmk_core/common/command.c **** 
 315:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 316:./tmk_core/common/command.c **** 
 317:./tmk_core/common/command.c **** 		// test breathing sleep LED
 318:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 319:./tmk_core/common/command.c ****             print("Sleep LED Test\n");
 320:./tmk_core/common/command.c ****             sleep_led_toggle();
 321:./tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 322:./tmk_core/common/command.c ****             break;
 323:./tmk_core/common/command.c **** #endif
 324:./tmk_core/common/command.c **** 
 325:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 326:./tmk_core/common/command.c **** 
 327:./tmk_core/common/command.c **** 		// print stored eeprom config
 328:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 329:./tmk_core/common/command.c ****             print("eeconfig:\n");
 330:./tmk_core/common/command.c ****             print_eeconfig();
 331:./tmk_core/common/command.c ****             break;
 332:./tmk_core/common/command.c **** #endif
 333:./tmk_core/common/command.c **** 
 334:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 335:./tmk_core/common/command.c **** 
 336:./tmk_core/common/command.c **** 		// lock/unlock keyboard
 337:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 338:./tmk_core/common/command.c ****             if (host_get_driver()) {
 339:./tmk_core/common/command.c ****                 host_driver = host_get_driver();
 340:./tmk_core/common/command.c ****                 clear_keyboard();
 341:./tmk_core/common/command.c ****                 host_set_driver(0);
 342:./tmk_core/common/command.c ****                 print("Locked.\n");
 343:./tmk_core/common/command.c ****             } else {
 344:./tmk_core/common/command.c ****                 host_set_driver(host_driver);
 345:./tmk_core/common/command.c ****                 print("Unlocked.\n");
 346:./tmk_core/common/command.c ****             }
 347:./tmk_core/common/command.c ****             break;
 348:./tmk_core/common/command.c **** #endif
 349:./tmk_core/common/command.c **** 
 350:./tmk_core/common/command.c **** 		// print help
 351:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP1):
 352:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP2):
 353:./tmk_core/common/command.c ****             command_common_help();
 354:./tmk_core/common/command.c ****             break;
 355:./tmk_core/common/command.c **** 
 356:./tmk_core/common/command.c **** 		// activate console
 357:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 358:./tmk_core/common/command.c ****             debug_matrix   = false;
 359:./tmk_core/common/command.c ****             debug_keyboard = false;
 360:./tmk_core/common/command.c ****             debug_mouse    = false;
 361:./tmk_core/common/command.c ****             debug_enable   = false;
 362:./tmk_core/common/command.c ****             command_console_help();
 363:./tmk_core/common/command.c ****             print("C> ");
 364:./tmk_core/common/command.c ****             command_state = CONSOLE;
 365:./tmk_core/common/command.c ****             break;
 366:./tmk_core/common/command.c **** 
 367:./tmk_core/common/command.c ****         // jump to bootloader
 368:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 369:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 370:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 371:./tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 372:./tmk_core/common/command.c **** 	            stop_all_notes();
 373:./tmk_core/common/command.c ****                 shutdown_user();
 374:./tmk_core/common/command.c ****             #else
 375:./tmk_core/common/command.c **** 	            wait_ms(1000);
 376:./tmk_core/common/command.c ****             #endif
 377:./tmk_core/common/command.c ****             bootloader_jump(); // not return
 378:./tmk_core/common/command.c ****             break;
 379:./tmk_core/common/command.c **** 
 380:./tmk_core/common/command.c ****         // debug toggle
 381:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 382:./tmk_core/common/command.c ****             debug_enable = !debug_enable;
 383:./tmk_core/common/command.c ****             if (debug_enable) {
 384:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 385:./tmk_core/common/command.c ****             } else {
 386:./tmk_core/common/command.c ****                 print("\ndebug: off\n");
 387:./tmk_core/common/command.c ****                 debug_matrix   = false;
 388:./tmk_core/common/command.c ****                 debug_keyboard = false;
 389:./tmk_core/common/command.c ****                 debug_mouse    = false;
 390:./tmk_core/common/command.c ****             }
 391:./tmk_core/common/command.c ****             break;
 392:./tmk_core/common/command.c **** 
 393:./tmk_core/common/command.c ****         // debug matrix toggle
 394:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 395:./tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 396:./tmk_core/common/command.c ****             if (debug_matrix) {
 397:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 398:./tmk_core/common/command.c ****                 debug_enable = true;
 399:./tmk_core/common/command.c ****             } else {
 400:./tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 401:./tmk_core/common/command.c ****             }
 402:./tmk_core/common/command.c ****             break;
 403:./tmk_core/common/command.c **** 
 404:./tmk_core/common/command.c ****         // debug keyboard toggle
 405:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 406:./tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 407:./tmk_core/common/command.c ****             if (debug_keyboard) {
 408:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 409:./tmk_core/common/command.c ****                 debug_enable = true;
 410:./tmk_core/common/command.c ****             } else {
 411:./tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 412:./tmk_core/common/command.c ****             }
 413:./tmk_core/common/command.c ****             break;
 414:./tmk_core/common/command.c **** 
 415:./tmk_core/common/command.c ****         // debug mouse toggle
 416:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 417:./tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 418:./tmk_core/common/command.c ****             if (debug_mouse) {
 419:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 420:./tmk_core/common/command.c ****                 debug_enable = true;
 421:./tmk_core/common/command.c ****             } else {
 422:./tmk_core/common/command.c **** 				print("\nmouse: off\n");
 423:./tmk_core/common/command.c ****             }
 424:./tmk_core/common/command.c ****             break;
 425:./tmk_core/common/command.c **** 
 426:./tmk_core/common/command.c **** 		// print version
 427:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 428:./tmk_core/common/command.c ****         	print_version();
 429:./tmk_core/common/command.c **** 		    break;
 430:./tmk_core/common/command.c **** 
 431:./tmk_core/common/command.c **** 		// print status
 432:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_STATUS):
 433:./tmk_core/common/command.c **** 			print_status();
 434:./tmk_core/common/command.c ****             break;
 435:./tmk_core/common/command.c **** 
 436:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 437:./tmk_core/common/command.c **** 
 438:./tmk_core/common/command.c **** 		// NKRO toggle
 439:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 440:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 441:./tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 442:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 443:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 444:./tmk_core/common/command.c ****             } else {
 445:./tmk_core/common/command.c ****                 print("NKRO: off\n");
 446:./tmk_core/common/command.c ****             }
 447:./tmk_core/common/command.c ****             break;
 448:./tmk_core/common/command.c **** #endif
 449:./tmk_core/common/command.c **** 
 450:./tmk_core/common/command.c **** 		// switch layers
 451:./tmk_core/common/command.c **** 
 452:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT1):
 453:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT2):
 454:./tmk_core/common/command.c ****             switch_default_layer(0);
 455:./tmk_core/common/command.c ****             break;
 456:./tmk_core/common/command.c **** 
 457:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 458:./tmk_core/common/command.c **** 
 459:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0):
 460:./tmk_core/common/command.c ****             switch_default_layer(0);
 461:./tmk_core/common/command.c ****             break;
 462:./tmk_core/common/command.c **** 
 463:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER1):
 464:./tmk_core/common/command.c ****             switch_default_layer(1);
 465:./tmk_core/common/command.c ****             break;
 466:./tmk_core/common/command.c **** 
 467:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER2):
 468:./tmk_core/common/command.c ****             switch_default_layer(2);
 469:./tmk_core/common/command.c ****             break;
 470:./tmk_core/common/command.c **** 
 471:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER3):
 472:./tmk_core/common/command.c ****             switch_default_layer(3);
 473:./tmk_core/common/command.c ****             break;
 474:./tmk_core/common/command.c **** 
 475:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER4):
 476:./tmk_core/common/command.c ****             switch_default_layer(4);
 477:./tmk_core/common/command.c ****             break;
 478:./tmk_core/common/command.c **** 
 479:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER5):
 480:./tmk_core/common/command.c ****             switch_default_layer(5);
 481:./tmk_core/common/command.c ****             break;
 482:./tmk_core/common/command.c **** 
 483:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER6):
 484:./tmk_core/common/command.c ****             switch_default_layer(6);
 485:./tmk_core/common/command.c ****             break;
 486:./tmk_core/common/command.c **** 
 487:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER7):
 488:./tmk_core/common/command.c ****             switch_default_layer(7);
 489:./tmk_core/common/command.c ****             break;
 490:./tmk_core/common/command.c **** 
 491:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER8):
 492:./tmk_core/common/command.c ****             switch_default_layer(8);
 493:./tmk_core/common/command.c ****             break;
 494:./tmk_core/common/command.c **** 
 495:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER9):
 496:./tmk_core/common/command.c ****             switch_default_layer(9);
 497:./tmk_core/common/command.c ****             break;
 498:./tmk_core/common/command.c **** #endif
 499:./tmk_core/common/command.c **** 
 500:./tmk_core/common/command.c **** 
 501:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 502:./tmk_core/common/command.c **** 
 503:./tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 504:./tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 505:./tmk_core/common/command.c ****             break;
 506:./tmk_core/common/command.c ****         case KC_F10:
 507:./tmk_core/common/command.c ****             switch_default_layer(0);
 508:./tmk_core/common/command.c ****             break;
 509:./tmk_core/common/command.c **** #endif
 510:./tmk_core/common/command.c **** 
 511:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 512:./tmk_core/common/command.c **** 
 513:./tmk_core/common/command.c ****         case KC_1 ... KC_9:
 514:./tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 515:./tmk_core/common/command.c ****             break;
 516:./tmk_core/common/command.c ****         case KC_0:
 517:./tmk_core/common/command.c ****             switch_default_layer(0);
 518:./tmk_core/common/command.c ****             break;
 519:./tmk_core/common/command.c **** #endif
 520:./tmk_core/common/command.c **** 
 521:./tmk_core/common/command.c ****         default:
 522:./tmk_core/common/command.c ****             print("?");
 523:./tmk_core/common/command.c ****             return false;
 524:./tmk_core/common/command.c ****     }
 525:./tmk_core/common/command.c ****     return true;
 526:./tmk_core/common/command.c **** }
 527:./tmk_core/common/command.c **** 
 528:./tmk_core/common/command.c **** 
 529:./tmk_core/common/command.c **** /***********************************************************
 530:./tmk_core/common/command.c ****  * Command console
 531:./tmk_core/common/command.c ****  ***********************************************************/
 532:./tmk_core/common/command.c **** static void command_console_help(void)
 533:./tmk_core/common/command.c **** {
 534:./tmk_core/common/command.c ****     print("\n\t- Console -\n"
 535:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 536:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 537:./tmk_core/common/command.c ****           "m:	mousekey\n"
 538:./tmk_core/common/command.c **** #endif
 539:./tmk_core/common/command.c ****     );
 540:./tmk_core/common/command.c **** }
 541:./tmk_core/common/command.c **** 
 542:./tmk_core/common/command.c **** static bool command_console(uint8_t code)
 543:./tmk_core/common/command.c **** {
 544:./tmk_core/common/command.c ****     switch (code) {
 545:./tmk_core/common/command.c ****         case KC_H:
 546:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 547:./tmk_core/common/command.c ****             command_console_help();
 548:./tmk_core/common/command.c ****             break;
 549:./tmk_core/common/command.c ****         case KC_Q:
 550:./tmk_core/common/command.c ****         case KC_ESC:
 551:./tmk_core/common/command.c ****             command_state = ONESHOT;
 552:./tmk_core/common/command.c ****             return false;
 553:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 554:./tmk_core/common/command.c ****         case KC_M:
 555:./tmk_core/common/command.c ****             mousekey_console_help();
 556:./tmk_core/common/command.c ****             print("M> ");
 557:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 558:./tmk_core/common/command.c ****             return true;
 559:./tmk_core/common/command.c **** #endif
 560:./tmk_core/common/command.c ****         default:
 561:./tmk_core/common/command.c ****             print("?");
 562:./tmk_core/common/command.c ****             return false;
 563:./tmk_core/common/command.c ****     }
 564:./tmk_core/common/command.c ****     print("C> ");
 565:./tmk_core/common/command.c ****     return true;
 566:./tmk_core/common/command.c **** }
 567:./tmk_core/common/command.c **** 
 568:./tmk_core/common/command.c **** 
 569:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 570:./tmk_core/common/command.c **** /***********************************************************
 571:./tmk_core/common/command.c ****  * Mousekey console
 572:./tmk_core/common/command.c ****  ***********************************************************/
 573:./tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 574:./tmk_core/common/command.c **** 
 575:./tmk_core/common/command.c **** static void mousekey_param_print(void)
 576:./tmk_core/common/command.c **** {
 577:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 578:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 579:./tmk_core/common/command.c ****     print("\n\t- Values -\n");
 580:./tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 581:./tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 582:./tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 583:./tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 584:./tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 585:./tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 586:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 587:./tmk_core/common/command.c **** 
 588:./tmk_core/common/command.c **** }
 589:./tmk_core/common/command.c **** 
 590:./tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 591:./tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 592:./tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 593:./tmk_core/common/command.c **** {
 594:./tmk_core/common/command.c ****     switch (param) {
 595:./tmk_core/common/command.c ****         case 1:
 596:./tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 597:./tmk_core/common/command.c ****                 mk_delay += inc;
 598:./tmk_core/common/command.c ****             else
 599:./tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 600:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 601:./tmk_core/common/command.c ****             break;
 602:./tmk_core/common/command.c ****         case 2:
 603:./tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 604:./tmk_core/common/command.c ****                 mk_interval += inc;
 605:./tmk_core/common/command.c ****             else
 606:./tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 607:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 608:./tmk_core/common/command.c ****             break;
 609:./tmk_core/common/command.c ****         case 3:
 610:./tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 611:./tmk_core/common/command.c ****                 mk_max_speed += inc;
 612:./tmk_core/common/command.c ****             else
 613:./tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 614:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 615:./tmk_core/common/command.c ****             break;
 616:./tmk_core/common/command.c ****         case 4:
 617:./tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 618:./tmk_core/common/command.c ****                 mk_time_to_max += inc;
 619:./tmk_core/common/command.c ****             else
 620:./tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 621:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 622:./tmk_core/common/command.c ****             break;
 623:./tmk_core/common/command.c ****         case 5:
 624:./tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 625:./tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 626:./tmk_core/common/command.c ****             else
 627:./tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 628:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 629:./tmk_core/common/command.c ****             break;
 630:./tmk_core/common/command.c ****         case 6:
 631:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 632:./tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 633:./tmk_core/common/command.c ****             else
 634:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 635:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 636:./tmk_core/common/command.c ****             break;
 637:./tmk_core/common/command.c ****     }
 638:./tmk_core/common/command.c **** }
 639:./tmk_core/common/command.c **** 
 640:./tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 641:./tmk_core/common/command.c **** {
 642:./tmk_core/common/command.c ****     switch (param) {
 643:./tmk_core/common/command.c ****         case 1:
 644:./tmk_core/common/command.c ****             if (mk_delay > dec)
 645:./tmk_core/common/command.c ****                 mk_delay -= dec;
 646:./tmk_core/common/command.c ****             else
 647:./tmk_core/common/command.c ****                 mk_delay = 0;
 648:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 649:./tmk_core/common/command.c ****             break;
 650:./tmk_core/common/command.c ****         case 2:
 651:./tmk_core/common/command.c ****             if (mk_interval > dec)
 652:./tmk_core/common/command.c ****                 mk_interval -= dec;
 653:./tmk_core/common/command.c ****             else
 654:./tmk_core/common/command.c ****                 mk_interval = 0;
 655:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 656:./tmk_core/common/command.c ****             break;
 657:./tmk_core/common/command.c ****         case 3:
 658:./tmk_core/common/command.c ****             if (mk_max_speed > dec)
 659:./tmk_core/common/command.c ****                 mk_max_speed -= dec;
 660:./tmk_core/common/command.c ****             else
 661:./tmk_core/common/command.c ****                 mk_max_speed = 0;
 662:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 663:./tmk_core/common/command.c ****             break;
 664:./tmk_core/common/command.c ****         case 4:
 665:./tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 666:./tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 667:./tmk_core/common/command.c ****             else
 668:./tmk_core/common/command.c ****                 mk_time_to_max = 0;
 669:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 670:./tmk_core/common/command.c ****             break;
 671:./tmk_core/common/command.c ****         case 5:
 672:./tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 673:./tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 674:./tmk_core/common/command.c ****             else
 675:./tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 676:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 677:./tmk_core/common/command.c ****             break;
 678:./tmk_core/common/command.c ****         case 6:
 679:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 680:./tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 681:./tmk_core/common/command.c ****             else
 682:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 683:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 684:./tmk_core/common/command.c ****             break;
 685:./tmk_core/common/command.c ****     }
 686:./tmk_core/common/command.c **** }
 687:./tmk_core/common/command.c **** 
 688:./tmk_core/common/command.c **** static void mousekey_console_help(void)
 689:./tmk_core/common/command.c **** {
  15               		.loc 1 689 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 690:./tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
  21               		.loc 1 690 0
  22 0000 80E0      		ldi r24,lo8(__c.3405)
  23 0002 90E0      		ldi r25,hi8(__c.3405)
  24 0004 0E94 0000 		call xputs
  25               	.LVL0:
 691:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 692:./tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 693:./tmk_core/common/command.c ****           "2:	interval(ms)\n"
 694:./tmk_core/common/command.c ****           "3:	max_speed\n"
 695:./tmk_core/common/command.c ****           "4:	time_to_max\n"
 696:./tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 697:./tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 698:./tmk_core/common/command.c ****           "\n"
 699:./tmk_core/common/command.c ****           "p:	print values\n"
 700:./tmk_core/common/command.c ****           "d:	set defaults\n"
 701:./tmk_core/common/command.c ****           "up:	+1\n"
 702:./tmk_core/common/command.c ****           "down:	-1\n"
 703:./tmk_core/common/command.c ****           "pgup:	+10\n"
 704:./tmk_core/common/command.c ****           "pgdown:	-10\n"
 705:./tmk_core/common/command.c ****           "\n"
 706:./tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 707:./tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n"
  26               		.loc 1 707 0
  27 0008 1F92      		push __zero_reg__
  28               	.LCFI0:
  29               		.cfi_def_cfa_offset 3
  30 000a 81E0      		ldi r24,lo8(1)
  31 000c 8F93      		push r24
  32               	.LCFI1:
  33               		.cfi_def_cfa_offset 4
  34 000e 1F92      		push __zero_reg__
  35               	.LCFI2:
  36               		.cfi_def_cfa_offset 5
  37 0010 85E0      		ldi r24,lo8(5)
  38 0012 8F93      		push r24
  39               	.LCFI3:
  40               		.cfi_def_cfa_offset 6
  41 0014 80E0      		ldi r24,lo8(__c.3407)
  42 0016 90E0      		ldi r25,hi8(__c.3407)
  43 0018 9F93      		push r25
  44               	.LCFI4:
  45               		.cfi_def_cfa_offset 7
  46 001a 8F93      		push r24
  47               	.LCFI5:
  48               		.cfi_def_cfa_offset 8
  49 001c 0E94 0000 		call __xprintf
  50               	.LVL1:
 708:./tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 709:./tmk_core/common/command.c **** }
  51               		.loc 1 709 0
  52 0020 0F90      		pop __tmp_reg__
  53 0022 0F90      		pop __tmp_reg__
  54 0024 0F90      		pop __tmp_reg__
  55 0026 0F90      		pop __tmp_reg__
  56 0028 0F90      		pop __tmp_reg__
  57 002a 0F90      		pop __tmp_reg__
  58               	.LCFI6:
  59               		.cfi_def_cfa_offset 2
  60               	/* epilogue start */
  61 002c 0895      		ret
  62               		.cfi_endproc
  63               	.LFE29:
  65               		.section	.text.mousekey_param_inc,"ax",@progbits
  67               	mousekey_param_inc:
  68               	.LFB27:
 593:./tmk_core/common/command.c ****     switch (param) {
  69               		.loc 1 593 0
  70               		.cfi_startproc
  71               	.LVL2:
  72               	/* prologue: function */
  73               	/* frame size = 0 */
  74               	/* stack size = 0 */
  75               	.L__stack_usage = 0
 594:./tmk_core/common/command.c ****         case 1:
  76               		.loc 1 594 0
  77 0000 8330      		cpi r24,lo8(3)
  78 0002 01F4      		brne .+2
  79 0004 00C0      		rjmp .L4
  80 0006 00F4      		brsh .L5
  81 0008 8130      		cpi r24,lo8(1)
  82 000a 01F0      		breq .L6
  83 000c 8230      		cpi r24,lo8(2)
  84 000e 01F0      		breq .L7
  85 0010 0895      		ret
  86               	.L5:
  87 0012 8530      		cpi r24,lo8(5)
  88 0014 01F4      		brne .+2
  89 0016 00C0      		rjmp .L8
  90 0018 00F4      		brsh .+2
  91 001a 00C0      		rjmp .L9
  92 001c 8630      		cpi r24,lo8(6)
  93 001e 01F4      		brne .+2
  94 0020 00C0      		rjmp .L10
  95 0022 0895      		ret
  96               	.L6:
 596:./tmk_core/common/command.c ****                 mk_delay += inc;
  97               		.loc 1 596 0
  98 0024 8091 0000 		lds r24,mk_delay
  99               	.LVL3:
 100 0028 482F      		mov r20,r24
 101 002a 460F      		add r20,r22
 102 002c 5527      		clr r21
 103 002e 551F      		rol r21
 104 0030 4F3F      		cpi r20,-1
 105 0032 5105      		cpc r21,__zero_reg__
 106 0034 04F4      		brge .L11
 597:./tmk_core/common/command.c ****             else
 107               		.loc 1 597 0
 108 0036 680F      		add r22,r24
 109               	.LVL4:
 110 0038 6093 0000 		sts mk_delay,r22
 111               	.L12:
 600:./tmk_core/common/command.c ****             break;
 112               		.loc 1 600 0
 113 003c 8091 0000 		lds r24,mk_delay
 114 0040 1F92      		push __zero_reg__
 115               	.LCFI7:
 116               		.cfi_def_cfa_offset 3
 117 0042 8F93      		push r24
 118               	.LCFI8:
 119               		.cfi_def_cfa_offset 4
 120 0044 80E0      		ldi r24,lo8(__c.3361)
 121 0046 90E0      		ldi r25,hi8(__c.3361)
 122               	.L23:
 635:./tmk_core/common/command.c ****             break;
 123               		.loc 1 635 0
 124 0048 9F93      		push r25
 125               	.LCFI9:
 126               		.cfi_def_cfa_offset 5
 127 004a 8F93      		push r24
 128               	.LCFI10:
 129               		.cfi_def_cfa_offset 6
 130 004c 0E94 0000 		call __xprintf
 131               	.LVL5:
 636:./tmk_core/common/command.c ****     }
 132               		.loc 1 636 0
 133 0050 0F90      		pop __tmp_reg__
 134 0052 0F90      		pop __tmp_reg__
 135 0054 0F90      		pop __tmp_reg__
 136 0056 0F90      		pop __tmp_reg__
 137               	.LCFI11:
 138               		.cfi_def_cfa_offset 2
 139               	/* epilogue start */
 638:./tmk_core/common/command.c **** 
 140               		.loc 1 638 0
 141 0058 0895      		ret
 142               	.LVL6:
 143               	.L11:
 599:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 144               		.loc 1 599 0
 145 005a 8FEF      		ldi r24,lo8(-1)
 146 005c 8093 0000 		sts mk_delay,r24
 147 0060 00C0      		rjmp .L12
 148               	.LVL7:
 149               	.L7:
 603:./tmk_core/common/command.c ****                 mk_interval += inc;
 150               		.loc 1 603 0
 151 0062 8091 0000 		lds r24,mk_interval
 152               	.LVL8:
 153 0066 482F      		mov r20,r24
 154 0068 460F      		add r20,r22
 155 006a 5527      		clr r21
 156 006c 551F      		rol r21
 157 006e 4F3F      		cpi r20,-1
 158 0070 5105      		cpc r21,__zero_reg__
 159 0072 04F4      		brge .L13
 604:./tmk_core/common/command.c ****             else
 160               		.loc 1 604 0
 161 0074 680F      		add r22,r24
 162               	.LVL9:
 163 0076 6093 0000 		sts mk_interval,r22
 164               	.L14:
 607:./tmk_core/common/command.c ****             break;
 165               		.loc 1 607 0
 166 007a 8091 0000 		lds r24,mk_interval
 167 007e 1F92      		push __zero_reg__
 168               	.LCFI12:
 169               		.cfi_remember_state
 170               		.cfi_def_cfa_offset 3
 171 0080 8F93      		push r24
 172               	.LCFI13:
 173               		.cfi_def_cfa_offset 4
 174 0082 80E0      		ldi r24,lo8(__c.3365)
 175 0084 90E0      		ldi r25,hi8(__c.3365)
 176 0086 00C0      		rjmp .L23
 177               	.LVL10:
 178               	.L13:
 179               	.LCFI14:
 180               		.cfi_restore_state
 606:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 181               		.loc 1 606 0
 182 0088 8FEF      		ldi r24,lo8(-1)
 183 008a 8093 0000 		sts mk_interval,r24
 184 008e 00C0      		rjmp .L14
 185               	.LVL11:
 186               	.L4:
 610:./tmk_core/common/command.c ****                 mk_max_speed += inc;
 187               		.loc 1 610 0
 188 0090 8091 0000 		lds r24,mk_max_speed
 189               	.LVL12:
 190 0094 482F      		mov r20,r24
 191 0096 460F      		add r20,r22
 192 0098 5527      		clr r21
 193 009a 551F      		rol r21
 194 009c 4F3F      		cpi r20,-1
 195 009e 5105      		cpc r21,__zero_reg__
 196 00a0 04F4      		brge .L15
 611:./tmk_core/common/command.c ****             else
 197               		.loc 1 611 0
 198 00a2 680F      		add r22,r24
 199               	.LVL13:
 200 00a4 6093 0000 		sts mk_max_speed,r22
 201               	.L16:
 614:./tmk_core/common/command.c ****             break;
 202               		.loc 1 614 0
 203 00a8 8091 0000 		lds r24,mk_max_speed
 204 00ac 1F92      		push __zero_reg__
 205               	.LCFI15:
 206               		.cfi_remember_state
 207               		.cfi_def_cfa_offset 3
 208 00ae 8F93      		push r24
 209               	.LCFI16:
 210               		.cfi_def_cfa_offset 4
 211 00b0 80E0      		ldi r24,lo8(__c.3368)
 212 00b2 90E0      		ldi r25,hi8(__c.3368)
 213 00b4 00C0      		rjmp .L23
 214               	.LVL14:
 215               	.L15:
 216               	.LCFI17:
 217               		.cfi_restore_state
 613:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 218               		.loc 1 613 0
 219 00b6 8FEF      		ldi r24,lo8(-1)
 220 00b8 8093 0000 		sts mk_max_speed,r24
 221 00bc 00C0      		rjmp .L16
 222               	.LVL15:
 223               	.L9:
 617:./tmk_core/common/command.c ****                 mk_time_to_max += inc;
 224               		.loc 1 617 0
 225 00be 8091 0000 		lds r24,mk_time_to_max
 226               	.LVL16:
 227 00c2 482F      		mov r20,r24
 228 00c4 460F      		add r20,r22
 229 00c6 5527      		clr r21
 230 00c8 551F      		rol r21
 231 00ca 4F3F      		cpi r20,-1
 232 00cc 5105      		cpc r21,__zero_reg__
 233 00ce 04F4      		brge .L17
 618:./tmk_core/common/command.c ****             else
 234               		.loc 1 618 0
 235 00d0 680F      		add r22,r24
 236               	.LVL17:
 237 00d2 6093 0000 		sts mk_time_to_max,r22
 238               	.L18:
 621:./tmk_core/common/command.c ****             break;
 239               		.loc 1 621 0
 240 00d6 8091 0000 		lds r24,mk_time_to_max
 241 00da 1F92      		push __zero_reg__
 242               	.LCFI18:
 243               		.cfi_remember_state
 244               		.cfi_def_cfa_offset 3
 245 00dc 8F93      		push r24
 246               	.LCFI19:
 247               		.cfi_def_cfa_offset 4
 248 00de 80E0      		ldi r24,lo8(__c.3371)
 249 00e0 90E0      		ldi r25,hi8(__c.3371)
 250 00e2 00C0      		rjmp .L23
 251               	.LVL18:
 252               	.L17:
 253               	.LCFI20:
 254               		.cfi_restore_state
 620:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 255               		.loc 1 620 0
 256 00e4 8FEF      		ldi r24,lo8(-1)
 257 00e6 8093 0000 		sts mk_time_to_max,r24
 258 00ea 00C0      		rjmp .L18
 259               	.LVL19:
 260               	.L8:
 624:./tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 261               		.loc 1 624 0
 262 00ec 8091 0000 		lds r24,mk_wheel_max_speed
 263               	.LVL20:
 264 00f0 482F      		mov r20,r24
 265 00f2 460F      		add r20,r22
 266 00f4 5527      		clr r21
 267 00f6 551F      		rol r21
 268 00f8 4F3F      		cpi r20,-1
 269 00fa 5105      		cpc r21,__zero_reg__
 270 00fc 04F4      		brge .L19
 625:./tmk_core/common/command.c ****             else
 271               		.loc 1 625 0
 272 00fe 680F      		add r22,r24
 273               	.LVL21:
 274 0100 6093 0000 		sts mk_wheel_max_speed,r22
 275               	.L20:
 628:./tmk_core/common/command.c ****             break;
 276               		.loc 1 628 0
 277 0104 8091 0000 		lds r24,mk_wheel_max_speed
 278 0108 1F92      		push __zero_reg__
 279               	.LCFI21:
 280               		.cfi_remember_state
 281               		.cfi_def_cfa_offset 3
 282 010a 8F93      		push r24
 283               	.LCFI22:
 284               		.cfi_def_cfa_offset 4
 285 010c 80E0      		ldi r24,lo8(__c.3374)
 286 010e 90E0      		ldi r25,hi8(__c.3374)
 287 0110 00C0      		rjmp .L23
 288               	.LVL22:
 289               	.L19:
 290               	.LCFI23:
 291               		.cfi_restore_state
 627:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 292               		.loc 1 627 0
 293 0112 8FEF      		ldi r24,lo8(-1)
 294 0114 8093 0000 		sts mk_wheel_max_speed,r24
 295 0118 00C0      		rjmp .L20
 296               	.LVL23:
 297               	.L10:
 631:./tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 298               		.loc 1 631 0
 299 011a 8091 0000 		lds r24,mk_wheel_time_to_max
 300               	.LVL24:
 301 011e 482F      		mov r20,r24
 302 0120 460F      		add r20,r22
 303 0122 5527      		clr r21
 304 0124 551F      		rol r21
 305 0126 4F3F      		cpi r20,-1
 306 0128 5105      		cpc r21,__zero_reg__
 307 012a 04F4      		brge .L21
 632:./tmk_core/common/command.c ****             else
 308               		.loc 1 632 0
 309 012c 680F      		add r22,r24
 310               	.LVL25:
 311 012e 6093 0000 		sts mk_wheel_time_to_max,r22
 312               	.L22:
 635:./tmk_core/common/command.c ****             break;
 313               		.loc 1 635 0
 314 0132 8091 0000 		lds r24,mk_wheel_time_to_max
 315 0136 1F92      		push __zero_reg__
 316               	.LCFI24:
 317               		.cfi_remember_state
 318               		.cfi_def_cfa_offset 3
 319 0138 8F93      		push r24
 320               	.LCFI25:
 321               		.cfi_def_cfa_offset 4
 322 013a 80E0      		ldi r24,lo8(__c.3377)
 323 013c 90E0      		ldi r25,hi8(__c.3377)
 324 013e 00C0      		rjmp .L23
 325               	.LVL26:
 326               	.L21:
 327               	.LCFI26:
 328               		.cfi_restore_state
 634:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 329               		.loc 1 634 0
 330 0140 8FEF      		ldi r24,lo8(-1)
 331 0142 8093 0000 		sts mk_wheel_time_to_max,r24
 332 0146 00C0      		rjmp .L22
 333               		.cfi_endproc
 334               	.LFE27:
 336               		.section	.text.mousekey_param_dec,"ax",@progbits
 338               	mousekey_param_dec:
 339               	.LFB28:
 641:./tmk_core/common/command.c ****     switch (param) {
 340               		.loc 1 641 0
 341               		.cfi_startproc
 342               	.LVL27:
 343               	/* prologue: function */
 344               	/* frame size = 0 */
 345               	/* stack size = 0 */
 346               	.L__stack_usage = 0
 642:./tmk_core/common/command.c ****         case 1:
 347               		.loc 1 642 0
 348 0000 8330      		cpi r24,lo8(3)
 349 0002 01F0      		breq .L26
 350 0004 00F4      		brsh .L27
 351 0006 8130      		cpi r24,lo8(1)
 352 0008 01F0      		breq .L28
 353 000a 8230      		cpi r24,lo8(2)
 354 000c 01F0      		breq .L29
 355 000e 0895      		ret
 356               	.L27:
 357 0010 8530      		cpi r24,lo8(5)
 358 0012 01F4      		brne .+2
 359 0014 00C0      		rjmp .L30
 360 0016 00F4      		brsh .+2
 361 0018 00C0      		rjmp .L31
 362 001a 8630      		cpi r24,lo8(6)
 363 001c 01F4      		brne .+2
 364 001e 00C0      		rjmp .L32
 365 0020 0895      		ret
 366               	.L28:
 644:./tmk_core/common/command.c ****                 mk_delay -= dec;
 367               		.loc 1 644 0
 368 0022 8091 0000 		lds r24,mk_delay
 369               	.LVL28:
 370 0026 6817      		cp r22,r24
 371 0028 00F4      		brsh .L33
 645:./tmk_core/common/command.c ****             else
 372               		.loc 1 645 0
 373 002a 861B      		sub r24,r22
 374 002c 8093 0000 		sts mk_delay,r24
 375               	.L34:
 648:./tmk_core/common/command.c ****             break;
 376               		.loc 1 648 0
 377 0030 8091 0000 		lds r24,mk_delay
 378 0034 1F92      		push __zero_reg__
 379               	.LCFI27:
 380               		.cfi_def_cfa_offset 3
 381 0036 8F93      		push r24
 382               	.LCFI28:
 383               		.cfi_def_cfa_offset 4
 384 0038 80E0      		ldi r24,lo8(__c.3384)
 385 003a 90E0      		ldi r25,hi8(__c.3384)
 386               	.L45:
 683:./tmk_core/common/command.c ****             break;
 387               		.loc 1 683 0
 388 003c 9F93      		push r25
 389               	.LCFI29:
 390               		.cfi_def_cfa_offset 5
 391 003e 8F93      		push r24
 392               	.LCFI30:
 393               		.cfi_def_cfa_offset 6
 394 0040 0E94 0000 		call __xprintf
 395               	.LVL29:
 684:./tmk_core/common/command.c ****     }
 396               		.loc 1 684 0
 397 0044 0F90      		pop __tmp_reg__
 398 0046 0F90      		pop __tmp_reg__
 399 0048 0F90      		pop __tmp_reg__
 400 004a 0F90      		pop __tmp_reg__
 401               	.LCFI31:
 402               		.cfi_def_cfa_offset 2
 403               	/* epilogue start */
 686:./tmk_core/common/command.c **** 
 404               		.loc 1 686 0
 405 004c 0895      		ret
 406               	.LVL30:
 407               	.L33:
 647:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 408               		.loc 1 647 0
 409 004e 1092 0000 		sts mk_delay,__zero_reg__
 410 0052 00C0      		rjmp .L34
 411               	.LVL31:
 412               	.L29:
 651:./tmk_core/common/command.c ****                 mk_interval -= dec;
 413               		.loc 1 651 0
 414 0054 8091 0000 		lds r24,mk_interval
 415               	.LVL32:
 416 0058 6817      		cp r22,r24
 417 005a 00F4      		brsh .L35
 652:./tmk_core/common/command.c ****             else
 418               		.loc 1 652 0
 419 005c 861B      		sub r24,r22
 420 005e 8093 0000 		sts mk_interval,r24
 421               	.L36:
 655:./tmk_core/common/command.c ****             break;
 422               		.loc 1 655 0
 423 0062 8091 0000 		lds r24,mk_interval
 424 0066 1F92      		push __zero_reg__
 425               	.LCFI32:
 426               		.cfi_remember_state
 427               		.cfi_def_cfa_offset 3
 428 0068 8F93      		push r24
 429               	.LCFI33:
 430               		.cfi_def_cfa_offset 4
 431 006a 80E0      		ldi r24,lo8(__c.3388)
 432 006c 90E0      		ldi r25,hi8(__c.3388)
 433 006e 00C0      		rjmp .L45
 434               	.L35:
 435               	.LCFI34:
 436               		.cfi_restore_state
 654:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 437               		.loc 1 654 0
 438 0070 1092 0000 		sts mk_interval,__zero_reg__
 439 0074 00C0      		rjmp .L36
 440               	.LVL33:
 441               	.L26:
 658:./tmk_core/common/command.c ****                 mk_max_speed -= dec;
 442               		.loc 1 658 0
 443 0076 8091 0000 		lds r24,mk_max_speed
 444               	.LVL34:
 445 007a 6817      		cp r22,r24
 446 007c 00F4      		brsh .L37
 659:./tmk_core/common/command.c ****             else
 447               		.loc 1 659 0
 448 007e 861B      		sub r24,r22
 449 0080 8093 0000 		sts mk_max_speed,r24
 450               	.L38:
 662:./tmk_core/common/command.c ****             break;
 451               		.loc 1 662 0
 452 0084 8091 0000 		lds r24,mk_max_speed
 453 0088 1F92      		push __zero_reg__
 454               	.LCFI35:
 455               		.cfi_remember_state
 456               		.cfi_def_cfa_offset 3
 457 008a 8F93      		push r24
 458               	.LCFI36:
 459               		.cfi_def_cfa_offset 4
 460 008c 80E0      		ldi r24,lo8(__c.3391)
 461 008e 90E0      		ldi r25,hi8(__c.3391)
 462 0090 00C0      		rjmp .L45
 463               	.L37:
 464               	.LCFI37:
 465               		.cfi_restore_state
 661:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 466               		.loc 1 661 0
 467 0092 1092 0000 		sts mk_max_speed,__zero_reg__
 468 0096 00C0      		rjmp .L38
 469               	.LVL35:
 470               	.L31:
 665:./tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 471               		.loc 1 665 0
 472 0098 8091 0000 		lds r24,mk_time_to_max
 473               	.LVL36:
 474 009c 6817      		cp r22,r24
 475 009e 00F4      		brsh .L39
 666:./tmk_core/common/command.c ****             else
 476               		.loc 1 666 0
 477 00a0 861B      		sub r24,r22
 478 00a2 8093 0000 		sts mk_time_to_max,r24
 479               	.L40:
 669:./tmk_core/common/command.c ****             break;
 480               		.loc 1 669 0
 481 00a6 8091 0000 		lds r24,mk_time_to_max
 482 00aa 1F92      		push __zero_reg__
 483               	.LCFI38:
 484               		.cfi_remember_state
 485               		.cfi_def_cfa_offset 3
 486 00ac 8F93      		push r24
 487               	.LCFI39:
 488               		.cfi_def_cfa_offset 4
 489 00ae 80E0      		ldi r24,lo8(__c.3394)
 490 00b0 90E0      		ldi r25,hi8(__c.3394)
 491 00b2 00C0      		rjmp .L45
 492               	.L39:
 493               	.LCFI40:
 494               		.cfi_restore_state
 668:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 495               		.loc 1 668 0
 496 00b4 1092 0000 		sts mk_time_to_max,__zero_reg__
 497 00b8 00C0      		rjmp .L40
 498               	.LVL37:
 499               	.L30:
 672:./tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 500               		.loc 1 672 0
 501 00ba 8091 0000 		lds r24,mk_wheel_max_speed
 502               	.LVL38:
 503 00be 6817      		cp r22,r24
 504 00c0 00F4      		brsh .L41
 673:./tmk_core/common/command.c ****             else
 505               		.loc 1 673 0
 506 00c2 861B      		sub r24,r22
 507 00c4 8093 0000 		sts mk_wheel_max_speed,r24
 508               	.L42:
 676:./tmk_core/common/command.c ****             break;
 509               		.loc 1 676 0
 510 00c8 8091 0000 		lds r24,mk_wheel_max_speed
 511 00cc 1F92      		push __zero_reg__
 512               	.LCFI41:
 513               		.cfi_remember_state
 514               		.cfi_def_cfa_offset 3
 515 00ce 8F93      		push r24
 516               	.LCFI42:
 517               		.cfi_def_cfa_offset 4
 518 00d0 80E0      		ldi r24,lo8(__c.3397)
 519 00d2 90E0      		ldi r25,hi8(__c.3397)
 520 00d4 00C0      		rjmp .L45
 521               	.L41:
 522               	.LCFI43:
 523               		.cfi_restore_state
 675:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 524               		.loc 1 675 0
 525 00d6 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 526 00da 00C0      		rjmp .L42
 527               	.LVL39:
 528               	.L32:
 679:./tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 529               		.loc 1 679 0
 530 00dc 8091 0000 		lds r24,mk_wheel_time_to_max
 531               	.LVL40:
 532 00e0 6817      		cp r22,r24
 533 00e2 00F4      		brsh .L43
 680:./tmk_core/common/command.c ****             else
 534               		.loc 1 680 0
 535 00e4 861B      		sub r24,r22
 536 00e6 8093 0000 		sts mk_wheel_time_to_max,r24
 537               	.L44:
 683:./tmk_core/common/command.c ****             break;
 538               		.loc 1 683 0
 539 00ea 8091 0000 		lds r24,mk_wheel_time_to_max
 540 00ee 1F92      		push __zero_reg__
 541               	.LCFI44:
 542               		.cfi_remember_state
 543               		.cfi_def_cfa_offset 3
 544 00f0 8F93      		push r24
 545               	.LCFI45:
 546               		.cfi_def_cfa_offset 4
 547 00f2 80E0      		ldi r24,lo8(__c.3400)
 548 00f4 90E0      		ldi r25,hi8(__c.3400)
 549 00f6 00C0      		rjmp .L45
 550               	.L43:
 551               	.LCFI46:
 552               		.cfi_restore_state
 682:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 553               		.loc 1 682 0
 554 00f8 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 555 00fc 00C0      		rjmp .L44
 556               		.cfi_endproc
 557               	.LFE28:
 559               		.section	.text.switch_default_layer,"ax",@progbits
 561               	switch_default_layer:
 562               	.LFB32:
 710:./tmk_core/common/command.c **** 
 711:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 712:./tmk_core/common/command.c **** {
 713:./tmk_core/common/command.c ****     switch (code) {
 714:./tmk_core/common/command.c ****         case KC_H:
 715:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 716:./tmk_core/common/command.c ****             mousekey_console_help();
 717:./tmk_core/common/command.c ****             break;
 718:./tmk_core/common/command.c ****         case KC_Q:
 719:./tmk_core/common/command.c ****         case KC_ESC:
 720:./tmk_core/common/command.c ****             if (mousekey_param) {
 721:./tmk_core/common/command.c ****                 mousekey_param = 0;
 722:./tmk_core/common/command.c ****             } else {
 723:./tmk_core/common/command.c ****                 print("C> ");
 724:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 725:./tmk_core/common/command.c ****                 return false;
 726:./tmk_core/common/command.c ****             }
 727:./tmk_core/common/command.c ****             break;
 728:./tmk_core/common/command.c ****         case KC_P:
 729:./tmk_core/common/command.c ****             mousekey_param_print();
 730:./tmk_core/common/command.c ****             break;
 731:./tmk_core/common/command.c ****         case KC_1:
 732:./tmk_core/common/command.c ****         case KC_2:
 733:./tmk_core/common/command.c ****         case KC_3:
 734:./tmk_core/common/command.c ****         case KC_4:
 735:./tmk_core/common/command.c ****         case KC_5:
 736:./tmk_core/common/command.c ****         case KC_6:
 737:./tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 738:./tmk_core/common/command.c ****             break;
 739:./tmk_core/common/command.c ****         case KC_UP:
 740:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 741:./tmk_core/common/command.c ****             break;
 742:./tmk_core/common/command.c ****         case KC_DOWN:
 743:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 744:./tmk_core/common/command.c ****             break;
 745:./tmk_core/common/command.c ****         case KC_PGUP:
 746:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 747:./tmk_core/common/command.c ****             break;
 748:./tmk_core/common/command.c ****         case KC_PGDN:
 749:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 750:./tmk_core/common/command.c ****             break;
 751:./tmk_core/common/command.c ****         case KC_D:
 752:./tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 753:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 754:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 755:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 756:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 757:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 758:./tmk_core/common/command.c ****             print("set default\n");
 759:./tmk_core/common/command.c ****             break;
 760:./tmk_core/common/command.c ****         default:
 761:./tmk_core/common/command.c ****             print("?");
 762:./tmk_core/common/command.c ****             return false;
 763:./tmk_core/common/command.c ****     }
 764:./tmk_core/common/command.c ****     if (mousekey_param) {
 765:./tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 766:./tmk_core/common/command.c ****     } else {
 767:./tmk_core/common/command.c ****         print("M>" );
 768:./tmk_core/common/command.c ****     }
 769:./tmk_core/common/command.c ****     return true;
 770:./tmk_core/common/command.c **** }
 771:./tmk_core/common/command.c **** #endif
 772:./tmk_core/common/command.c **** 
 773:./tmk_core/common/command.c **** 
 774:./tmk_core/common/command.c **** /***********************************************************
 775:./tmk_core/common/command.c ****  * Utilities
 776:./tmk_core/common/command.c ****  ***********************************************************/
 777:./tmk_core/common/command.c **** uint8_t numkey2num(uint8_t code)
 778:./tmk_core/common/command.c **** {
 779:./tmk_core/common/command.c ****     switch (code) {
 780:./tmk_core/common/command.c ****         case KC_1: return 1;
 781:./tmk_core/common/command.c ****         case KC_2: return 2;
 782:./tmk_core/common/command.c ****         case KC_3: return 3;
 783:./tmk_core/common/command.c ****         case KC_4: return 4;
 784:./tmk_core/common/command.c ****         case KC_5: return 5;
 785:./tmk_core/common/command.c ****         case KC_6: return 6;
 786:./tmk_core/common/command.c ****         case KC_7: return 7;
 787:./tmk_core/common/command.c ****         case KC_8: return 8;
 788:./tmk_core/common/command.c ****         case KC_9: return 9;
 789:./tmk_core/common/command.c ****         case KC_0: return 0;
 790:./tmk_core/common/command.c ****     }
 791:./tmk_core/common/command.c ****     return 0;
 792:./tmk_core/common/command.c **** }
 793:./tmk_core/common/command.c **** 
 794:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 795:./tmk_core/common/command.c **** {
 563               		.loc 1 795 0
 564               		.cfi_startproc
 565               	.LVL41:
 566 0000 CF93      		push r28
 567               	.LCFI47:
 568               		.cfi_def_cfa_offset 3
 569               		.cfi_offset 28, -2
 570               	/* prologue: function */
 571               	/* frame size = 0 */
 572               	/* stack size = 1 */
 573               	.L__stack_usage = 1
 574 0002 C82F      		mov r28,r24
 796:./tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 575               		.loc 1 796 0
 576 0004 1F92      		push __zero_reg__
 577               	.LCFI48:
 578               		.cfi_def_cfa_offset 4
 579 0006 8F93      		push r24
 580               	.LCFI49:
 581               		.cfi_def_cfa_offset 5
 582 0008 80E0      		ldi r24,lo8(__c.3456)
 583 000a 90E0      		ldi r25,hi8(__c.3456)
 584               	.LVL42:
 585 000c 9F93      		push r25
 586               	.LCFI50:
 587               		.cfi_def_cfa_offset 6
 588 000e 8F93      		push r24
 589               	.LCFI51:
 590               		.cfi_def_cfa_offset 7
 591 0010 0E94 0000 		call __xprintf
 592               	.LVL43:
 797:./tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 593               		.loc 1 797 0
 594 0014 61E0      		ldi r22,lo8(1)
 595 0016 70E0      		ldi r23,0
 596 0018 80E0      		ldi r24,0
 597 001a 90E0      		ldi r25,0
 598 001c 00C0      		rjmp 2f
 599               		1:
 600 001e 660F      		lsl r22
 601 0020 771F      		rol r23
 602 0022 881F      		rol r24
 603 0024 991F      		rol r25
 604               		2:
 605 0026 CA95      		dec r28
 606 0028 02F4      		brpl 1b
 607 002a 0E94 0000 		call default_layer_set
 608               	.LVL44:
 798:./tmk_core/common/command.c ****     clear_keyboard();
 609               		.loc 1 798 0
 610 002e 0F90      		pop __tmp_reg__
 611 0030 0F90      		pop __tmp_reg__
 612 0032 0F90      		pop __tmp_reg__
 613 0034 0F90      		pop __tmp_reg__
 614               	.LCFI52:
 615               		.cfi_def_cfa_offset 3
 616               	/* epilogue start */
 799:./tmk_core/common/command.c **** }
 617               		.loc 1 799 0
 618 0036 CF91      		pop r28
 619               	.LVL45:
 798:./tmk_core/common/command.c ****     clear_keyboard();
 620               		.loc 1 798 0
 621 0038 0C94 0000 		jmp clear_keyboard
 622               	.LVL46:
 623               		.cfi_endproc
 624               	.LFE32:
 626               		.section	.text.command_common,"ax",@progbits
 628               	command_common:
 629               	.LFB23:
 307:./tmk_core/common/command.c **** 
 630               		.loc 1 307 0
 631               		.cfi_startproc
 632               	/* prologue: function */
 633               	/* frame size = 0 */
 634               	/* stack size = 0 */
 635               	.L__stack_usage = 0
 313:./tmk_core/common/command.c **** 
 636               		.loc 1 313 0
 637 0000 8732      		cpi r24,lo8(39)
 638 0002 00F0      		brlo .+2
 639 0004 00C0      		rjmp .L49
 640 0006 8E31      		cpi r24,lo8(30)
 641 0008 00F0      		brlo .+2
 642 000a 00C0      		rjmp .L50
 643 000c 8E30      		cpi r24,lo8(14)
 644 000e 01F4      		brne .+2
 645 0010 00C0      		rjmp .L51
 646 0012 00F4      		brsh .L52
 647 0014 8730      		cpi r24,lo8(7)
 648 0016 01F4      		brne .+2
 649 0018 00C0      		rjmp .L53
 650 001a 8B30      		cpi r24,lo8(11)
 651 001c 01F4      		brne .+2
 652 001e 00C0      		rjmp .L54
 653 0020 8630      		cpi r24,lo8(6)
 654 0022 01F4      		brne .+2
 655 0024 00C0      		rjmp .L55
 656               	.L48:
 522:./tmk_core/common/command.c ****             return false;
 657               		.loc 1 522 0
 658 0026 80E0      		ldi r24,lo8(__c.3291)
 659 0028 90E0      		ldi r25,hi8(__c.3291)
 660 002a 0E94 0000 		call xputs
 523:./tmk_core/common/command.c ****     }
 661               		.loc 1 523 0
 662 002e 80E0      		ldi r24,0
 663               	/* epilogue start */
 526:./tmk_core/common/command.c **** 
 664               		.loc 1 526 0
 665 0030 0895      		ret
 666               	.L52:
 313:./tmk_core/common/command.c **** 
 667               		.loc 1 313 0
 668 0032 8631      		cpi r24,lo8(22)
 669 0034 01F4      		brne .+2
 670 0036 00C0      		rjmp .L56
 671 0038 00F4      		brsh .L57
 672 003a 8031      		cpi r24,lo8(16)
 673 003c 01F4      		brne .L48
 417:./tmk_core/common/command.c ****             if (debug_mouse) {
 674               		.loc 1 417 0
 675 003e 9091 0000 		lds r25,debug_config
 676 0042 892F      		mov r24,r25
 677 0044 877F      		andi r24,~(1<<3)
 678 0046 93FF      		sbrs r25,3
 679 0048 8860      		ori r24,1<<3
 680 004a 8093 0000 		sts debug_config,r24
 418:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 681               		.loc 1 418 0
 682 004e 83FF      		sbrs r24,3
 683 0050 00C0      		rjmp .L70
 419:./tmk_core/common/command.c ****                 debug_enable = true;
 684               		.loc 1 419 0
 685 0052 80E0      		ldi r24,lo8(__c.3278)
 686 0054 90E0      		ldi r25,hi8(__c.3278)
 687 0056 00C0      		rjmp .L93
 688               	.L57:
 313:./tmk_core/common/command.c **** 
 689               		.loc 1 313 0
 690 0058 8931      		cpi r24,lo8(25)
 691 005a 01F4      		brne .+2
 692 005c 00C0      		rjmp .L59
 693 005e 8B31      		cpi r24,lo8(27)
 694 0060 01F4      		brne .L48
 395:./tmk_core/common/command.c ****             if (debug_matrix) {
 695               		.loc 1 395 0
 696 0062 9091 0000 		lds r25,debug_config
 697 0066 892F      		mov r24,r25
 698 0068 8D7F      		andi r24,~(1<<1)
 699 006a 91FF      		sbrs r25,1
 700 006c 8260      		ori r24,1<<1
 701 006e 8093 0000 		sts debug_config,r24
 396:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 702               		.loc 1 396 0
 703 0072 81FF      		sbrs r24,1
 704 0074 00C0      		rjmp .L68
 397:./tmk_core/common/command.c ****                 debug_enable = true;
 705               		.loc 1 397 0
 706 0076 80E0      		ldi r24,lo8(__c.3268)
 707 0078 90E0      		ldi r25,hi8(__c.3268)
 708               	.L93:
 419:./tmk_core/common/command.c ****                 debug_enable = true;
 709               		.loc 1 419 0
 710 007a 0E94 0000 		call xputs
 420:./tmk_core/common/command.c ****             } else {
 711               		.loc 1 420 0
 712 007e 8091 0000 		lds r24,debug_config
 713 0082 8160      		ori r24,lo8(1<<0)
 714 0084 00C0      		rjmp .L92
 715               	.L49:
 313:./tmk_core/common/command.c **** 
 716               		.loc 1 313 0
 717 0086 8833      		cpi r24,lo8(56)
 718 0088 01F0      		breq .L54
 719 008a 00F4      		brsh .L61
 720 008c 8932      		cpi r24,lo8(41)
 721 008e 01F0      		breq .L62
 722 0090 8533      		cpi r24,lo8(53)
 723 0092 01F0      		breq .L62
 724 0094 8732      		cpi r24,lo8(39)
 725 0096 01F4      		brne .L48
 726               	.L62:
 454:./tmk_core/common/command.c ****             break;
 727               		.loc 1 454 0
 728 0098 80E0      		ldi r24,0
 729               	.L94:
 514:./tmk_core/common/command.c ****             break;
 730               		.loc 1 514 0
 731 009a 0E94 0000 		call switch_default_layer
 732 009e 00C0      		rjmp .L90
 733               	.L61:
 313:./tmk_core/common/command.c **** 
 734               		.loc 1 313 0
 735 00a0 8334      		cpi r24,lo8(67)
 736 00a2 01F0      		breq .L62
 737 00a4 00F4      		brsh .L63
 738 00a6 8A33      		cpi r24,lo8(58)
 739 00a8 00F4      		brsh .+2
 740 00aa 00C0      		rjmp .L48
 504:./tmk_core/common/command.c ****             break;
 741               		.loc 1 504 0
 742 00ac 8953      		subi r24,lo8(-(-57))
 743 00ae 00C0      		rjmp .L94
 744               	.L63:
 313:./tmk_core/common/command.c **** 
 745               		.loc 1 313 0
 746 00b0 8834      		cpi r24,lo8(72)
 747 00b2 01F0      		breq .+2
 748 00b4 00C0      		rjmp .L48
 369:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 749               		.loc 1 369 0
 750 00b6 0E94 0000 		call clear_keyboard
 370:./tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 751               		.loc 1 370 0
 752 00ba 80E0      		ldi r24,lo8(__c.3260)
 753 00bc 90E0      		ldi r25,hi8(__c.3260)
 754 00be 0E94 0000 		call xputs
 755               	.LBB49:
 756               	.LBB50:
 757               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 758               		.loc 2 187 0
 759 00c2 2FEF      		ldi r18,lo8(3199999)
 760 00c4 83ED      		ldi r24,hi8(3199999)
 761 00c6 90E3      		ldi r25,hlo8(3199999)
 762 00c8 2150      	1:	subi r18,1
 763 00ca 8040      		sbci r24,0
 764 00cc 9040      		sbci r25,0
 765 00ce 01F4      		brne 1b
 766 00d0 00C0      		rjmp .
 767 00d2 0000      		nop
 768               	.LBE50:
 769               	.LBE49:
 377:./tmk_core/common/command.c ****             break;
 770               		.loc 1 377 0
 771 00d4 0E94 0000 		call bootloader_jump
 772               	.L90:
 525:./tmk_core/common/command.c **** }
 773               		.loc 1 525 0
 774 00d8 81E0      		ldi r24,lo8(1)
 378:./tmk_core/common/command.c **** 
 775               		.loc 1 378 0
 776 00da 0895      		ret
 777               	.L54:
 778               	.LBB51:
 779               	.LBB52:
 124:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG       ) ":	Debug Message Toggle\n"
 780               		.loc 1 124 0
 781 00dc 80E0      		ldi r24,lo8(__c.3220)
 782 00de 90E0      		ldi r25,hi8(__c.3220)
 783               	.L91:
 784               	.LBE52:
 785               	.LBE51:
 786               	.LBB53:
 787               	.LBB54:
 222:./tmk_core/common/command.c **** #if defined(__AVR__)
 788               		.loc 1 222 0
 789 00e0 0E94 0000 		call xputs
 790 00e4 00C0      		rjmp .L90
 791               	.L55:
 792               	.LBE54:
 793               	.LBE53:
 358:./tmk_core/common/command.c ****             debug_keyboard = false;
 794               		.loc 1 358 0
 795 00e6 8091 0000 		lds r24,debug_config
 361:./tmk_core/common/command.c ****             command_console_help();
 796               		.loc 1 361 0
 797 00ea 817F      		andi r24,lo8(-15)
 798 00ec 8E7F      		andi r24,lo8(~(1<<0))
 799 00ee 8093 0000 		sts debug_config,r24
 800               	.LBB56:
 801               	.LBB57:
 534:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 802               		.loc 1 534 0
 803 00f2 80E0      		ldi r24,lo8(__c.3296)
 804 00f4 90E0      		ldi r25,hi8(__c.3296)
 805 00f6 0E94 0000 		call xputs
 806               	.LBE57:
 807               	.LBE56:
 363:./tmk_core/common/command.c ****             command_state = CONSOLE;
 808               		.loc 1 363 0
 809 00fa 80E0      		ldi r24,lo8(__c.3257)
 810 00fc 90E0      		ldi r25,hi8(__c.3257)
 811 00fe 0E94 0000 		call xputs
 364:./tmk_core/common/command.c ****             break;
 812               		.loc 1 364 0
 813 0102 81E0      		ldi r24,lo8(1)
 814 0104 8093 0000 		sts command_state,r24
 365:./tmk_core/common/command.c **** 
 815               		.loc 1 365 0
 816 0108 0895      		ret
 817               	.L53:
 382:./tmk_core/common/command.c ****             if (debug_enable) {
 818               		.loc 1 382 0
 819 010a 9091 0000 		lds r25,debug_config
 820 010e 892F      		mov r24,r25
 821 0110 8E7F      		andi r24,~(1<<0)
 822 0112 90FF      		sbrs r25,0
 823 0114 8160      		ori r24,1<<0
 824 0116 8093 0000 		sts debug_config,r24
 383:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 825               		.loc 1 383 0
 826 011a 80FF      		sbrs r24,0
 827 011c 00C0      		rjmp .L67
 384:./tmk_core/common/command.c ****             } else {
 828               		.loc 1 384 0
 829 011e 80E0      		ldi r24,lo8(__c.3263)
 830 0120 90E0      		ldi r25,hi8(__c.3263)
 831 0122 00C0      		rjmp .L91
 832               	.L67:
 386:./tmk_core/common/command.c ****                 debug_matrix   = false;
 833               		.loc 1 386 0
 834 0124 80E0      		ldi r24,lo8(__c.3265)
 835 0126 90E0      		ldi r25,hi8(__c.3265)
 836 0128 0E94 0000 		call xputs
 387:./tmk_core/common/command.c ****                 debug_keyboard = false;
 837               		.loc 1 387 0
 838 012c 8091 0000 		lds r24,debug_config
 389:./tmk_core/common/command.c ****             }
 839               		.loc 1 389 0
 840 0130 897F      		andi r24,lo8(-7)
 841 0132 877F      		andi r24,lo8(~(1<<3))
 842               	.L92:
 420:./tmk_core/common/command.c ****             } else {
 843               		.loc 1 420 0
 844 0134 8093 0000 		sts debug_config,r24
 845 0138 00C0      		rjmp .L90
 846               	.L68:
 400:./tmk_core/common/command.c ****             }
 847               		.loc 1 400 0
 848 013a 80E0      		ldi r24,lo8(__c.3270)
 849 013c 90E0      		ldi r25,hi8(__c.3270)
 850 013e 00C0      		rjmp .L91
 851               	.L51:
 406:./tmk_core/common/command.c ****             if (debug_keyboard) {
 852               		.loc 1 406 0
 853 0140 9091 0000 		lds r25,debug_config
 854 0144 892F      		mov r24,r25
 855 0146 8B7F      		andi r24,~(1<<2)
 856 0148 92FF      		sbrs r25,2
 857 014a 8460      		ori r24,1<<2
 858 014c 8093 0000 		sts debug_config,r24
 407:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 859               		.loc 1 407 0
 860 0150 82FF      		sbrs r24,2
 861 0152 00C0      		rjmp .L69
 408:./tmk_core/common/command.c ****                 debug_enable = true;
 862               		.loc 1 408 0
 863 0154 80E0      		ldi r24,lo8(__c.3273)
 864 0156 90E0      		ldi r25,hi8(__c.3273)
 865 0158 00C0      		rjmp .L93
 866               	.L69:
 411:./tmk_core/common/command.c ****             }
 867               		.loc 1 411 0
 868 015a 80E0      		ldi r24,lo8(__c.3275)
 869 015c 90E0      		ldi r25,hi8(__c.3275)
 870 015e 00C0      		rjmp .L91
 871               	.L70:
 422:./tmk_core/common/command.c ****             }
 872               		.loc 1 422 0
 873 0160 80E0      		ldi r24,lo8(__c.3280)
 874 0162 90E0      		ldi r25,hi8(__c.3280)
 875 0164 00C0      		rjmp .L91
 876               	.L59:
 877               	.LBB58:
 878               	.LBB55:
 179:./tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 879               		.loc 1 179 0
 880 0166 80E0      		ldi r24,lo8(__c.3225)
 881 0168 90E0      		ldi r25,hi8(__c.3225)
 882 016a 0E94 0000 		call xputs
 180:./tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 883               		.loc 1 180 0
 884 016e 80E0      		ldi r24,lo8(__c.3227)
 885 0170 90E0      		ldi r25,hi8(__c.3227)
 886 0172 0E94 0000 		call xputs
 181:./tmk_core/common/command.c ****           "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 887               		.loc 1 181 0
 888 0176 80E0      		ldi r24,lo8(__c.3229)
 889 0178 90E0      		ldi r25,hi8(__c.3229)
 890 017a 0E94 0000 		call xputs
 184:./tmk_core/common/command.c **** 
 891               		.loc 1 184 0
 892 017e 80E0      		ldi r24,lo8(__c.3231)
 893 0180 90E0      		ldi r25,hi8(__c.3231)
 894 0182 0E94 0000 		call xputs
 187:./tmk_core/common/command.c **** 
 895               		.loc 1 187 0
 896 0186 80E0      		ldi r24,lo8(__c.3233)
 897 0188 90E0      		ldi r25,hi8(__c.3233)
 898 018a 0E94 0000 		call xputs
 222:./tmk_core/common/command.c **** #if defined(__AVR__)
 899               		.loc 1 222 0
 900 018e 80E0      		ldi r24,lo8(__c.3235)
 901 0190 90E0      		ldi r25,hi8(__c.3235)
 902 0192 00C0      		rjmp .L91
 903               	.L56:
 904               	.LBE55:
 905               	.LBE58:
 906               	.LBB59:
 907               	.LBB60:
 235:./tmk_core/common/command.c **** 
 908               		.loc 1 235 0
 909 0194 80E0      		ldi r24,lo8(__c.3240)
 910 0196 90E0      		ldi r25,hi8(__c.3240)
 911 0198 0E94 0000 		call xputs
 237:./tmk_core/common/command.c **** #ifndef PROTOCOL_VUSB
 912               		.loc 1 237 0
 913 019c 0E94 0000 		call host_keyboard_leds
 914 01a0 1F92      		push __zero_reg__
 915               	.LCFI53:
 916               		.cfi_def_cfa_offset 3
 917 01a2 8F93      		push r24
 918               	.LCFI54:
 919               		.cfi_def_cfa_offset 4
 920 01a4 80E0      		ldi r24,lo8(__c.3242)
 921 01a6 90E0      		ldi r25,hi8(__c.3242)
 922 01a8 9F93      		push r25
 923               	.LCFI55:
 924               		.cfi_def_cfa_offset 5
 925 01aa 8F93      		push r24
 926               	.LCFI56:
 927               		.cfi_def_cfa_offset 6
 928 01ac 0E94 0000 		call __xprintf
 240:./tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 929               		.loc 1 240 0
 930 01b0 8091 0000 		lds r24,keyboard_protocol
 931 01b4 1F92      		push __zero_reg__
 932               	.LCFI57:
 933               		.cfi_def_cfa_offset 7
 934 01b6 8F93      		push r24
 935               	.LCFI58:
 936               		.cfi_def_cfa_offset 8
 937 01b8 80E0      		ldi r24,lo8(__c.3244)
 938 01ba 90E0      		ldi r25,hi8(__c.3244)
 939 01bc 9F93      		push r25
 940               	.LCFI59:
 941               		.cfi_def_cfa_offset 9
 942 01be 8F93      		push r24
 943               	.LCFI60:
 944               		.cfi_def_cfa_offset 10
 945 01c0 0E94 0000 		call __xprintf
 241:./tmk_core/common/command.c **** #endif
 946               		.loc 1 241 0
 947 01c4 8091 0000 		lds r24,keyboard_idle
 948 01c8 1F92      		push __zero_reg__
 949               	.LCFI61:
 950               		.cfi_def_cfa_offset 11
 951 01ca 8F93      		push r24
 952               	.LCFI62:
 953               		.cfi_def_cfa_offset 12
 954 01cc 80E0      		ldi r24,lo8(__c.3246)
 955 01ce 90E0      		ldi r25,hi8(__c.3246)
 956 01d0 9F93      		push r25
 957               	.LCFI63:
 958               		.cfi_def_cfa_offset 13
 959 01d2 8F93      		push r24
 960               	.LCFI64:
 961               		.cfi_def_cfa_offset 14
 962 01d4 0E94 0000 		call __xprintf
 246:./tmk_core/common/command.c **** 
 963               		.loc 1 246 0
 964 01d8 0E94 0000 		call timer_read32
 965 01dc 9F93      		push r25
 966               	.LCFI65:
 967               		.cfi_def_cfa_offset 15
 968 01de 8F93      		push r24
 969               	.LCFI66:
 970               		.cfi_def_cfa_offset 16
 971 01e0 7F93      		push r23
 972               	.LCFI67:
 973               		.cfi_def_cfa_offset 17
 974 01e2 6F93      		push r22
 975               	.LCFI68:
 976               		.cfi_def_cfa_offset 18
 977 01e4 80E0      		ldi r24,lo8(__c.3248)
 978 01e6 90E0      		ldi r25,hi8(__c.3248)
 979 01e8 9F93      		push r25
 980               	.LCFI69:
 981               		.cfi_def_cfa_offset 19
 982 01ea 8F93      		push r24
 983               	.LCFI70:
 984               		.cfi_def_cfa_offset 20
 985 01ec 0E94 0000 		call __xprintf
 986 01f0 8DB7      		in r24,__SP_L__
 987 01f2 9EB7      		in r25,__SP_H__
 988 01f4 4296      		adiw r24,18
 989 01f6 0FB6      		in __tmp_reg__,__SREG__
 990 01f8 F894      		cli
 991 01fa 9EBF      		out __SP_H__,r25
 992 01fc 0FBE      		out __SREG__,__tmp_reg__
 993 01fe 8DBF      		out __SP_L__,r24
 994               	.LCFI71:
 995               		.cfi_def_cfa_offset 2
 996 0200 00C0      		rjmp .L90
 997               	.L50:
 998               	.LBE60:
 999               	.LBE59:
 514:./tmk_core/common/command.c ****             break;
 1000               		.loc 1 514 0
 1001 0202 8D51      		subi r24,lo8(-(-29))
 1002 0204 00C0      		rjmp .L94
 1003               		.cfi_endproc
 1004               	.LFE23:
 1006               		.section	.text.command_extra,"ax",@progbits
 1007               		.weak	command_extra
 1009               	command_extra:
 1010               	.LFB18:
 106:./tmk_core/common/command.c ****     (void)code;
 1011               		.loc 1 106 0
 1012               		.cfi_startproc
 1013               	.LVL47:
 1014               	/* prologue: function */
 1015               	/* frame size = 0 */
 1016               	/* stack size = 0 */
 1017               	.L__stack_usage = 0
 109:./tmk_core/common/command.c **** 
 1018               		.loc 1 109 0
 1019 0000 80E0      		ldi r24,0
 1020               	.LVL48:
 1021               	/* epilogue start */
 1022 0002 0895      		ret
 1023               		.cfi_endproc
 1024               	.LFE18:
 1026               		.set	command_extra.localalias.0,command_extra
 1027               		.section	.text.command_console_extra,"ax",@progbits
 1028               		.weak	command_console_extra
 1030               	command_console_extra:
 1031               	.LFB34:
 1032               		.cfi_startproc
 1033               	/* prologue: function */
 1034               	/* frame size = 0 */
 1035               	/* stack size = 0 */
 1036               	.L__stack_usage = 0
 1037 0000 0C94 0000 		jmp command_extra.localalias.0
 1038               		.cfi_endproc
 1039               	.LFE34:
 1041               		.section	.text.numkey2num,"ax",@progbits
 1042               	.global	numkey2num
 1044               	numkey2num:
 1045               	.LFB31:
 778:./tmk_core/common/command.c ****     switch (code) {
 1046               		.loc 1 778 0
 1047               		.cfi_startproc
 1048               	.LVL49:
 1049               	/* prologue: function */
 1050               	/* frame size = 0 */
 1051               	/* stack size = 0 */
 1052               	.L__stack_usage = 0
 1053 0000 8E51      		subi r24,lo8(-(-30))
 1054               	.LVL50:
 1055 0002 8A30      		cpi r24,lo8(10)
 1056 0004 00F4      		brsh .L99
 1057 0006 E82F      		mov r30,r24
 1058 0008 F0E0      		ldi r31,0
 1059 000a E050      		subi r30,lo8(-(CSWTCH.72))
 1060 000c F040      		sbci r31,hi8(-(CSWTCH.72))
 1061 000e 8081      		ld r24,Z
 1062               	.LVL51:
 1063 0010 0895      		ret
 1064               	.L99:
 778:./tmk_core/common/command.c ****     switch (code) {
 1065               		.loc 1 778 0
 1066 0012 80E0      		ldi r24,0
 1067               	/* epilogue start */
 792:./tmk_core/common/command.c **** 
 1068               		.loc 1 792 0
 1069 0014 0895      		ret
 1070               		.cfi_endproc
 1071               	.LFE31:
 1073               		.section	.text.command_proc,"ax",@progbits
 1074               	.global	command_proc
 1076               	command_proc:
 1077               	.LFB17:
  77:./tmk_core/common/command.c ****     switch (command_state) {
 1078               		.loc 1 77 0
 1079               		.cfi_startproc
 1080 0000 CF93      		push r28
 1081               	.LCFI72:
 1082               		.cfi_def_cfa_offset 3
 1083               		.cfi_offset 28, -2
 1084               	/* prologue: function */
 1085               	/* frame size = 0 */
 1086               	/* stack size = 1 */
 1087               	.L__stack_usage = 1
 1088 0002 C82F      		mov r28,r24
  78:./tmk_core/common/command.c ****         case ONESHOT:
 1089               		.loc 1 78 0
 1090 0004 8091 0000 		lds r24,command_state
 1091 0008 8130      		cpi r24,lo8(1)
 1092 000a 01F0      		breq .L102
 1093 000c 00F0      		brlo .L103
 1094 000e 8230      		cpi r24,lo8(2)
 1095 0010 01F4      		brne .+2
 1096 0012 00C0      		rjmp .L104
  96:./tmk_core/common/command.c ****             return false;
 1097               		.loc 1 96 0
 1098 0014 1092 0000 		sts command_state,__zero_reg__
 1099               	.L131:
  81:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 1100               		.loc 1 81 0
 1101 0018 80E0      		ldi r24,0
 1102 001a 00C0      		rjmp .L100
 1103               	.L103:
  80:./tmk_core/common/command.c ****                 return false;
 1104               		.loc 1 80 0
 1105 001c E091 0000 		lds r30,keyboard_report
 1106 0020 F091 0000 		lds r31,keyboard_report+1
 1107 0024 8081      		ld r24,Z
 1108 0026 8232      		cpi r24,lo8(34)
 1109 0028 01F4      		brne .L131
 1110               	.L167:
  86:./tmk_core/common/command.c ****             else
 1111               		.loc 1 86 0
 1112 002a 8C2F      		mov r24,r28
 1113 002c 0E94 0000 		call command_extra
 1114 0030 8111      		cpse r24,__zero_reg__
 1115 0032 00C0      		rjmp .L133
  86:./tmk_core/common/command.c ****             else
 1116               		.loc 1 86 0 is_stmt 0 discriminator 2
 1117 0034 8C2F      		mov r24,r28
 1118 0036 0E94 0000 		call command_common
 1119               	.L109:
  88:./tmk_core/common/command.c ****             break;
 1120               		.loc 1 88 0 is_stmt 1 discriminator 6
 1121 003a 8170      		andi r24,lo8(1)
 1122               	.L100:
 1123               	/* epilogue start */
 100:./tmk_core/common/command.c **** 
 1124               		.loc 1 100 0
 1125 003c CF91      		pop r28
 1126 003e 0895      		ret
 1127               	.L102:
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1128               		.loc 1 85 0
 1129 0040 E091 0000 		lds r30,keyboard_report
 1130 0044 F091 0000 		lds r31,keyboard_report+1
 1131 0048 8081      		ld r24,Z
 1132 004a 8232      		cpi r24,lo8(34)
 1133 004c 01F0      		breq .L167
  88:./tmk_core/common/command.c ****             break;
 1134               		.loc 1 88 0
 1135 004e 8C2F      		mov r24,r28
 1136 0050 0E94 0000 		call command_console_extra
 1137 0054 8111      		cpse r24,__zero_reg__
 1138 0056 00C0      		rjmp .L134
 1139               	.LBB97:
 1140               	.LBB98:
 544:./tmk_core/common/command.c ****         case KC_H:
 1141               		.loc 1 544 0
 1142 0058 C431      		cpi r28,lo8(20)
 1143 005a 01F0      		breq .L111
 1144 005c 00F4      		brsh .L112
 1145 005e CB30      		cpi r28,lo8(11)
 1146 0060 01F0      		breq .L113
 1147 0062 C031      		cpi r28,lo8(16)
 1148 0064 01F0      		breq .L114
 1149               	.L110:
 561:./tmk_core/common/command.c ****             return false;
 1150               		.loc 1 561 0
 1151 0066 80E0      		ldi r24,lo8(__c.3310)
 1152 0068 90E0      		ldi r25,hi8(__c.3310)
 1153 006a 0E94 0000 		call xputs
 1154 006e 00C0      		rjmp .L160
 1155               	.L133:
 1156               	.LBE98:
 1157               	.LBE97:
  86:./tmk_core/common/command.c ****             else
 1158               		.loc 1 86 0
 1159 0070 81E0      		ldi r24,lo8(1)
 1160 0072 90E0      		ldi r25,0
 1161 0074 00C0      		rjmp .L109
 1162               	.L112:
 1163               	.LBB104:
 1164               	.LBB101:
 544:./tmk_core/common/command.c ****         case KC_H:
 1165               		.loc 1 544 0
 1166 0076 C932      		cpi r28,lo8(41)
 1167 0078 01F0      		breq .L111
 1168 007a C833      		cpi r28,lo8(56)
 1169 007c 01F4      		brne .L110
 1170               	.L113:
 1171               	.LBB99:
 1172               	.LBB100:
 534:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 1173               		.loc 1 534 0
 1174 007e 80E0      		ldi r24,lo8(__c.3296)
 1175 0080 90E0      		ldi r25,hi8(__c.3296)
 1176 0082 0E94 0000 		call xputs
 1177               	.LBE100:
 1178               	.LBE99:
 564:./tmk_core/common/command.c ****     return true;
 1179               		.loc 1 564 0
 1180 0086 80E0      		ldi r24,lo8(__c.3312)
 1181 0088 90E0      		ldi r25,hi8(__c.3312)
 1182 008a 0E94 0000 		call xputs
 1183               	.L134:
 1184               	.LBE101:
 1185               	.LBE104:
  88:./tmk_core/common/command.c ****             break;
 1186               		.loc 1 88 0
 1187 008e 81E0      		ldi r24,lo8(1)
 1188 0090 00C0      		rjmp .L109
 1189               	.L111:
 1190               	.LBB105:
 1191               	.LBB102:
 551:./tmk_core/common/command.c ****             return false;
 1192               		.loc 1 551 0
 1193 0092 1092 0000 		sts command_state,__zero_reg__
 1194               	.L160:
 1195               	.LBE102:
 1196               	.LBE105:
  88:./tmk_core/common/command.c ****             break;
 1197               		.loc 1 88 0
 1198 0096 80E0      		ldi r24,0
 1199 0098 00C0      		rjmp .L109
 1200               	.L114:
 1201               	.LBB106:
 1202               	.LBB103:
 555:./tmk_core/common/command.c ****             print("M> ");
 1203               		.loc 1 555 0
 1204 009a 0E94 0000 		call mousekey_console_help
 556:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 1205               		.loc 1 556 0
 1206 009e 80E0      		ldi r24,lo8(__c.3307)
 1207 00a0 90E0      		ldi r25,hi8(__c.3307)
 1208 00a2 0E94 0000 		call xputs
 557:./tmk_core/common/command.c ****             return true;
 1209               		.loc 1 557 0
 1210 00a6 82E0      		ldi r24,lo8(2)
 1211 00a8 8093 0000 		sts command_state,r24
 1212 00ac 00C0      		rjmp .L134
 1213               	.L104:
 1214               	.LBE103:
 1215               	.LBE106:
 1216               	.LBB107:
 1217               	.LBB108:
 713:./tmk_core/common/command.c ****         case KC_H:
 1218               		.loc 1 713 0
 1219 00ae C432      		cpi r28,lo8(36)
 1220 00b0 00F4      		brsh .L116
 1221 00b2 CE31      		cpi r28,lo8(30)
 1222 00b4 00F0      		brlo .+2
 1223 00b6 00C0      		rjmp .L117
 1224 00b8 CB30      		cpi r28,lo8(11)
 1225 00ba 01F0      		breq .L118
 1226 00bc 00F4      		brsh .L119
 1227 00be C730      		cpi r28,lo8(7)
 1228 00c0 01F4      		brne .+2
 1229 00c2 00C0      		rjmp .L120
 1230               	.L115:
 761:./tmk_core/common/command.c ****             return false;
 1231               		.loc 1 761 0
 1232 00c4 80E0      		ldi r24,lo8(__c.3434)
 1233 00c6 90E0      		ldi r25,hi8(__c.3434)
 1234               	.L164:
 767:./tmk_core/common/command.c ****     }
 1235               		.loc 1 767 0
 1236 00c8 0E94 0000 		call xputs
 1237 00cc 00C0      		rjmp .L163
 1238               	.L119:
 713:./tmk_core/common/command.c ****         case KC_H:
 1239               		.loc 1 713 0
 1240 00ce C331      		cpi r28,lo8(19)
 1241 00d0 01F0      		breq .L121
 1242 00d2 C431      		cpi r28,lo8(20)
 1243 00d4 01F4      		brne .L115
 1244               	.L122:
 720:./tmk_core/common/command.c ****                 mousekey_param = 0;
 1245               		.loc 1 720 0
 1246 00d6 8091 0000 		lds r24,mousekey_param
 1247 00da 8823      		tst r24
 1248 00dc 01F0      		breq .L129
 721:./tmk_core/common/command.c ****             } else {
 1249               		.loc 1 721 0
 1250 00de 1092 0000 		sts mousekey_param,__zero_reg__
 1251 00e2 00C0      		rjmp .L128
 1252               	.L116:
 713:./tmk_core/common/command.c ****         case KC_H:
 1253               		.loc 1 713 0
 1254 00e4 CB34      		cpi r28,lo8(75)
 1255 00e6 01F4      		brne .+2
 1256 00e8 00C0      		rjmp .L123
 1257 00ea 00F4      		brsh .L124
 1258 00ec C932      		cpi r28,lo8(41)
 1259 00ee 01F0      		breq .L122
 1260 00f0 C833      		cpi r28,lo8(56)
 1261 00f2 01F4      		brne .L115
 1262               	.L118:
 716:./tmk_core/common/command.c ****             break;
 1263               		.loc 1 716 0
 1264 00f4 0E94 0000 		call mousekey_console_help
 1265               	.L128:
 764:./tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 1266               		.loc 1 764 0
 1267 00f8 8091 0000 		lds r24,mousekey_param
 1268 00fc 8823      		tst r24
 1269 00fe 01F4      		brne .+2
 1270 0100 00C0      		rjmp .L130
 765:./tmk_core/common/command.c ****     } else {
 1271               		.loc 1 765 0
 1272 0102 1F92      		push __zero_reg__
 1273               	.LCFI73:
 1274               		.cfi_def_cfa_offset 4
 1275 0104 8F93      		push r24
 1276               	.LCFI74:
 1277               		.cfi_def_cfa_offset 5
 1278 0106 80E0      		ldi r24,lo8(__c.3436)
 1279 0108 90E0      		ldi r25,hi8(__c.3436)
 1280 010a 9F93      		push r25
 1281               	.LCFI75:
 1282               		.cfi_def_cfa_offset 6
 1283 010c 8F93      		push r24
 1284               	.LCFI76:
 1285               		.cfi_def_cfa_offset 7
 1286 010e 0E94 0000 		call __xprintf
 1287 0112 0F90      		pop __tmp_reg__
 1288 0114 0F90      		pop __tmp_reg__
 1289 0116 0F90      		pop __tmp_reg__
 1290 0118 0F90      		pop __tmp_reg__
 1291               	.LCFI77:
 1292               		.cfi_def_cfa_offset 3
 1293               	.L163:
 1294               	.LBE108:
 1295               	.LBE107:
  99:./tmk_core/common/command.c **** }
 1296               		.loc 1 99 0
 1297 011a 81E0      		ldi r24,lo8(1)
 1298 011c 00C0      		rjmp .L100
 1299               	.L124:
 1300               	.LBB112:
 1301               	.LBB111:
 713:./tmk_core/common/command.c ****         case KC_H:
 1302               		.loc 1 713 0
 1303 011e C135      		cpi r28,lo8(81)
 1304 0120 01F4      		brne .+2
 1305 0122 00C0      		rjmp .L125
 1306 0124 C235      		cpi r28,lo8(82)
 1307 0126 01F4      		brne .+2
 1308 0128 00C0      		rjmp .L126
 1309 012a CE34      		cpi r28,lo8(78)
 1310 012c 01F4      		brne .L115
 749:./tmk_core/common/command.c ****             break;
 1311               		.loc 1 749 0
 1312 012e 6AE0      		ldi r22,lo8(10)
 1313 0130 00C0      		rjmp .L162
 1314               	.L129:
 723:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 1315               		.loc 1 723 0
 1316 0132 80E0      		ldi r24,lo8(__c.3417)
 1317 0134 90E0      		ldi r25,hi8(__c.3417)
 1318 0136 0E94 0000 		call xputs
 724:./tmk_core/common/command.c ****                 return false;
 1319               		.loc 1 724 0
 1320 013a 81E0      		ldi r24,lo8(1)
 1321 013c 8093 0000 		sts command_state,r24
 1322 0140 00C0      		rjmp .L100
 1323               	.L121:
 1324               	.LBB109:
 1325               	.LBB110:
 579:./tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 1326               		.loc 1 579 0
 1327 0142 80E0      		ldi r24,lo8(__c.3318)
 1328 0144 90E0      		ldi r25,hi8(__c.3318)
 1329 0146 0E94 0000 		call xputs
 580:./tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 1330               		.loc 1 580 0
 1331 014a 80E0      		ldi r24,lo8(__c.3320)
 1332 014c 90E0      		ldi r25,hi8(__c.3320)
 1333 014e 0E94 0000 		call xputs
 1334 0152 8091 0000 		lds r24,mk_delay
 1335 0156 1F92      		push __zero_reg__
 1336               	.LCFI78:
 1337               		.cfi_def_cfa_offset 4
 1338 0158 8F93      		push r24
 1339               	.LCFI79:
 1340               		.cfi_def_cfa_offset 5
 1341 015a 80E0      		ldi r24,lo8(__c.3322)
 1342 015c 90E0      		ldi r25,hi8(__c.3322)
 1343 015e 9F93      		push r25
 1344               	.LCFI80:
 1345               		.cfi_def_cfa_offset 6
 1346 0160 8F93      		push r24
 1347               	.LCFI81:
 1348               		.cfi_def_cfa_offset 7
 1349 0162 0E94 0000 		call __xprintf
 1350 0166 80E0      		ldi r24,lo8(__c.3324)
 1351 0168 90E0      		ldi r25,hi8(__c.3324)
 1352 016a 0E94 0000 		call xputs
 581:./tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 1353               		.loc 1 581 0
 1354 016e 80E0      		ldi r24,lo8(__c.3326)
 1355 0170 90E0      		ldi r25,hi8(__c.3326)
 1356 0172 0E94 0000 		call xputs
 1357 0176 8091 0000 		lds r24,mk_interval
 1358 017a 1F92      		push __zero_reg__
 1359               	.LCFI82:
 1360               		.cfi_def_cfa_offset 8
 1361 017c 8F93      		push r24
 1362               	.LCFI83:
 1363               		.cfi_def_cfa_offset 9
 1364 017e 80E0      		ldi r24,lo8(__c.3328)
 1365 0180 90E0      		ldi r25,hi8(__c.3328)
 1366 0182 9F93      		push r25
 1367               	.LCFI84:
 1368               		.cfi_def_cfa_offset 10
 1369 0184 8F93      		push r24
 1370               	.LCFI85:
 1371               		.cfi_def_cfa_offset 11
 1372 0186 0E94 0000 		call __xprintf
 1373 018a 80E0      		ldi r24,lo8(__c.3330)
 1374 018c 90E0      		ldi r25,hi8(__c.3330)
 1375 018e 0E94 0000 		call xputs
 582:./tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 1376               		.loc 1 582 0
 1377 0192 80E0      		ldi r24,lo8(__c.3332)
 1378 0194 90E0      		ldi r25,hi8(__c.3332)
 1379 0196 0E94 0000 		call xputs
 1380 019a 8091 0000 		lds r24,mk_max_speed
 1381 019e 1F92      		push __zero_reg__
 1382               	.LCFI86:
 1383               		.cfi_def_cfa_offset 12
 1384 01a0 8F93      		push r24
 1385               	.LCFI87:
 1386               		.cfi_def_cfa_offset 13
 1387 01a2 80E0      		ldi r24,lo8(__c.3334)
 1388 01a4 90E0      		ldi r25,hi8(__c.3334)
 1389 01a6 9F93      		push r25
 1390               	.LCFI88:
 1391               		.cfi_def_cfa_offset 14
 1392 01a8 8F93      		push r24
 1393               	.LCFI89:
 1394               		.cfi_def_cfa_offset 15
 1395 01aa 0E94 0000 		call __xprintf
 1396 01ae 80E0      		ldi r24,lo8(__c.3336)
 1397 01b0 90E0      		ldi r25,hi8(__c.3336)
 1398 01b2 0E94 0000 		call xputs
 583:./tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 1399               		.loc 1 583 0
 1400 01b6 80E0      		ldi r24,lo8(__c.3338)
 1401 01b8 90E0      		ldi r25,hi8(__c.3338)
 1402 01ba 0E94 0000 		call xputs
 1403 01be 8091 0000 		lds r24,mk_time_to_max
 1404 01c2 1F92      		push __zero_reg__
 1405               	.LCFI90:
 1406               		.cfi_def_cfa_offset 16
 1407 01c4 8F93      		push r24
 1408               	.LCFI91:
 1409               		.cfi_def_cfa_offset 17
 1410 01c6 80E0      		ldi r24,lo8(__c.3340)
 1411 01c8 90E0      		ldi r25,hi8(__c.3340)
 1412 01ca 9F93      		push r25
 1413               	.LCFI92:
 1414               		.cfi_def_cfa_offset 18
 1415 01cc 8F93      		push r24
 1416               	.LCFI93:
 1417               		.cfi_def_cfa_offset 19
 1418 01ce 0E94 0000 		call __xprintf
 1419 01d2 80E0      		ldi r24,lo8(__c.3342)
 1420 01d4 90E0      		ldi r25,hi8(__c.3342)
 1421 01d6 0E94 0000 		call xputs
 584:./tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 1422               		.loc 1 584 0
 1423 01da 80E0      		ldi r24,lo8(__c.3344)
 1424 01dc 90E0      		ldi r25,hi8(__c.3344)
 1425 01de 0E94 0000 		call xputs
 1426 01e2 8091 0000 		lds r24,mk_wheel_max_speed
 1427 01e6 1F92      		push __zero_reg__
 1428               	.LCFI94:
 1429               		.cfi_def_cfa_offset 20
 1430 01e8 8F93      		push r24
 1431               	.LCFI95:
 1432               		.cfi_def_cfa_offset 21
 1433 01ea 80E0      		ldi r24,lo8(__c.3346)
 1434 01ec 90E0      		ldi r25,hi8(__c.3346)
 1435 01ee 9F93      		push r25
 1436               	.LCFI96:
 1437               		.cfi_def_cfa_offset 22
 1438 01f0 8F93      		push r24
 1439               	.LCFI97:
 1440               		.cfi_def_cfa_offset 23
 1441 01f2 0E94 0000 		call __xprintf
 1442 01f6 80E0      		ldi r24,lo8(__c.3348)
 1443 01f8 90E0      		ldi r25,hi8(__c.3348)
 1444 01fa 0E94 0000 		call xputs
 585:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 1445               		.loc 1 585 0
 1446 01fe 80E0      		ldi r24,lo8(__c.3350)
 1447 0200 90E0      		ldi r25,hi8(__c.3350)
 1448 0202 0E94 0000 		call xputs
 1449 0206 8091 0000 		lds r24,mk_wheel_time_to_max
 1450 020a 1F92      		push __zero_reg__
 1451               	.LCFI98:
 1452               		.cfi_def_cfa_offset 24
 1453 020c 8F93      		push r24
 1454               	.LCFI99:
 1455               		.cfi_def_cfa_offset 25
 1456 020e 80E0      		ldi r24,lo8(__c.3352)
 1457 0210 90E0      		ldi r25,hi8(__c.3352)
 1458 0212 9F93      		push r25
 1459               	.LCFI100:
 1460               		.cfi_def_cfa_offset 26
 1461 0214 8F93      		push r24
 1462               	.LCFI101:
 1463               		.cfi_def_cfa_offset 27
 1464 0216 0E94 0000 		call __xprintf
 1465 021a 80E0      		ldi r24,lo8(__c.3354)
 1466 021c 90E0      		ldi r25,hi8(__c.3354)
 1467 021e 0E94 0000 		call xputs
 1468 0222 8DB7      		in r24,__SP_L__
 1469 0224 9EB7      		in r25,__SP_H__
 1470 0226 4896      		adiw r24,24
 1471 0228 0FB6      		in __tmp_reg__,__SREG__
 1472 022a F894      		cli
 1473 022c 9EBF      		out __SP_H__,r25
 1474 022e 0FBE      		out __SREG__,__tmp_reg__
 1475 0230 8DBF      		out __SP_L__,r24
 1476               	.LCFI102:
 1477               		.cfi_def_cfa_offset 3
 1478 0232 00C0      		rjmp .L128
 1479               	.L117:
 1480               	.LBE110:
 1481               	.LBE109:
 737:./tmk_core/common/command.c ****             break;
 1482               		.loc 1 737 0
 1483 0234 8C2F      		mov r24,r28
 1484 0236 0E94 0000 		call numkey2num
 1485 023a 8093 0000 		sts mousekey_param,r24
 1486 023e 00C0      		rjmp .L128
 1487               	.L126:
 740:./tmk_core/common/command.c ****             break;
 1488               		.loc 1 740 0
 1489 0240 61E0      		ldi r22,lo8(1)
 1490               	.L161:
 746:./tmk_core/common/command.c ****             break;
 1491               		.loc 1 746 0
 1492 0242 8091 0000 		lds r24,mousekey_param
 1493 0246 0E94 0000 		call mousekey_param_inc
 1494 024a 00C0      		rjmp .L128
 1495               	.L125:
 743:./tmk_core/common/command.c ****             break;
 1496               		.loc 1 743 0
 1497 024c 61E0      		ldi r22,lo8(1)
 1498               	.L162:
 749:./tmk_core/common/command.c ****             break;
 1499               		.loc 1 749 0
 1500 024e 8091 0000 		lds r24,mousekey_param
 1501 0252 0E94 0000 		call mousekey_param_dec
 1502 0256 00C0      		rjmp .L128
 1503               	.L123:
 746:./tmk_core/common/command.c ****             break;
 1504               		.loc 1 746 0
 1505 0258 6AE0      		ldi r22,lo8(10)
 1506 025a 00C0      		rjmp .L161
 1507               	.L120:
 752:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 1508               		.loc 1 752 0
 1509 025c 8EE1      		ldi r24,lo8(30)
 1510 025e 8093 0000 		sts mk_delay,r24
 753:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 1511               		.loc 1 753 0
 1512 0262 82E3      		ldi r24,lo8(50)
 1513 0264 8093 0000 		sts mk_interval,r24
 754:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 1514               		.loc 1 754 0
 1515 0268 8AE0      		ldi r24,lo8(10)
 1516 026a 8093 0000 		sts mk_max_speed,r24
 755:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 1517               		.loc 1 755 0
 1518 026e 84E1      		ldi r24,lo8(20)
 1519 0270 8093 0000 		sts mk_time_to_max,r24
 756:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1520               		.loc 1 756 0
 1521 0274 88E0      		ldi r24,lo8(8)
 1522 0276 8093 0000 		sts mk_wheel_max_speed,r24
 757:./tmk_core/common/command.c ****             print("set default\n");
 1523               		.loc 1 757 0
 1524 027a 88E2      		ldi r24,lo8(40)
 1525 027c 8093 0000 		sts mk_wheel_time_to_max,r24
 758:./tmk_core/common/command.c ****             break;
 1526               		.loc 1 758 0
 1527 0280 80E0      		ldi r24,lo8(__c.3431)
 1528 0282 90E0      		ldi r25,hi8(__c.3431)
 1529 0284 0E94 0000 		call xputs
 1530 0288 00C0      		rjmp .L128
 1531               	.L130:
 767:./tmk_core/common/command.c ****     }
 1532               		.loc 1 767 0
 1533 028a 80E0      		ldi r24,lo8(__c.3438)
 1534 028c 90E0      		ldi r25,hi8(__c.3438)
 1535 028e 00C0      		rjmp .L164
 1536               	.LBE111:
 1537               	.LBE112:
 1538               		.cfi_endproc
 1539               	.LFE17:
 1541               		.section	.rodata.CSWTCH.72,"a",@progbits
 1544               	CSWTCH.72:
 1545 0000 01        		.byte	1
 1546 0001 02        		.byte	2
 1547 0002 03        		.byte	3
 1548 0003 04        		.byte	4
 1549 0004 05        		.byte	5
 1550 0005 06        		.byte	6
 1551 0006 07        		.byte	7
 1552 0007 08        		.byte	8
 1553 0008 09        		.byte	9
 1554 0009 00        		.byte	0
 1555               		.section	.progmem.data.__c.3400,"a",@progbits
 1558               	__c.3400:
 1559 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 1559      6865 656C 
 1559      5F74 696D 
 1559      655F 746F 
 1559      5F6D 6178 
 1560               		.section	.progmem.data.__c.3397,"a",@progbits
 1563               	__c.3397:
 1564 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 1564      6865 656C 
 1564      5F6D 6178 
 1564      5F73 7065 
 1564      6564 203D 
 1565               		.section	.progmem.data.__c.3394,"a",@progbits
 1568               	__c.3394:
 1569 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 1569      696D 655F 
 1569      746F 5F6D 
 1569      6178 203D 
 1569      2025 640A 
 1570               		.section	.progmem.data.__c.3391,"a",@progbits
 1573               	__c.3391:
 1574 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 1574      6178 5F73 
 1574      7065 6564 
 1574      203D 2025 
 1574      640A 00
 1575               		.section	.progmem.data.__c.3388,"a",@progbits
 1578               	__c.3388:
 1579 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 1579      6E74 6572 
 1579      7661 6C20 
 1579      3D20 2564 
 1579      0A00 
 1580               		.section	.progmem.data.__c.3384,"a",@progbits
 1583               	__c.3384:
 1584 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 1584      656C 6179 
 1584      203D 2025 
 1584      640A 00
 1585               		.section	.progmem.data.__c.3377,"a",@progbits
 1588               	__c.3377:
 1589 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 1589      6865 656C 
 1589      5F74 696D 
 1589      655F 746F 
 1589      5F6D 6178 
 1590               		.section	.progmem.data.__c.3374,"a",@progbits
 1593               	__c.3374:
 1594 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 1594      6865 656C 
 1594      5F6D 6178 
 1594      5F73 7065 
 1594      6564 203D 
 1595               		.section	.progmem.data.__c.3371,"a",@progbits
 1598               	__c.3371:
 1599 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 1599      696D 655F 
 1599      746F 5F6D 
 1599      6178 203D 
 1599      2025 640A 
 1600               		.section	.progmem.data.__c.3368,"a",@progbits
 1603               	__c.3368:
 1604 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 1604      6178 5F73 
 1604      7065 6564 
 1604      203D 2025 
 1604      640A 00
 1605               		.section	.progmem.data.__c.3365,"a",@progbits
 1608               	__c.3365:
 1609 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 1609      6E74 6572 
 1609      7661 6C20 
 1609      3D20 2564 
 1609      0A00 
 1610               		.section	.progmem.data.__c.3361,"a",@progbits
 1613               	__c.3361:
 1614 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 1614      656C 6179 
 1614      203D 2025 
 1614      640A 00
 1615               		.section	.progmem.data.__c.3354,"a",@progbits
 1618               	__c.3354:
 1619 0000 0A00      		.string	"\n"
 1620               		.section	.progmem.data.__c.3352,"a",@progbits
 1623               	__c.3352:
 1624 0000 2575 00   		.string	"%u"
 1625               		.section	.progmem.data.__c.3350,"a",@progbits
 1628               	__c.3350:
 1629 0000 363A 2077 		.string	"6: wheel_time_to_max: "
 1629      6865 656C 
 1629      5F74 696D 
 1629      655F 746F 
 1629      5F6D 6178 
 1630               		.section	.progmem.data.__c.3348,"a",@progbits
 1633               	__c.3348:
 1634 0000 0A00      		.string	"\n"
 1635               		.section	.progmem.data.__c.3346,"a",@progbits
 1638               	__c.3346:
 1639 0000 2575 00   		.string	"%u"
 1640               		.section	.progmem.data.__c.3344,"a",@progbits
 1643               	__c.3344:
 1644 0000 353A 2077 		.string	"5: wheel_max_speed: "
 1644      6865 656C 
 1644      5F6D 6178 
 1644      5F73 7065 
 1644      6564 3A20 
 1645               		.section	.progmem.data.__c.3342,"a",@progbits
 1648               	__c.3342:
 1649 0000 0A00      		.string	"\n"
 1650               		.section	.progmem.data.__c.3340,"a",@progbits
 1653               	__c.3340:
 1654 0000 2575 00   		.string	"%u"
 1655               		.section	.progmem.data.__c.3338,"a",@progbits
 1658               	__c.3338:
 1659 0000 343A 2074 		.string	"4: time_to_max: "
 1659      696D 655F 
 1659      746F 5F6D 
 1659      6178 3A20 
 1659      00
 1660               		.section	.progmem.data.__c.3336,"a",@progbits
 1663               	__c.3336:
 1664 0000 0A00      		.string	"\n"
 1665               		.section	.progmem.data.__c.3334,"a",@progbits
 1668               	__c.3334:
 1669 0000 2575 00   		.string	"%u"
 1670               		.section	.progmem.data.__c.3332,"a",@progbits
 1673               	__c.3332:
 1674 0000 333A 206D 		.string	"3: max_speed: "
 1674      6178 5F73 
 1674      7065 6564 
 1674      3A20 00
 1675               		.section	.progmem.data.__c.3330,"a",@progbits
 1678               	__c.3330:
 1679 0000 0A00      		.string	"\n"
 1680               		.section	.progmem.data.__c.3328,"a",@progbits
 1683               	__c.3328:
 1684 0000 2575 00   		.string	"%u"
 1685               		.section	.progmem.data.__c.3326,"a",@progbits
 1688               	__c.3326:
 1689 0000 323A 2069 		.string	"2: interval(ms): "
 1689      6E74 6572 
 1689      7661 6C28 
 1689      6D73 293A 
 1689      2000 
 1690               		.section	.progmem.data.__c.3324,"a",@progbits
 1693               	__c.3324:
 1694 0000 0A00      		.string	"\n"
 1695               		.section	.progmem.data.__c.3322,"a",@progbits
 1698               	__c.3322:
 1699 0000 2575 00   		.string	"%u"
 1700               		.section	.progmem.data.__c.3320,"a",@progbits
 1703               	__c.3320:
 1704 0000 313A 2064 		.string	"1: delay(*10ms): "
 1704      656C 6179 
 1704      282A 3130 
 1704      6D73 293A 
 1704      2000 
 1705               		.section	.progmem.data.__c.3318,"a",@progbits
 1708               	__c.3318:
 1709 0000 0A09 2D20 		.string	"\n\t- Values -\n"
 1709      5661 6C75 
 1709      6573 202D 
 1709      0A00 
 1710               		.section	.progmem.data.__c.3438,"a",@progbits
 1713               	__c.3438:
 1714 0000 4D3E 00   		.string	"M>"
 1715               		.section	.progmem.data.__c.3436,"a",@progbits
 1718               	__c.3436:
 1719 0000 4D25 643E 		.string	"M%d> "
 1719      2000 
 1720               		.section	.progmem.data.__c.3434,"a",@progbits
 1723               	__c.3434:
 1724 0000 3F00      		.string	"?"
 1725               		.section	.progmem.data.__c.3431,"a",@progbits
 1728               	__c.3431:
 1729 0000 7365 7420 		.string	"set default\n"
 1729      6465 6661 
 1729      756C 740A 
 1729      00
 1730               		.section	.progmem.data.__c.3417,"a",@progbits
 1733               	__c.3417:
 1734 0000 433E 2000 		.string	"C> "
 1735               		.section	.progmem.data.__c.3407,"a",@progbits
 1738               	__c.3407:
 1739 0000 7768 6572 		.string	"where delta: cursor=%d, wheel=%d\nSee http://en.wikipedia.org/wiki/Mouse_keys\n"
 1739      6520 6465 
 1739      6C74 613A 
 1739      2063 7572 
 1739      736F 723D 
 1740               		.section	.progmem.data.__c.3405,"a",@progbits
 1743               	__c.3405:
 1744 0000 0A09 2D20 		.string	"\n\t- Mousekey -\nESC/q:\tquit\n1:\tdelay(*10ms)\n2:\tinterval(ms)\n3:\tmax_speed\n4:\tti
 1744      4D6F 7573 
 1744      656B 6579 
 1744      202D 0A45 
 1744      5343 2F71 
 1745               		.section	.progmem.data.__c.3310,"a",@progbits
 1748               	__c.3310:
 1749 0000 3F00      		.string	"?"
 1750               		.section	.progmem.data.__c.3307,"a",@progbits
 1753               	__c.3307:
 1754 0000 4D3E 2000 		.string	"M> "
 1755               		.section	.progmem.data.__c.3312,"a",@progbits
 1758               	__c.3312:
 1759 0000 433E 2000 		.string	"C> "
 1760               		.section	.progmem.data.__c.3456,"a",@progbits
 1763               	__c.3456:
 1764 0000 4C25 640A 		.string	"L%d\n"
 1764      00
 1765               		.section	.progmem.data.__c.3248,"a",@progbits
 1768               	__c.3248:
 1769 0000 7469 6D65 		.string	"timer_read32(): %04lX\n"
 1769      725F 7265 
 1769      6164 3332 
 1769      2829 3A20 
 1769      2530 346C 
 1770               		.section	.progmem.data.__c.3246,"a",@progbits
 1773               	__c.3246:
 1774 0000 6B65 7962 		.string	"keyboard_idle: %X\n"
 1774      6F61 7264 
 1774      5F69 646C 
 1774      653A 2025 
 1774      580A 00
 1775               		.section	.progmem.data.__c.3244,"a",@progbits
 1778               	__c.3244:
 1779 0000 6B65 7962 		.string	"keyboard_protocol: %X\n"
 1779      6F61 7264 
 1779      5F70 726F 
 1779      746F 636F 
 1779      6C3A 2025 
 1780               		.section	.progmem.data.__c.3242,"a",@progbits
 1783               	__c.3242:
 1784 0000 686F 7374 		.string	"host_keyboard_leds(): %X\n"
 1784      5F6B 6579 
 1784      626F 6172 
 1784      645F 6C65 
 1784      6473 2829 
 1785               		.section	.progmem.data.__c.3240,"a",@progbits
 1788               	__c.3240:
 1789 0000 0A09 2D20 		.string	"\n\t- Status -\n"
 1789      5374 6174 
 1789      7573 202D 
 1789      0A00 
 1790               		.section	.progmem.data.__c.3235,"a",@progbits
 1793               	__c.3235:
 1794 0000 4743 433A 		.string	"GCC: 7.3.0 AVR-LIBC: 2.0.0 AVR_ARCH: avr5\n"
 1794      2037 2E33 
 1794      2E30 2041 
 1794      5652 2D4C 
 1794      4942 433A 
 1795               		.section	.progmem.data.__c.3233,"a",@progbits
 1798               	__c.3233:
 1799 0000 4F50 5449 		.string	"OPTIONS: LUFA MOUSEKEY EXTRAKEY CONSOLE COMMAND 4096\n"
 1799      4F4E 533A 
 1799      204C 5546 
 1799      4120 4D4F 
 1799      5553 454B 
 1800               		.section	.progmem.data.__c.3231,"a",@progbits
 1803               	__c.3231:
 1804 0000 4255 494C 		.string	"BUILD: \"3c87fd-dirty\" (03:27:57 Jun  2 2018)\n"
 1804      443A 2022 
 1804      3363 3837 
 1804      6664 2D64 
 1804      6972 7479 
 1805               		.section	.progmem.data.__c.3229,"a",@progbits
 1808               	__c.3229:
 1809 0000 5649 443A 		.string	"VID: 0xFEED(You) PID: 0x0000(ez_keyboard) VER: 0x0001\n"
 1809      2030 7846 
 1809      4545 4428 
 1809      596F 7529 
 1809      2050 4944 
 1810               		.section	.progmem.data.__c.3227,"a",@progbits
 1813               	__c.3227:
 1814 0000 4445 5343 		.string	"DESC: A custom keyboard\n"
 1814      3A20 4120 
 1814      6375 7374 
 1814      6F6D 206B 
 1814      6579 626F 
 1815               		.section	.progmem.data.__c.3225,"a",@progbits
 1818               	__c.3225:
 1819 0000 0A09 2D20 		.string	"\n\t- Version -\n"
 1819      5665 7273 
 1819      696F 6E20 
 1819      2D0A 00
 1820               		.section	.progmem.data.__c.3296,"a",@progbits
 1823               	__c.3296:
 1824 0000 0A09 2D20 		.string	"\n\t- Console -\nESC/q:\tquit\nm:\tmousekey\n"
 1824      436F 6E73 
 1824      6F6C 6520 
 1824      2D0A 4553 
 1824      432F 713A 
 1825               		.section	.progmem.data.__c.3220,"a",@progbits
 1828               	__c.3220:
 1829 0000 0A09 2D20 		.ascii	"\n\t- Magic -\nD:\tDebug Message Toggle\nX:\tMatrix Debug Mo"
 1829      4D61 6769 
 1829      6320 2D0A 
 1829      443A 0944 
 1829      6562 7567 
 1830 0036 6465 2054 		.ascii	"de Toggle - Show keypresses in matrix grid\nK:\tKeyboard Deb"
 1830      6F67 676C 
 1830      6520 2D20 
 1830      5368 6F77 
 1830      206B 6579 
 1831 0070 7567 2054 		.ascii	"ug Toggle - Show keypress r"
 1831      6F67 676C 
 1831      6520 2D20 
 1831      5368 6F77 
 1831      206B 6579 
 1832 008b 6570 6F72 		.string	"eport\nM:\tDebug Mouse Toggle\nV:\tVersion\nS:\tStatus\nC:\tActivate Console Mode\nF1-F10
 1832      740A 4D3A 
 1832      0944 6562 
 1832      7567 204D 
 1832      6F75 7365 
 1833               		.section	.progmem.data.__c.3291,"a",@progbits
 1836               	__c.3291:
 1837 0000 3F00      		.string	"?"
 1838               		.section	.progmem.data.__c.3280,"a",@progbits
 1841               	__c.3280:
 1842 0000 0A6D 6F75 		.string	"\nmouse: off\n"
 1842      7365 3A20 
 1842      6F66 660A 
 1842      00
 1843               		.section	.progmem.data.__c.3278,"a",@progbits
 1846               	__c.3278:
 1847 0000 0A6D 6F75 		.string	"\nmouse: on\n"
 1847      7365 3A20 
 1847      6F6E 0A00 
 1848               		.section	.progmem.data.__c.3275,"a",@progbits
 1851               	__c.3275:
 1852 0000 0A6B 6579 		.string	"\nkeyboard: off\n"
 1852      626F 6172 
 1852      643A 206F 
 1852      6666 0A00 
 1853               		.section	.progmem.data.__c.3273,"a",@progbits
 1856               	__c.3273:
 1857 0000 0A6B 6579 		.string	"\nkeyboard: on\n"
 1857      626F 6172 
 1857      643A 206F 
 1857      6E0A 00
 1858               		.section	.progmem.data.__c.3270,"a",@progbits
 1861               	__c.3270:
 1862 0000 0A6D 6174 		.string	"\nmatrix: off\n"
 1862      7269 783A 
 1862      206F 6666 
 1862      0A00 
 1863               		.section	.progmem.data.__c.3268,"a",@progbits
 1866               	__c.3268:
 1867 0000 0A6D 6174 		.string	"\nmatrix: on\n"
 1867      7269 783A 
 1867      206F 6E0A 
 1867      00
 1868               		.section	.progmem.data.__c.3265,"a",@progbits
 1871               	__c.3265:
 1872 0000 0A64 6562 		.string	"\ndebug: off\n"
 1872      7567 3A20 
 1872      6F66 660A 
 1872      00
 1873               		.section	.progmem.data.__c.3263,"a",@progbits
 1876               	__c.3263:
 1877 0000 0A64 6562 		.string	"\ndebug: on\n"
 1877      7567 3A20 
 1877      6F6E 0A00 
 1878               		.section	.progmem.data.__c.3260,"a",@progbits
 1881               	__c.3260:
 1882 0000 0A0A 4A75 		.string	"\n\nJumping to bootloader... "
 1882      6D70 696E 
 1882      6720 746F 
 1882      2062 6F6F 
 1882      746C 6F61 
 1883               		.section	.progmem.data.__c.3257,"a",@progbits
 1886               	__c.3257:
 1887 0000 433E 2000 		.string	"C> "
 1888               		.section	.bss.mousekey_param,"aw",@nobits
 1891               	mousekey_param:
 1892 0000 00        		.zero	1
 1893               	.global	command_state
 1894               		.section	.bss.command_state,"aw",@nobits
 1897               	command_state:
 1898 0000 00        		.zero	1
 1899               		.text
 1900               	.Letext0:
 1901               		.file 3 "/usr/avr/include/stdint.h"
 1902               		.file 4 "./tmk_core/common/report.h"
 1903               		.file 5 "./tmk_core/common/host.h"
 1904               		.file 6 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 1905               		.file 7 "./tmk_core/common/avr/xprintf.h"
 1906               		.file 8 "./tmk_core/common/debug.h"
 1907               		.file 9 "./quantum/keycode_config.h"
 1908               		.file 10 "./quantum/keymap.h"
 1909               		.file 11 "./tmk_core/common/timer.h"
 1910               		.file 12 "./tmk_core/common/action_layer.h"
 1911               		.file 13 "./tmk_core/common/action_util.h"
 1912               		.file 14 "./tmk_core/common/command.h"
 1913               		.file 15 "/usr/avr/include/stdlib.h"
 1914               		.file 16 "./quantum/quantum.h"
 1915               		.file 17 "./tmk_core/common/mousekey.h"
 1916               		.file 18 "./tmk_core/common/action.h"
 1917               		.file 19 "./tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
 /var/tmp/ccgOjoTE.s:2      *ABS*:000000000000003e __SP_H__
 /var/tmp/ccgOjoTE.s:3      *ABS*:000000000000003d __SP_L__
 /var/tmp/ccgOjoTE.s:4      *ABS*:000000000000003f __SREG__
 /var/tmp/ccgOjoTE.s:5      *ABS*:0000000000000000 __tmp_reg__
 /var/tmp/ccgOjoTE.s:6      *ABS*:0000000000000001 __zero_reg__
 /var/tmp/ccgOjoTE.s:12     .text.mousekey_console_help:0000000000000000 mousekey_console_help
 /var/tmp/ccgOjoTE.s:1743   .progmem.data.__c.3405:0000000000000000 __c.3405
 /var/tmp/ccgOjoTE.s:1738   .progmem.data.__c.3407:0000000000000000 __c.3407
 /var/tmp/ccgOjoTE.s:67     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
 /var/tmp/ccgOjoTE.s:1613   .progmem.data.__c.3361:0000000000000000 __c.3361
 /var/tmp/ccgOjoTE.s:1608   .progmem.data.__c.3365:0000000000000000 __c.3365
 /var/tmp/ccgOjoTE.s:1603   .progmem.data.__c.3368:0000000000000000 __c.3368
 /var/tmp/ccgOjoTE.s:1598   .progmem.data.__c.3371:0000000000000000 __c.3371
 /var/tmp/ccgOjoTE.s:1593   .progmem.data.__c.3374:0000000000000000 __c.3374
 /var/tmp/ccgOjoTE.s:1588   .progmem.data.__c.3377:0000000000000000 __c.3377
 /var/tmp/ccgOjoTE.s:338    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
 /var/tmp/ccgOjoTE.s:1583   .progmem.data.__c.3384:0000000000000000 __c.3384
 /var/tmp/ccgOjoTE.s:1578   .progmem.data.__c.3388:0000000000000000 __c.3388
 /var/tmp/ccgOjoTE.s:1573   .progmem.data.__c.3391:0000000000000000 __c.3391
 /var/tmp/ccgOjoTE.s:1568   .progmem.data.__c.3394:0000000000000000 __c.3394
 /var/tmp/ccgOjoTE.s:1563   .progmem.data.__c.3397:0000000000000000 __c.3397
 /var/tmp/ccgOjoTE.s:1558   .progmem.data.__c.3400:0000000000000000 __c.3400
 /var/tmp/ccgOjoTE.s:561    .text.switch_default_layer:0000000000000000 switch_default_layer
 /var/tmp/ccgOjoTE.s:1763   .progmem.data.__c.3456:0000000000000000 __c.3456
 /var/tmp/ccgOjoTE.s:628    .text.command_common:0000000000000000 command_common
 /var/tmp/ccgOjoTE.s:1836   .progmem.data.__c.3291:0000000000000000 __c.3291
 /var/tmp/ccgOjoTE.s:1846   .progmem.data.__c.3278:0000000000000000 __c.3278
 /var/tmp/ccgOjoTE.s:1866   .progmem.data.__c.3268:0000000000000000 __c.3268
 /var/tmp/ccgOjoTE.s:1881   .progmem.data.__c.3260:0000000000000000 __c.3260
 /var/tmp/ccgOjoTE.s:1828   .progmem.data.__c.3220:0000000000000000 __c.3220
 /var/tmp/ccgOjoTE.s:1823   .progmem.data.__c.3296:0000000000000000 __c.3296
 /var/tmp/ccgOjoTE.s:1886   .progmem.data.__c.3257:0000000000000000 __c.3257
 /var/tmp/ccgOjoTE.s:1897   .bss.command_state:0000000000000000 command_state
 /var/tmp/ccgOjoTE.s:1876   .progmem.data.__c.3263:0000000000000000 __c.3263
 /var/tmp/ccgOjoTE.s:1871   .progmem.data.__c.3265:0000000000000000 __c.3265
 /var/tmp/ccgOjoTE.s:1861   .progmem.data.__c.3270:0000000000000000 __c.3270
 /var/tmp/ccgOjoTE.s:1856   .progmem.data.__c.3273:0000000000000000 __c.3273
 /var/tmp/ccgOjoTE.s:1851   .progmem.data.__c.3275:0000000000000000 __c.3275
 /var/tmp/ccgOjoTE.s:1841   .progmem.data.__c.3280:0000000000000000 __c.3280
 /var/tmp/ccgOjoTE.s:1818   .progmem.data.__c.3225:0000000000000000 __c.3225
 /var/tmp/ccgOjoTE.s:1813   .progmem.data.__c.3227:0000000000000000 __c.3227
 /var/tmp/ccgOjoTE.s:1808   .progmem.data.__c.3229:0000000000000000 __c.3229
 /var/tmp/ccgOjoTE.s:1803   .progmem.data.__c.3231:0000000000000000 __c.3231
 /var/tmp/ccgOjoTE.s:1798   .progmem.data.__c.3233:0000000000000000 __c.3233
 /var/tmp/ccgOjoTE.s:1793   .progmem.data.__c.3235:0000000000000000 __c.3235
 /var/tmp/ccgOjoTE.s:1788   .progmem.data.__c.3240:0000000000000000 __c.3240
 /var/tmp/ccgOjoTE.s:1783   .progmem.data.__c.3242:0000000000000000 __c.3242
 /var/tmp/ccgOjoTE.s:1778   .progmem.data.__c.3244:0000000000000000 __c.3244
 /var/tmp/ccgOjoTE.s:1773   .progmem.data.__c.3246:0000000000000000 __c.3246
 /var/tmp/ccgOjoTE.s:1768   .progmem.data.__c.3248:0000000000000000 __c.3248
 /var/tmp/ccgOjoTE.s:1009   .text.command_extra:0000000000000000 command_extra
 /var/tmp/ccgOjoTE.s:1009   .text.command_extra:0000000000000000 command_extra.localalias.0
 /var/tmp/ccgOjoTE.s:1030   .text.command_console_extra:0000000000000000 command_console_extra
 /var/tmp/ccgOjoTE.s:1044   .text.numkey2num:0000000000000000 numkey2num
 /var/tmp/ccgOjoTE.s:1544   .rodata.CSWTCH.72:0000000000000000 CSWTCH.72
 /var/tmp/ccgOjoTE.s:1076   .text.command_proc:0000000000000000 command_proc
 /var/tmp/ccgOjoTE.s:1748   .progmem.data.__c.3310:0000000000000000 __c.3310
 /var/tmp/ccgOjoTE.s:1758   .progmem.data.__c.3312:0000000000000000 __c.3312
 /var/tmp/ccgOjoTE.s:1753   .progmem.data.__c.3307:0000000000000000 __c.3307
 /var/tmp/ccgOjoTE.s:1723   .progmem.data.__c.3434:0000000000000000 __c.3434
 /var/tmp/ccgOjoTE.s:1891   .bss.mousekey_param:0000000000000000 mousekey_param
 /var/tmp/ccgOjoTE.s:1718   .progmem.data.__c.3436:0000000000000000 __c.3436
 /var/tmp/ccgOjoTE.s:1733   .progmem.data.__c.3417:0000000000000000 __c.3417
 /var/tmp/ccgOjoTE.s:1708   .progmem.data.__c.3318:0000000000000000 __c.3318
 /var/tmp/ccgOjoTE.s:1703   .progmem.data.__c.3320:0000000000000000 __c.3320
 /var/tmp/ccgOjoTE.s:1698   .progmem.data.__c.3322:0000000000000000 __c.3322
 /var/tmp/ccgOjoTE.s:1693   .progmem.data.__c.3324:0000000000000000 __c.3324
 /var/tmp/ccgOjoTE.s:1688   .progmem.data.__c.3326:0000000000000000 __c.3326
 /var/tmp/ccgOjoTE.s:1683   .progmem.data.__c.3328:0000000000000000 __c.3328
 /var/tmp/ccgOjoTE.s:1678   .progmem.data.__c.3330:0000000000000000 __c.3330
 /var/tmp/ccgOjoTE.s:1673   .progmem.data.__c.3332:0000000000000000 __c.3332
 /var/tmp/ccgOjoTE.s:1668   .progmem.data.__c.3334:0000000000000000 __c.3334
 /var/tmp/ccgOjoTE.s:1663   .progmem.data.__c.3336:0000000000000000 __c.3336
 /var/tmp/ccgOjoTE.s:1658   .progmem.data.__c.3338:0000000000000000 __c.3338
 /var/tmp/ccgOjoTE.s:1653   .progmem.data.__c.3340:0000000000000000 __c.3340
 /var/tmp/ccgOjoTE.s:1648   .progmem.data.__c.3342:0000000000000000 __c.3342
 /var/tmp/ccgOjoTE.s:1643   .progmem.data.__c.3344:0000000000000000 __c.3344
 /var/tmp/ccgOjoTE.s:1638   .progmem.data.__c.3346:0000000000000000 __c.3346
 /var/tmp/ccgOjoTE.s:1633   .progmem.data.__c.3348:0000000000000000 __c.3348
 /var/tmp/ccgOjoTE.s:1628   .progmem.data.__c.3350:0000000000000000 __c.3350
 /var/tmp/ccgOjoTE.s:1623   .progmem.data.__c.3352:0000000000000000 __c.3352
 /var/tmp/ccgOjoTE.s:1618   .progmem.data.__c.3354:0000000000000000 __c.3354
 /var/tmp/ccgOjoTE.s:1728   .progmem.data.__c.3431:0000000000000000 __c.3431
 /var/tmp/ccgOjoTE.s:1713   .progmem.data.__c.3438:0000000000000000 __c.3438

UNDEFINED SYMBOLS
xputs
__xprintf
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
debug_config
bootloader_jump
host_keyboard_leds
keyboard_protocol
keyboard_idle
timer_read32
keyboard_report
__do_copy_data
__do_clear_bss
