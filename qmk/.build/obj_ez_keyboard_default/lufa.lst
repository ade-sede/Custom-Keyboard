   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB129:
  14               		.file 1 "./tmk_core/protocol/lufa/lufa.c"
   1:./tmk_core/protocol/lufa/lufa.c **** /*
   2:./tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:./tmk_core/protocol/lufa/lufa.c ****  */
   7:./tmk_core/protocol/lufa/lufa.c **** 
   8:./tmk_core/protocol/lufa/lufa.c **** /*
   9:./tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:./tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:./tmk_core/protocol/lufa/lufa.c **** 
  12:./tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:./tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:./tmk_core/protocol/lufa/lufa.c **** */
  15:./tmk_core/protocol/lufa/lufa.c **** 
  16:./tmk_core/protocol/lufa/lufa.c **** /*
  17:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:./tmk_core/protocol/lufa/lufa.c **** 
  20:./tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:./tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:./tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:./tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:./tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:./tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:./tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:./tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:./tmk_core/protocol/lufa/lufa.c **** 
  29:./tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:./tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:./tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:./tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:./tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:./tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:./tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:./tmk_core/protocol/lufa/lufa.c ****   this software.
  37:./tmk_core/protocol/lufa/lufa.c **** */
  38:./tmk_core/protocol/lufa/lufa.c **** 
  39:./tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:./tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:./tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:./tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:./tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:./tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:./tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:./tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:./tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:./tmk_core/protocol/lufa/lufa.c **** #endif
  50:./tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:./tmk_core/protocol/lufa/lufa.c **** 
  52:./tmk_core/protocol/lufa/lufa.c **** #include "usb_descriptor.h"
  53:./tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:./tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:./tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:./tmk_core/protocol/lufa/lufa.c **** #include "outputselect.h"
  57:./tmk_core/protocol/lufa/lufa.c **** 
  58:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  59:./tmk_core/protocol/lufa/lufa.c ****   #include "keycode_config.h"
  60:./tmk_core/protocol/lufa/lufa.c **** 
  61:./tmk_core/protocol/lufa/lufa.c ****   extern keymap_config_t keymap_config;
  62:./tmk_core/protocol/lufa/lufa.c **** #endif
  63:./tmk_core/protocol/lufa/lufa.c **** 
  64:./tmk_core/protocol/lufa/lufa.c **** 
  65:./tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  66:./tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  67:./tmk_core/protocol/lufa/lufa.c **** #endif
  68:./tmk_core/protocol/lufa/lufa.c **** 
  69:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  70:./tmk_core/protocol/lufa/lufa.c ****   #ifdef MODULE_ADAFRUIT_BLE
  71:./tmk_core/protocol/lufa/lufa.c ****     #include "adafruit_ble.h"
  72:./tmk_core/protocol/lufa/lufa.c ****   #else
  73:./tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  74:./tmk_core/protocol/lufa/lufa.c ****   #endif
  75:./tmk_core/protocol/lufa/lufa.c **** #endif
  76:./tmk_core/protocol/lufa/lufa.c **** 
  77:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  78:./tmk_core/protocol/lufa/lufa.c ****     #include "virtser.h"
  79:./tmk_core/protocol/lufa/lufa.c **** #endif
  80:./tmk_core/protocol/lufa/lufa.c **** 
  81:./tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) | defined(RGBLIGHT_ANIMATIONS)) & defined(RGBLIGHT_ENABLE)
  82:./tmk_core/protocol/lufa/lufa.c ****     #include "rgblight.h"
  83:./tmk_core/protocol/lufa/lufa.c **** #endif
  84:./tmk_core/protocol/lufa/lufa.c **** 
  85:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  86:./tmk_core/protocol/lufa/lufa.c ****   #include "qmk_midi.h"
  87:./tmk_core/protocol/lufa/lufa.c **** #endif
  88:./tmk_core/protocol/lufa/lufa.c **** 
  89:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  90:./tmk_core/protocol/lufa/lufa.c **** 	#include "raw_hid.h"
  91:./tmk_core/protocol/lufa/lufa.c **** #endif
  92:./tmk_core/protocol/lufa/lufa.c **** 
  93:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  94:./tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  95:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  96:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  97:./tmk_core/protocol/lufa/lufa.c **** 
  98:./tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  99:./tmk_core/protocol/lufa/lufa.c **** 
 100:./tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 101:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 102:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
 103:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
 104:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
 105:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
 106:./tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
 107:./tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
 108:./tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
 109:./tmk_core/protocol/lufa/lufa.c ****     send_mouse,
 110:./tmk_core/protocol/lufa/lufa.c ****     send_system,
 111:./tmk_core/protocol/lufa/lufa.c ****     send_consumer,
 112:./tmk_core/protocol/lufa/lufa.c **** };
 113:./tmk_core/protocol/lufa/lufa.c **** 
 114:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 115:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device =
 116:./tmk_core/protocol/lufa/lufa.c **** {
 117:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 118:./tmk_core/protocol/lufa/lufa.c ****   {
 119:./tmk_core/protocol/lufa/lufa.c ****     .ControlInterfaceNumber = CCI_INTERFACE,
 120:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint         =
 121:./tmk_core/protocol/lufa/lufa.c ****     {
 122:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_IN_EPADDR,
 123:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 124:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 125:./tmk_core/protocol/lufa/lufa.c ****     },
 126:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint	    =
 127:./tmk_core/protocol/lufa/lufa.c ****     {
 128:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_OUT_EPADDR,
 129:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 130:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 131:./tmk_core/protocol/lufa/lufa.c ****     },
 132:./tmk_core/protocol/lufa/lufa.c ****     .NotificationEndpoint   =
 133:./tmk_core/protocol/lufa/lufa.c ****     {
 134:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_NOTIFICATION_EPADDR,
 135:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_NOTIFICATION_EPSIZE,
 136:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 137:./tmk_core/protocol/lufa/lufa.c ****     },
 138:./tmk_core/protocol/lufa/lufa.c ****   },
 139:./tmk_core/protocol/lufa/lufa.c **** };
 140:./tmk_core/protocol/lufa/lufa.c **** #endif
 141:./tmk_core/protocol/lufa/lufa.c **** 
 142:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 143:./tmk_core/protocol/lufa/lufa.c **** 
 144:./tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Send
 145:./tmk_core/protocol/lufa/lufa.c ****  *
 146:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 147:./tmk_core/protocol/lufa/lufa.c ****  */
 148:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_send( uint8_t *data, uint8_t length )
 149:./tmk_core/protocol/lufa/lufa.c **** {
 150:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: implement variable size packet
 151:./tmk_core/protocol/lufa/lufa.c **** 	if ( length != RAW_EPSIZE )
 152:./tmk_core/protocol/lufa/lufa.c **** 	{
 153:./tmk_core/protocol/lufa/lufa.c **** 		return;
 154:./tmk_core/protocol/lufa/lufa.c **** 	}
 155:./tmk_core/protocol/lufa/lufa.c **** 
 156:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 157:./tmk_core/protocol/lufa/lufa.c **** 	{
 158:./tmk_core/protocol/lufa/lufa.c **** 		return;
 159:./tmk_core/protocol/lufa/lufa.c **** 	}
 160:./tmk_core/protocol/lufa/lufa.c **** 
 161:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: decide if we allow calls to raw_hid_send() in the middle
 162:./tmk_core/protocol/lufa/lufa.c **** 	// of other endpoint usage.
 163:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t ep = Endpoint_GetCurrentEndpoint();
 164:./tmk_core/protocol/lufa/lufa.c **** 
 165:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 166:./tmk_core/protocol/lufa/lufa.c **** 
 167:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if the host is ready to accept another packet
 168:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsINReady())
 169:./tmk_core/protocol/lufa/lufa.c **** 	{
 170:./tmk_core/protocol/lufa/lufa.c **** 		// Write data
 171:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 172:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to send the last packet
 173:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearIN();
 174:./tmk_core/protocol/lufa/lufa.c **** 	}
 175:./tmk_core/protocol/lufa/lufa.c **** 
 176:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(ep);
 177:./tmk_core/protocol/lufa/lufa.c **** }
 178:./tmk_core/protocol/lufa/lufa.c **** 
 179:./tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Receive
 180:./tmk_core/protocol/lufa/lufa.c ****  *
 181:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 182:./tmk_core/protocol/lufa/lufa.c ****  */
 183:./tmk_core/protocol/lufa/lufa.c **** __attribute__ ((weak))
 184:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_receive( uint8_t *data, uint8_t length )
 185:./tmk_core/protocol/lufa/lufa.c **** {
 186:./tmk_core/protocol/lufa/lufa.c **** 	// Users should #include "raw_hid.h" in their own code
 187:./tmk_core/protocol/lufa/lufa.c **** 	// and implement this function there. Leave this as weak linkage
 188:./tmk_core/protocol/lufa/lufa.c **** 	// so users can opt to not handle data coming in.
 189:./tmk_core/protocol/lufa/lufa.c **** }
 190:./tmk_core/protocol/lufa/lufa.c **** 
 191:./tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Task
 192:./tmk_core/protocol/lufa/lufa.c ****  *
 193:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 194:./tmk_core/protocol/lufa/lufa.c ****  */
 195:./tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void)
 196:./tmk_core/protocol/lufa/lufa.c **** {
 197:./tmk_core/protocol/lufa/lufa.c **** 	// Create a temporary buffer to hold the read in data from the host
 198:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t data[RAW_EPSIZE];
 199:./tmk_core/protocol/lufa/lufa.c **** 	bool data_read = false;
 200:./tmk_core/protocol/lufa/lufa.c **** 
 201:./tmk_core/protocol/lufa/lufa.c **** 	// Device must be connected and configured for the task to run
 202:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 203:./tmk_core/protocol/lufa/lufa.c **** 	return;
 204:./tmk_core/protocol/lufa/lufa.c **** 
 205:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 206:./tmk_core/protocol/lufa/lufa.c **** 
 207:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if a packet has been sent from the host
 208:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsOUTReceived())
 209:./tmk_core/protocol/lufa/lufa.c **** 	{
 210:./tmk_core/protocol/lufa/lufa.c **** 		// Check to see if the packet contains data
 211:./tmk_core/protocol/lufa/lufa.c **** 		if (Endpoint_IsReadWriteAllowed())
 212:./tmk_core/protocol/lufa/lufa.c **** 		{
 213:./tmk_core/protocol/lufa/lufa.c **** 			/* Read data */
 214:./tmk_core/protocol/lufa/lufa.c **** 			Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 215:./tmk_core/protocol/lufa/lufa.c **** 			data_read = true;
 216:./tmk_core/protocol/lufa/lufa.c **** 		}
 217:./tmk_core/protocol/lufa/lufa.c **** 
 218:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to receive the last packet
 219:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearOUT();
 220:./tmk_core/protocol/lufa/lufa.c **** 
 221:./tmk_core/protocol/lufa/lufa.c **** 		if ( data_read )
 222:./tmk_core/protocol/lufa/lufa.c **** 		{
 223:./tmk_core/protocol/lufa/lufa.c **** 			raw_hid_receive( data, sizeof(data) );
 224:./tmk_core/protocol/lufa/lufa.c **** 		}
 225:./tmk_core/protocol/lufa/lufa.c **** 	}
 226:./tmk_core/protocol/lufa/lufa.c **** }
 227:./tmk_core/protocol/lufa/lufa.c **** #endif
 228:./tmk_core/protocol/lufa/lufa.c **** 
 229:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 230:./tmk_core/protocol/lufa/lufa.c ****  * Console
 231:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 232:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 233:./tmk_core/protocol/lufa/lufa.c **** /** \brief Console Task
 234:./tmk_core/protocol/lufa/lufa.c ****  *
 235:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 236:./tmk_core/protocol/lufa/lufa.c ****  */
 237:./tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 238:./tmk_core/protocol/lufa/lufa.c **** {
 239:./tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 240:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 241:./tmk_core/protocol/lufa/lufa.c ****         return;
 242:./tmk_core/protocol/lufa/lufa.c **** 
 243:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 244:./tmk_core/protocol/lufa/lufa.c **** 
 245:./tmk_core/protocol/lufa/lufa.c **** #if 0
 246:./tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 247:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 248:./tmk_core/protocol/lufa/lufa.c **** 
 249:./tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 250:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 251:./tmk_core/protocol/lufa/lufa.c ****     {
 252:./tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 253:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 254:./tmk_core/protocol/lufa/lufa.c ****         {
 255:./tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 256:./tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 257:./tmk_core/protocol/lufa/lufa.c **** 
 258:./tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 259:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 260:./tmk_core/protocol/lufa/lufa.c **** 
 261:./tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 262:./tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 263:./tmk_core/protocol/lufa/lufa.c ****         }
 264:./tmk_core/protocol/lufa/lufa.c **** 
 265:./tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 266:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 267:./tmk_core/protocol/lufa/lufa.c ****     }
 268:./tmk_core/protocol/lufa/lufa.c **** #endif
 269:./tmk_core/protocol/lufa/lufa.c **** 
 270:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 271:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 272:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 273:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 274:./tmk_core/protocol/lufa/lufa.c ****         return;
 275:./tmk_core/protocol/lufa/lufa.c ****     }
 276:./tmk_core/protocol/lufa/lufa.c **** 
 277:./tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 278:./tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 279:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 280:./tmk_core/protocol/lufa/lufa.c **** 
 281:./tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 282:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 283:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 284:./tmk_core/protocol/lufa/lufa.c ****     }
 285:./tmk_core/protocol/lufa/lufa.c **** 
 286:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 287:./tmk_core/protocol/lufa/lufa.c **** }
 288:./tmk_core/protocol/lufa/lufa.c **** #endif
 289:./tmk_core/protocol/lufa/lufa.c **** 
 290:./tmk_core/protocol/lufa/lufa.c **** 
 291:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 292:./tmk_core/protocol/lufa/lufa.c ****  * USB Events
 293:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 294:./tmk_core/protocol/lufa/lufa.c **** /*
 295:./tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 296:./tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 297:./tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 298:./tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 299:./tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 300:./tmk_core/protocol/lufa/lufa.c **** */
 301:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 302:./tmk_core/protocol/lufa/lufa.c ****  *
 303:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 304:./tmk_core/protocol/lufa/lufa.c ****  */
 305:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 306:./tmk_core/protocol/lufa/lufa.c **** {
 307:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 308:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 309:./tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 310:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 311:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 312:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 313:./tmk_core/protocol/lufa/lufa.c ****     }
 314:./tmk_core/protocol/lufa/lufa.c **** }
 315:./tmk_core/protocol/lufa/lufa.c **** 
 316:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 317:./tmk_core/protocol/lufa/lufa.c ****  *
 318:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 319:./tmk_core/protocol/lufa/lufa.c ****  */
 320:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 321:./tmk_core/protocol/lufa/lufa.c **** {
 322:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 323:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 324:./tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 325:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 326:./tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 327:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 328:./tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 329:./tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 330:./tmk_core/protocol/lufa/lufa.c ****     }
 331:./tmk_core/protocol/lufa/lufa.c **** */
 332:./tmk_core/protocol/lufa/lufa.c **** }
 333:./tmk_core/protocol/lufa/lufa.c **** 
 334:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 335:./tmk_core/protocol/lufa/lufa.c ****  *
 336:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 337:./tmk_core/protocol/lufa/lufa.c ****  */
 338:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 339:./tmk_core/protocol/lufa/lufa.c **** {
 340:./tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 341:./tmk_core/protocol/lufa/lufa.c **** }
 342:./tmk_core/protocol/lufa/lufa.c **** 
 343:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 344:./tmk_core/protocol/lufa/lufa.c ****  *
 345:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 346:./tmk_core/protocol/lufa/lufa.c ****  */
 347:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 348:./tmk_core/protocol/lufa/lufa.c **** {
 349:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 350:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 351:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 352:./tmk_core/protocol/lufa/lufa.c **** #endif
 353:./tmk_core/protocol/lufa/lufa.c **** }
 354:./tmk_core/protocol/lufa/lufa.c **** 
 355:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 356:./tmk_core/protocol/lufa/lufa.c ****  *
 357:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 358:./tmk_core/protocol/lufa/lufa.c ****  */
 359:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 360:./tmk_core/protocol/lufa/lufa.c **** {
 361:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 362:./tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 363:./tmk_core/protocol/lufa/lufa.c **** 
 364:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 365:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 366:./tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 367:./tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 368:./tmk_core/protocol/lufa/lufa.c **** #endif
 369:./tmk_core/protocol/lufa/lufa.c **** }
 370:./tmk_core/protocol/lufa/lufa.c **** 
 371:./tmk_core/protocol/lufa/lufa.c **** 
 372:./tmk_core/protocol/lufa/lufa.c **** 
 373:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 374:./tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 375:./tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 376:./tmk_core/protocol/lufa/lufa.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {\
 377:./tmk_core/protocol/lufa/lufa.c ****     console_flush = b; \
 378:./tmk_core/protocol/lufa/lufa.c ****   } \
 379:./tmk_core/protocol/lufa/lufa.c **** } while (0)
 380:./tmk_core/protocol/lufa/lufa.c **** 
 381:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Start Of Frame
 382:./tmk_core/protocol/lufa/lufa.c ****  *
 383:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 384:./tmk_core/protocol/lufa/lufa.c ****  * called every 1ms
 385:./tmk_core/protocol/lufa/lufa.c ****  */
 386:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 387:./tmk_core/protocol/lufa/lufa.c **** {
 388:./tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 389:./tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 390:./tmk_core/protocol/lufa/lufa.c ****     count = 0;
 391:./tmk_core/protocol/lufa/lufa.c **** 
 392:./tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 393:./tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 394:./tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 395:./tmk_core/protocol/lufa/lufa.c **** }
 396:./tmk_core/protocol/lufa/lufa.c **** 
 397:./tmk_core/protocol/lufa/lufa.c **** #endif
 398:./tmk_core/protocol/lufa/lufa.c **** 
 399:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ConfigurationChanged event.
 400:./tmk_core/protocol/lufa/lufa.c ****  *
 401:./tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 402:./tmk_core/protocol/lufa/lufa.c ****  *
 403:./tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 404:./tmk_core/protocol/lufa/lufa.c ****  * it is safe to use single bank for all endpoints.
 405:./tmk_core/protocol/lufa/lufa.c ****  */
 406:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 407:./tmk_core/protocol/lufa/lufa.c **** {
 408:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 409:./tmk_core/protocol/lufa/lufa.c **** 
 410:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 411:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 412:./tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 413:./tmk_core/protocol/lufa/lufa.c **** 
 414:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 415:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 416:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 417:./tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 418:./tmk_core/protocol/lufa/lufa.c **** #endif
 419:./tmk_core/protocol/lufa/lufa.c **** 
 420:./tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 421:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Extra HID Report Endpoint */
 422:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(EXTRAKEY_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 423:./tmk_core/protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 424:./tmk_core/protocol/lufa/lufa.c **** #endif
 425:./tmk_core/protocol/lufa/lufa.c **** 
 426:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 427:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 428:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 429:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 430:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 431:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 432:./tmk_core/protocol/lufa/lufa.c **** #endif
 433:./tmk_core/protocol/lufa/lufa.c **** 
 434:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 435:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 436:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 437:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 438:./tmk_core/protocol/lufa/lufa.c **** #if 0
 439:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 440:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 441:./tmk_core/protocol/lufa/lufa.c **** #endif
 442:./tmk_core/protocol/lufa/lufa.c **** #endif
 443:./tmk_core/protocol/lufa/lufa.c **** 
 444:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 445:./tmk_core/protocol/lufa/lufa.c ****     /* Setup NKRO HID Report Endpoints */
 446:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 447:./tmk_core/protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 448:./tmk_core/protocol/lufa/lufa.c **** #endif
 449:./tmk_core/protocol/lufa/lufa.c **** 
 450:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 451:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 452:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 453:./tmk_core/protocol/lufa/lufa.c **** #endif
 454:./tmk_core/protocol/lufa/lufa.c **** 
 455:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 456:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 457:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 458:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 459:./tmk_core/protocol/lufa/lufa.c **** #endif
 460:./tmk_core/protocol/lufa/lufa.c **** }
 461:./tmk_core/protocol/lufa/lufa.c **** 
 462:./tmk_core/protocol/lufa/lufa.c **** /* FIXME: Expose this table in the docs somehow
 463:./tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 464:./tmk_core/protocol/lufa/lufa.c **** 
 465:./tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 466:./tmk_core/protocol/lufa/lufa.c **** 
 467:./tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 468:./tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 469:./tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 470:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 471:./tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 472:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 473:./tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 474:./tmk_core/protocol/lufa/lufa.c **** */
 475:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ControlRequest event.
 476:./tmk_core/protocol/lufa/lufa.c ****  *
 477:./tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 478:./tmk_core/protocol/lufa/lufa.c ****  */
 479:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 480:./tmk_core/protocol/lufa/lufa.c **** {
 481:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 482:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 483:./tmk_core/protocol/lufa/lufa.c **** 
 484:./tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 485:./tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 486:./tmk_core/protocol/lufa/lufa.c ****     {
 487:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 488:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 489:./tmk_core/protocol/lufa/lufa.c ****             {
 490:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 491:./tmk_core/protocol/lufa/lufa.c **** 
 492:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 493:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 494:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 495:./tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 496:./tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 497:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 498:./tmk_core/protocol/lufa/lufa.c ****                     break;
 499:./tmk_core/protocol/lufa/lufa.c ****                 }
 500:./tmk_core/protocol/lufa/lufa.c **** 
 501:./tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 502:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 503:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 504:./tmk_core/protocol/lufa/lufa.c ****             }
 505:./tmk_core/protocol/lufa/lufa.c **** 
 506:./tmk_core/protocol/lufa/lufa.c ****             break;
 507:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 508:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 509:./tmk_core/protocol/lufa/lufa.c ****             {
 510:./tmk_core/protocol/lufa/lufa.c **** 
 511:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 512:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 513:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 514:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 515:./tmk_core/protocol/lufa/lufa.c ****                 case NKRO_INTERFACE:
 516:./tmk_core/protocol/lufa/lufa.c **** #endif
 517:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 518:./tmk_core/protocol/lufa/lufa.c **** 
 519:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 520:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 521:./tmk_core/protocol/lufa/lufa.c ****                           return;
 522:./tmk_core/protocol/lufa/lufa.c ****                     }
 523:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 524:./tmk_core/protocol/lufa/lufa.c **** 
 525:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 526:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 527:./tmk_core/protocol/lufa/lufa.c ****                     break;
 528:./tmk_core/protocol/lufa/lufa.c ****                 }
 529:./tmk_core/protocol/lufa/lufa.c **** 
 530:./tmk_core/protocol/lufa/lufa.c ****             }
 531:./tmk_core/protocol/lufa/lufa.c **** 
 532:./tmk_core/protocol/lufa/lufa.c ****             break;
 533:./tmk_core/protocol/lufa/lufa.c **** 
 534:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 535:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 536:./tmk_core/protocol/lufa/lufa.c ****             {
 537:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 538:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 539:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 540:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 541:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 542:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 543:./tmk_core/protocol/lufa/lufa.c ****                 }
 544:./tmk_core/protocol/lufa/lufa.c ****             }
 545:./tmk_core/protocol/lufa/lufa.c **** 
 546:./tmk_core/protocol/lufa/lufa.c ****             break;
 547:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 548:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 549:./tmk_core/protocol/lufa/lufa.c ****             {
 550:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 551:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 552:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 553:./tmk_core/protocol/lufa/lufa.c **** 
 554:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 555:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 556:./tmk_core/protocol/lufa/lufa.c ****                 }
 557:./tmk_core/protocol/lufa/lufa.c ****             }
 558:./tmk_core/protocol/lufa/lufa.c **** 
 559:./tmk_core/protocol/lufa/lufa.c ****             break;
 560:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 561:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 562:./tmk_core/protocol/lufa/lufa.c ****             {
 563:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 564:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 565:./tmk_core/protocol/lufa/lufa.c **** 
 566:./tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 567:./tmk_core/protocol/lufa/lufa.c ****             }
 568:./tmk_core/protocol/lufa/lufa.c **** 
 569:./tmk_core/protocol/lufa/lufa.c ****             break;
 570:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 571:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 572:./tmk_core/protocol/lufa/lufa.c ****             {
 573:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 574:./tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 575:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 576:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 577:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 578:./tmk_core/protocol/lufa/lufa.c ****             }
 579:./tmk_core/protocol/lufa/lufa.c **** 
 580:./tmk_core/protocol/lufa/lufa.c ****             break;
 581:./tmk_core/protocol/lufa/lufa.c ****     }
 582:./tmk_core/protocol/lufa/lufa.c **** 
 583:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 584:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 585:./tmk_core/protocol/lufa/lufa.c **** #endif
 586:./tmk_core/protocol/lufa/lufa.c **** }
 587:./tmk_core/protocol/lufa/lufa.c **** 
 588:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 589:./tmk_core/protocol/lufa/lufa.c ****  * Host driver
 590:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 591:./tmk_core/protocol/lufa/lufa.c **** /** \brief Keyboard LEDs
 592:./tmk_core/protocol/lufa/lufa.c ****  *
 593:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 594:./tmk_core/protocol/lufa/lufa.c ****  */
 595:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 596:./tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 596 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 597:./tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
 598:./tmk_core/protocol/lufa/lufa.c **** }
  21               		.loc 1 598 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23               	/* epilogue start */
  24 0004 0895      		ret
  25               		.cfi_endproc
  26               	.LFE129:
  28               		.section	.text.sendchar,"ax",@progbits
  29               	.global	sendchar
  31               	sendchar:
  32               	.LFB134:
 599:./tmk_core/protocol/lufa/lufa.c **** 
 600:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Keyboard
 601:./tmk_core/protocol/lufa/lufa.c ****  *
 602:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 603:./tmk_core/protocol/lufa/lufa.c ****  */
 604:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 605:./tmk_core/protocol/lufa/lufa.c **** {
 606:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 607:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 608:./tmk_core/protocol/lufa/lufa.c **** 
 609:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 610:./tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 611:./tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 612:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 613:./tmk_core/protocol/lufa/lufa.c ****     #elif MODULE_RN42
 614:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0xFD);
 615:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0x09);
 616:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0x01);
 617:./tmk_core/protocol/lufa/lufa.c ****        for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 618:./tmk_core/protocol/lufa/lufa.c ****          bluefruit_serial_send(report->raw[i]);
 619:./tmk_core/protocol/lufa/lufa.c ****        }
 620:./tmk_core/protocol/lufa/lufa.c ****     #else
 621:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 622:./tmk_core/protocol/lufa/lufa.c ****       for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 623:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->raw[i]);
 624:./tmk_core/protocol/lufa/lufa.c ****       }
 625:./tmk_core/protocol/lufa/lufa.c ****     #endif
 626:./tmk_core/protocol/lufa/lufa.c ****   }
 627:./tmk_core/protocol/lufa/lufa.c **** #endif
 628:./tmk_core/protocol/lufa/lufa.c **** 
 629:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 630:./tmk_core/protocol/lufa/lufa.c ****       return;
 631:./tmk_core/protocol/lufa/lufa.c ****     }
 632:./tmk_core/protocol/lufa/lufa.c **** 
 633:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 634:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 635:./tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 636:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 637:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 638:./tmk_core/protocol/lufa/lufa.c **** 
 639:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 1ms */
 640:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 641:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 642:./tmk_core/protocol/lufa/lufa.c **** 
 643:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 644:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 645:./tmk_core/protocol/lufa/lufa.c ****     }
 646:./tmk_core/protocol/lufa/lufa.c ****     else
 647:./tmk_core/protocol/lufa/lufa.c **** #endif
 648:./tmk_core/protocol/lufa/lufa.c ****     {
 649:./tmk_core/protocol/lufa/lufa.c ****         /* Boot protocol */
 650:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
 651:./tmk_core/protocol/lufa/lufa.c **** 
 652:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 10ms */
 653:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 654:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 655:./tmk_core/protocol/lufa/lufa.c **** 
 656:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 657:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 658:./tmk_core/protocol/lufa/lufa.c ****     }
 659:./tmk_core/protocol/lufa/lufa.c **** 
 660:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 661:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 662:./tmk_core/protocol/lufa/lufa.c **** 
 663:./tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 664:./tmk_core/protocol/lufa/lufa.c **** }
 665:./tmk_core/protocol/lufa/lufa.c ****  
 666:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Mouse
 667:./tmk_core/protocol/lufa/lufa.c ****  *
 668:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 669:./tmk_core/protocol/lufa/lufa.c ****  */
 670:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 671:./tmk_core/protocol/lufa/lufa.c **** {
 672:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 673:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 674:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 675:./tmk_core/protocol/lufa/lufa.c **** 
 676:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 677:./tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 678:./tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 679:./tmk_core/protocol/lufa/lufa.c ****       // FIXME: mouse buttons
 680:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h, report->buttons);
 681:./tmk_core/protocol/lufa/lufa.c ****     #else
 682:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 683:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 684:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x03);
 685:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->buttons);
 686:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->x);
 687:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->y);
 688:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->v); // should try sending the wheel v here
 689:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->h); // should try sending the wheel h here
 690:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 691:./tmk_core/protocol/lufa/lufa.c ****     #endif
 692:./tmk_core/protocol/lufa/lufa.c ****   }
 693:./tmk_core/protocol/lufa/lufa.c **** #endif
 694:./tmk_core/protocol/lufa/lufa.c **** 
 695:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 696:./tmk_core/protocol/lufa/lufa.c ****       return;
 697:./tmk_core/protocol/lufa/lufa.c ****     }
 698:./tmk_core/protocol/lufa/lufa.c **** 
 699:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 700:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 701:./tmk_core/protocol/lufa/lufa.c **** 
 702:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 703:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 704:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 705:./tmk_core/protocol/lufa/lufa.c **** 
 706:./tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 707:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 708:./tmk_core/protocol/lufa/lufa.c **** 
 709:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 710:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 711:./tmk_core/protocol/lufa/lufa.c **** #endif
 712:./tmk_core/protocol/lufa/lufa.c **** }
 713:./tmk_core/protocol/lufa/lufa.c **** 
 714:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send System
 715:./tmk_core/protocol/lufa/lufa.c ****  *
 716:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 717:./tmk_core/protocol/lufa/lufa.c ****  */
 718:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 719:./tmk_core/protocol/lufa/lufa.c **** {
 720:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 721:./tmk_core/protocol/lufa/lufa.c **** 
 722:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 723:./tmk_core/protocol/lufa/lufa.c ****         return;
 724:./tmk_core/protocol/lufa/lufa.c **** 
 725:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 726:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 727:./tmk_core/protocol/lufa/lufa.c ****         .usage = data - SYSTEM_POWER_DOWN + 1
 728:./tmk_core/protocol/lufa/lufa.c ****     };
 729:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 730:./tmk_core/protocol/lufa/lufa.c **** 
 731:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 732:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 733:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 734:./tmk_core/protocol/lufa/lufa.c **** 
 735:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 736:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 737:./tmk_core/protocol/lufa/lufa.c **** }
 738:./tmk_core/protocol/lufa/lufa.c **** 
 739:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Consumer
 740:./tmk_core/protocol/lufa/lufa.c ****  *
 741:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 742:./tmk_core/protocol/lufa/lufa.c ****  */
 743:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 744:./tmk_core/protocol/lufa/lufa.c **** {
 745:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 746:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 747:./tmk_core/protocol/lufa/lufa.c **** 
 748:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 749:./tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 750:./tmk_core/protocol/lufa/lufa.c ****       #ifdef MODULE_ADAFRUIT_BLE
 751:./tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_send_consumer_key(data, 0);
 752:./tmk_core/protocol/lufa/lufa.c ****       #elif MODULE_RN42
 753:./tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 754:./tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 755:./tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 756:./tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2RN42(data);
 757:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 758:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 759:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 760:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 761:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 762:./tmk_core/protocol/lufa/lufa.c ****       #else
 763:./tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 764:./tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 765:./tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 766:./tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 767:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 768:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 769:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x02);
 770:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 771:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 772:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 773:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 774:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 775:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 776:./tmk_core/protocol/lufa/lufa.c ****       #endif
 777:./tmk_core/protocol/lufa/lufa.c ****     }
 778:./tmk_core/protocol/lufa/lufa.c **** #endif
 779:./tmk_core/protocol/lufa/lufa.c **** 
 780:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 781:./tmk_core/protocol/lufa/lufa.c ****       return;
 782:./tmk_core/protocol/lufa/lufa.c ****     }
 783:./tmk_core/protocol/lufa/lufa.c **** 
 784:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 785:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 786:./tmk_core/protocol/lufa/lufa.c ****         .usage = data
 787:./tmk_core/protocol/lufa/lufa.c ****     };
 788:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 789:./tmk_core/protocol/lufa/lufa.c **** 
 790:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 791:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 792:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 793:./tmk_core/protocol/lufa/lufa.c **** 
 794:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 795:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 796:./tmk_core/protocol/lufa/lufa.c **** }
 797:./tmk_core/protocol/lufa/lufa.c **** 
 798:./tmk_core/protocol/lufa/lufa.c **** 
 799:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 800:./tmk_core/protocol/lufa/lufa.c ****  * sendchar
 801:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 802:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 803:./tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 804:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Char
 805:./tmk_core/protocol/lufa/lufa.c ****  *
 806:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 807:./tmk_core/protocol/lufa/lufa.c ****  */
 808:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 809:./tmk_core/protocol/lufa/lufa.c **** {
  33               		.loc 1 809 0
  34               		.cfi_startproc
  35               	.LVL0:
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
  40               	.LBB202:
 810:./tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 811:./tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 812:./tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 813:./tmk_core/protocol/lufa/lufa.c **** 
 814:./tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 815:./tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 816:./tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
  41               		.loc 1 816 0
  42 0000 9FB7      		in r25,__SREG__
  43               	.LVL1:
  44               	.LBB203:
  45               	.LBB204:
  46               		.file 2 "/usr/avr/include/util/atomic.h"
   1:/usr/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/avr/include/util/atomic.h **** 
   4:/usr/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/avr/include/util/atomic.h **** 
   7:/usr/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/avr/include/util/atomic.h **** 
  10:/usr/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/avr/include/util/atomic.h ****      distribution.
  14:/usr/avr/include/util/atomic.h **** 
  15:/usr/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/avr/include/util/atomic.h **** 
  19:/usr/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/avr/include/util/atomic.h **** */
  31:/usr/avr/include/util/atomic.h **** 
  32:/usr/avr/include/util/atomic.h **** /* $Id: atomic.h 2158 2010-06-10 15:48:28Z joerg_wunsch $ */
  33:/usr/avr/include/util/atomic.h **** 
  34:/usr/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/avr/include/util/atomic.h **** 
  37:/usr/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/avr/include/util/atomic.h **** 
  40:/usr/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/avr/include/util/atomic.h **** {
  44:/usr/avr/include/util/atomic.h ****     sei();
  45:/usr/avr/include/util/atomic.h ****     return 1;
  46:/usr/avr/include/util/atomic.h **** }
  47:/usr/avr/include/util/atomic.h **** 
  48:/usr/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/avr/include/util/atomic.h **** {
  50:/usr/avr/include/util/atomic.h ****     cli();
  47               		.loc 2 50 0
  48               	/* #APP */
  49               	 ;  50 "/usr/avr/include/util/atomic.h" 1
  50 0002 F894      		cli
  51               	 ;  0 "" 2
  52               	.LVL2:
  53               	/* #NOAPP */
  54               	.LBE204:
  55               	.LBE203:
  56               		.loc 1 816 0
  57 0004 1092 0000 		sts console_flush,__zero_reg__
  58               	.LVL3:
  59               	.LBB205:
  60               	.LBB206:
  51:/usr/avr/include/util/atomic.h ****     return 1;
  52:/usr/avr/include/util/atomic.h **** }
  53:/usr/avr/include/util/atomic.h **** 
  54:/usr/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/avr/include/util/atomic.h **** {
  56:/usr/avr/include/util/atomic.h ****     sei();
  57:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:/usr/avr/include/util/atomic.h ****     (void)__s;
  59:/usr/avr/include/util/atomic.h **** }
  60:/usr/avr/include/util/atomic.h **** 
  61:/usr/avr/include/util/atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:/usr/avr/include/util/atomic.h **** {
  63:/usr/avr/include/util/atomic.h ****     cli();
  64:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:/usr/avr/include/util/atomic.h ****     (void)__s;
  66:/usr/avr/include/util/atomic.h **** }
  67:/usr/avr/include/util/atomic.h **** 
  68:/usr/avr/include/util/atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:/usr/avr/include/util/atomic.h **** {
  70:/usr/avr/include/util/atomic.h ****     SREG = *__s;
  61               		.loc 2 70 0
  62 0008 9FBF      		out __SREG__,r25
  71:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  63               		.loc 2 71 0
  64               	.LVL4:
  65               	.LBE206:
  66               	.LBE205:
  67               	.LBE202:
 817:./tmk_core/protocol/lufa/lufa.c **** 
 818:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
  68               		.loc 1 818 0
  69 000a 9091 0000 		lds r25,USB_DeviceState
  70 000e 9430      		cpi r25,lo8(4)
  71 0010 01F0      		breq .+2
  72 0012 00C0      		rjmp .L14
  73               	.LBB207:
  74               	.LBB208:
  75               		.file 3 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
  76               		.loc 3 253 0
  77 0014 2091 E900 		lds r18,233
  78 0018 2F70      		andi r18,lo8(15)
  79               	.LBB209:
  80               	.LBB210:
 240:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  81               		.loc 3 240 0
  82 001a 9091 EC00 		lds r25,236
  83 001e 90FD      		sbrc r25,0
  84 0020 00C0      		rjmp .L15
  85 0022 90E0      		ldi r25,0
  86               	.L4:
  87               	.LBE210:
  88               	.LBE209:
  89               		.loc 3 253 0
  90 0024 922B      		or r25,r18
  91               	.LVL5:
  92               	.LBE208:
  93               	.LBE207:
  94               	.LBB214:
  95               	.LBB215:
 254:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  96               		.loc 3 270 0
  97 0026 24E0      		ldi r18,lo8(4)
  98 0028 2093 E900 		sts 233,r18
  99               	.LVL6:
 100               	.LBE215:
 101               	.LBE214:
 102               	.LBB216:
 103               	.LBB217:
 271:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 104               		.loc 3 313 0
 105 002c 2091 EB00 		lds r18,235
 106               	.LBE217:
 107               	.LBE216:
 819:./tmk_core/protocol/lufa/lufa.c ****         return -1;
 820:./tmk_core/protocol/lufa/lufa.c **** 
 821:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 822:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 823:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 108               		.loc 1 823 0
 109 0030 20FF      		sbrs r18,0
 110 0032 00C0      		rjmp .L9
 111               	.LBB218:
 112               	.LBB219:
 314:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 361:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 113               		.loc 3 370 0
 114 0034 2091 EE00 		lds r18,238
 115               	.LBE219:
 116               	.LBE218:
 117               		.loc 1 823 0
 118 0038 27FF      		sbrs r18,7
 119 003a 00C0      		rjmp .L9
 824:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 825:./tmk_core/protocol/lufa/lufa.c ****     }
 826:./tmk_core/protocol/lufa/lufa.c **** 
 827:./tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 120               		.loc 1 827 0
 121 003c 2091 0000 		lds r18,timeouted.5644
 122 0040 2223      		tst r18
 123 0042 01F0      		breq .L6
 124               	.LBB220:
 125               	.LBB221:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 126               		.loc 3 360 0
 127 0044 2091 E800 		lds r18,232
 128               	.LBE221:
 129               	.LBE220:
 130               		.loc 1 827 0
 131 0048 25FF      		sbrs r18,5
 132 004a 00C0      		rjmp .L9
 133               	.L6:
 828:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 829:./tmk_core/protocol/lufa/lufa.c ****     }
 830:./tmk_core/protocol/lufa/lufa.c **** 
 831:./tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 134               		.loc 1 831 0
 135 004c 1092 0000 		sts timeouted.5644,__zero_reg__
 136               	.LVL7:
 832:./tmk_core/protocol/lufa/lufa.c **** 
 833:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 834:./tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 137               		.loc 1 834 0
 138 0050 26E0      		ldi r18,lo8(6)
 139               	.LVL8:
 140               	.L7:
 141               	.LBB222:
 142               	.LBB223:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 143               		.loc 3 360 0
 144 0052 3091 E800 		lds r19,232
 145               	.LBE223:
 146               	.LBE222:
 147               		.loc 1 834 0
 148 0056 35FF      		sbrs r19,5
 149 0058 00C0      		rjmp .L10
 150               	.LVL9:
 151               	.LBB224:
 152               	.LBB225:
 371:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 457:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 472:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 543:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 153               		.loc 3 554 0
 154 005a 8093 F100 		sts 241,r24
 155               	.LVL10:
 156               	.LBE225:
 157               	.LBE224:
 158               	.LBB226:
 159               	.LBB227:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 160               		.loc 3 360 0
 161 005e 8091 E800 		lds r24,232
 162               	.LVL11:
 163               	.LBE227:
 164               	.LBE226:
 835:./tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 836:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 837:./tmk_core/protocol/lufa/lufa.c ****         }
 838:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 839:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 840:./tmk_core/protocol/lufa/lufa.c ****         }
 841:./tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 842:./tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 843:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 844:./tmk_core/protocol/lufa/lufa.c ****         }
 845:./tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 846:./tmk_core/protocol/lufa/lufa.c ****     }
 847:./tmk_core/protocol/lufa/lufa.c **** 
 848:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 849:./tmk_core/protocol/lufa/lufa.c **** 
 850:./tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 851:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 165               		.loc 1 851 0
 166 0062 85FD      		sbrc r24,5
 167 0064 00C0      		rjmp .L11
 168               	.L12:
 169               	.LBB228:
 170               	.LBB229:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 171               		.loc 3 407 0 discriminator 1
 172 0066 8091 E800 		lds r24,232
 173               	.LBE229:
 174               	.LBE228:
 852:./tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 175               		.loc 1 852 0 discriminator 1
 176 006a 80FF      		sbrs r24,0
 177 006c 00C0      		rjmp .L12
 178               	.LBB230:
 179               	.LBB231:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 180               		.loc 3 456 0
 181 006e 8091 E800 		lds r24,232
 182 0072 8E77      		andi r24,lo8(126)
 183 0074 8093 E800 		sts 232,r24
 184               	.LVL12:
 185               	.L13:
 186               	.LBE231:
 187               	.LBE230:
 188               	.LBB232:
 189               	.LBB233:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 190               		.loc 3 270 0
 191 0078 9F70      		andi r25,lo8(15)
 192               	.LVL13:
 193 007a 9093 E900 		sts 233,r25
 194               	.LBE233:
 195               	.LBE232:
 853:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 854:./tmk_core/protocol/lufa/lufa.c ****     } else {
 855:./tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 856:./tmk_core/protocol/lufa/lufa.c ****     }
 857:./tmk_core/protocol/lufa/lufa.c **** 
 858:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 859:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 196               		.loc 1 859 0
 197 007e 80E0      		ldi r24,0
 198 0080 0895      		ret
 199               	.LVL14:
 200               	.L15:
 201               	.LBB234:
 202               	.LBB213:
 203               	.LBB212:
 204               	.LBB211:
 240:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 205               		.loc 3 240 0
 206 0082 90E8      		ldi r25,lo8(-128)
 207 0084 00C0      		rjmp .L4
 208               	.LVL15:
 209               	.L10:
 210               	.LBE211:
 211               	.LBE212:
 212               	.LBE213:
 213               	.LBE234:
 835:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 214               		.loc 1 835 0
 215 0086 3091 0000 		lds r19,USB_DeviceState
 216 008a 3430      		cpi r19,lo8(4)
 217 008c 01F4      		brne .L9
 218               	.LBB235:
 219               	.LBB236:
 513:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 220               		.loc 3 513 0
 221 008e 3091 EB00 		lds r19,235
 222               	.LBE236:
 223               	.LBE235:
 838:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 224               		.loc 1 838 0
 225 0092 35FD      		sbrc r19,5
 226 0094 00C0      		rjmp .L9
 227               	.LVL16:
 228 0096 2150      		subi r18,lo8(-(-1))
 229               	.LVL17:
 841:./tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 230               		.loc 1 841 0
 231 0098 01F4      		brne .L8
 842:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 232               		.loc 1 842 0
 233 009a 81E0      		ldi r24,lo8(1)
 234               	.LVL18:
 235 009c 8093 0000 		sts timeouted.5644,r24
 236               	.LVL19:
 237               	.L9:
 238               	.LBB237:
 239               	.LBB238:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 240               		.loc 3 270 0
 241 00a0 9F70      		andi r25,lo8(15)
 242               	.LVL20:
 243 00a2 9093 E900 		sts 233,r25
 244               	.L14:
 245               	.LBE238:
 246               	.LBE237:
 819:./tmk_core/protocol/lufa/lufa.c **** 
 247               		.loc 1 819 0
 248 00a6 8FEF      		ldi r24,lo8(-1)
 249               	/* epilogue start */
 860:./tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 861:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 862:./tmk_core/protocol/lufa/lufa.c ****     return -1;
 863:./tmk_core/protocol/lufa/lufa.c **** }
 250               		.loc 1 863 0
 251 00a8 0895      		ret
 252               	.LVL21:
 253               	.L8:
 254               	.LBB239:
 255               	.LBB240:
 256               		.file 4 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 257               		.loc 4 187 0
 258 00aa EFE9      		ldi r30,lo8(3999)
 259 00ac FFE0      		ldi r31,hi8(3999)
 260 00ae 3197      	1:	sbiw r30,1
 261 00b0 01F4      		brne 1b
 262 00b2 00C0      		rjmp .
 263 00b4 0000      		nop
 264 00b6 00C0      		rjmp .L7
 265               	.LVL22:
 266               	.L11:
 267               	.LBE240:
 268               	.LBE239:
 269               	.LBB241:
 855:./tmk_core/protocol/lufa/lufa.c ****     }
 270               		.loc 1 855 0
 271 00b8 8FB7      		in r24,__SREG__
 272               	.LVL23:
 273               	.LBB242:
 274               	.LBB243:
  50:/usr/avr/include/util/atomic.h ****     return 1;
 275               		.loc 2 50 0
 276               	/* #APP */
 277               	 ;  50 "/usr/avr/include/util/atomic.h" 1
 278 00ba F894      		cli
 279               	 ;  0 "" 2
 280               	.LVL24:
 281               	/* #NOAPP */
 282               	.LBE243:
 283               	.LBE242:
 855:./tmk_core/protocol/lufa/lufa.c ****     }
 284               		.loc 1 855 0
 285 00bc 21E0      		ldi r18,lo8(1)
 286               	.LVL25:
 287 00be 2093 0000 		sts console_flush,r18
 288               	.LVL26:
 289               	.LBB244:
 290               	.LBB245:
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 291               		.loc 2 70 0
 292 00c2 8FBF      		out __SREG__,r24
 293               		.loc 2 71 0
 294               	.LVL27:
 295 00c4 00C0      		rjmp .L13
 296               	.LBE245:
 297               	.LBE244:
 298               	.LBE241:
 299               		.cfi_endproc
 300               	.LFE134:
 302               		.section	.text.send_consumer,"ax",@progbits
 304               	send_consumer:
 305               	.LFB133:
 744:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 306               		.loc 1 744 0
 307               		.cfi_startproc
 308               	.LVL28:
 309 0000 0F93      		push r16
 310               	.LCFI0:
 311               		.cfi_def_cfa_offset 3
 312               		.cfi_offset 16, -2
 313 0002 1F93      		push r17
 314               	.LCFI1:
 315               		.cfi_def_cfa_offset 4
 316               		.cfi_offset 17, -3
 317 0004 CF93      		push r28
 318               	.LCFI2:
 319               		.cfi_def_cfa_offset 5
 320               		.cfi_offset 28, -4
 321 0006 DF93      		push r29
 322               	.LCFI3:
 323               		.cfi_def_cfa_offset 6
 324               		.cfi_offset 29, -5
 325 0008 00D0      		rcall .
 326 000a 1F92      		push __zero_reg__
 327               	.LCFI4:
 328               		.cfi_def_cfa_offset 9
 329 000c CDB7      		in r28,__SP_L__
 330 000e DEB7      		in r29,__SP_H__
 331               	.LCFI5:
 332               		.cfi_def_cfa_register 28
 333               	/* prologue: function */
 334               	/* frame size = 3 */
 335               	/* stack size = 7 */
 336               	.L__stack_usage = 7
 337 0010 8C01      		movw r16,r24
 338               	.LVL29:
 746:./tmk_core/protocol/lufa/lufa.c **** 
 339               		.loc 1 746 0
 340 0012 0E94 0000 		call where_to_send
 341               	.LVL30:
 780:./tmk_core/protocol/lufa/lufa.c ****       return;
 342               		.loc 1 780 0
 343 0016 8230      		cpi r24,lo8(2)
 344 0018 01F0      		breq .L28
 780:./tmk_core/protocol/lufa/lufa.c ****       return;
 345               		.loc 1 780 0 is_stmt 0 discriminator 1
 346 001a 8430      		cpi r24,lo8(4)
 347 001c 01F4      		brne .L27
 348               	.L28:
 784:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 349               		.loc 1 784 0 is_stmt 1
 350 001e 83E0      		ldi r24,lo8(3)
 351               	.LVL31:
 352 0020 8983      		std Y+1,r24
 353 0022 1B83      		std Y+3,r17
 354 0024 0A83      		std Y+2,r16
 355               	.LVL32:
 356               	.LBB246:
 357               	.LBB247:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 358               		.loc 3 270 0
 359 0026 8093 E900 		sts 233,r24
 360               	.LVL33:
 361 002a 8FEF      		ldi r24,lo8(-1)
 362               	.LVL34:
 363               	.L30:
 364               	.LBE247:
 365               	.LBE246:
 366               	.LBB248:
 367               	.LBB249:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 368               		.loc 3 360 0
 369 002c 9091 E800 		lds r25,232
 370 0030 8150      		subi r24,lo8(-(-1))
 371               	.LVL35:
 372               	.LBE249:
 373               	.LBE248:
 791:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 374               		.loc 1 791 0
 375 0032 95FD      		sbrc r25,5
 376 0034 00C0      		rjmp .L31
 377               	.LVL36:
 378               	.LBB250:
 379               	.LBB251:
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 211:/usr/avr/include/util/delay.h **** 
 212:/usr/avr/include/util/delay.h **** /**
 213:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/avr/include/util/delay.h **** 
 215:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/avr/include/util/delay.h **** 
 217:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/avr/include/util/delay.h **** 
 220:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/avr/include/util/delay.h **** 
 226:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/avr/include/util/delay.h **** 
 231:/usr/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/avr/include/util/delay.h **** 
 236:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/avr/include/util/delay.h ****    respectively.
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h ****    \note
 242:/usr/avr/include/util/delay.h **** 
 243:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/avr/include/util/delay.h **** 
 253:/usr/avr/include/util/delay.h ****  */
 254:/usr/avr/include/util/delay.h **** void
 255:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/avr/include/util/delay.h **** {
 257:/usr/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/avr/include/util/delay.h **** 
 265:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/avr/include/util/delay.h **** 
 268:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/avr/include/util/delay.h **** 
 271:/usr/avr/include/util/delay.h **** 	#else
 272:/usr/avr/include/util/delay.h **** 		//round up by default
 273:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/avr/include/util/delay.h **** 	#endif
 275:/usr/avr/include/util/delay.h **** 
 276:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 380               		.loc 4 276 0
 381 0036 95ED      		ldi r25,lo8(-43)
 382 0038 9A95      	1:	dec r25
 383 003a 01F4      		brne 1b
 384 003c 0000      		nop
 385               	.LVL37:
 386               	.LBE251:
 387               	.LBE250:
 791:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 388               		.loc 1 791 0
 389 003e 8111      		cpse r24,__zero_reg__
 390 0040 00C0      		rjmp .L30
 391               	.LVL38:
 392               	.L31:
 393               	.LBB252:
 394               	.LBB253:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 395               		.loc 3 360 0
 396 0042 8091 E800 		lds r24,232
 397               	.LBE253:
 398               	.LBE252:
 792:./tmk_core/protocol/lufa/lufa.c **** 
 399               		.loc 1 792 0
 400 0046 85FF      		sbrs r24,5
 401 0048 00C0      		rjmp .L27
 794:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 402               		.loc 1 794 0
 403 004a 50E0      		ldi r21,0
 404 004c 40E0      		ldi r20,0
 405 004e 63E0      		ldi r22,lo8(3)
 406 0050 70E0      		ldi r23,0
 407 0052 CE01      		movw r24,r28
 408 0054 0196      		adiw r24,1
 409 0056 0E94 0000 		call Endpoint_Write_Stream_LE
 410               	.LVL39:
 411               	.LBB254:
 412               	.LBB255:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 413               		.loc 3 456 0
 414 005a 8091 E800 		lds r24,232
 415 005e 8E77      		andi r24,lo8(126)
 416 0060 8093 E800 		sts 232,r24
 417               	.LVL40:
 418               	.L27:
 419               	/* epilogue start */
 420               	.LBE255:
 421               	.LBE254:
 796:./tmk_core/protocol/lufa/lufa.c **** 
 422               		.loc 1 796 0
 423 0064 0F90      		pop __tmp_reg__
 424 0066 0F90      		pop __tmp_reg__
 425 0068 0F90      		pop __tmp_reg__
 426 006a DF91      		pop r29
 427 006c CF91      		pop r28
 428 006e 1F91      		pop r17
 429 0070 0F91      		pop r16
 430               	.LVL41:
 431 0072 0895      		ret
 432               		.cfi_endproc
 433               	.LFE133:
 435               		.section	.text.send_system,"ax",@progbits
 437               	send_system:
 438               	.LFB132:
 719:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 439               		.loc 1 719 0
 440               		.cfi_startproc
 441               	.LVL42:
 442 0000 CF93      		push r28
 443               	.LCFI6:
 444               		.cfi_def_cfa_offset 3
 445               		.cfi_offset 28, -2
 446 0002 DF93      		push r29
 447               	.LCFI7:
 448               		.cfi_def_cfa_offset 4
 449               		.cfi_offset 29, -3
 450 0004 00D0      		rcall .
 451 0006 1F92      		push __zero_reg__
 452               	.LCFI8:
 453               		.cfi_def_cfa_offset 7
 454 0008 CDB7      		in r28,__SP_L__
 455 000a DEB7      		in r29,__SP_H__
 456               	.LCFI9:
 457               		.cfi_def_cfa_register 28
 458               	/* prologue: function */
 459               	/* frame size = 3 */
 460               	/* stack size = 5 */
 461               	.L__stack_usage = 5
 462               	.LVL43:
 722:./tmk_core/protocol/lufa/lufa.c ****         return;
 463               		.loc 1 722 0
 464 000c 2091 0000 		lds r18,USB_DeviceState
 465 0010 2430      		cpi r18,lo8(4)
 466 0012 01F4      		brne .L43
 725:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 467               		.loc 1 725 0
 468 0014 22E0      		ldi r18,lo8(2)
 469 0016 2983      		std Y+1,r18
 727:./tmk_core/protocol/lufa/lufa.c ****     };
 470               		.loc 1 727 0
 471 0018 8058      		subi r24,-128
 472 001a 9109      		sbc r25,__zero_reg__
 473               	.LVL44:
 725:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 474               		.loc 1 725 0
 475 001c 9B83      		std Y+3,r25
 476 001e 8A83      		std Y+2,r24
 477               	.LVL45:
 478               	.LBB256:
 479               	.LBB257:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 480               		.loc 3 270 0
 481 0020 83E0      		ldi r24,lo8(3)
 482               	.LVL46:
 483 0022 8093 E900 		sts 233,r24
 484               	.LVL47:
 485 0026 8FEF      		ldi r24,lo8(-1)
 486               	.LVL48:
 487               	.L45:
 488               	.LBE257:
 489               	.LBE256:
 490               	.LBB258:
 491               	.LBB259:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 492               		.loc 3 360 0
 493 0028 9091 E800 		lds r25,232
 494 002c 8150      		subi r24,lo8(-(-1))
 495               	.LVL49:
 496               	.LBE259:
 497               	.LBE258:
 732:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 498               		.loc 1 732 0
 499 002e 95FD      		sbrc r25,5
 500 0030 00C0      		rjmp .L46
 501               	.LVL50:
 502               	.LBB260:
 503               	.LBB261:
 504               		.loc 4 276 0
 505 0032 95ED      		ldi r25,lo8(-43)
 506 0034 9A95      	1:	dec r25
 507 0036 01F4      		brne 1b
 508 0038 0000      		nop
 509               	.LVL51:
 510               	.LBE261:
 511               	.LBE260:
 732:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 512               		.loc 1 732 0
 513 003a 8111      		cpse r24,__zero_reg__
 514 003c 00C0      		rjmp .L45
 515               	.LVL52:
 516               	.L46:
 517               	.LBB262:
 518               	.LBB263:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 519               		.loc 3 360 0
 520 003e 8091 E800 		lds r24,232
 521               	.LBE263:
 522               	.LBE262:
 733:./tmk_core/protocol/lufa/lufa.c **** 
 523               		.loc 1 733 0
 524 0042 85FF      		sbrs r24,5
 525 0044 00C0      		rjmp .L43
 735:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 526               		.loc 1 735 0
 527 0046 50E0      		ldi r21,0
 528 0048 40E0      		ldi r20,0
 529 004a 63E0      		ldi r22,lo8(3)
 530 004c 70E0      		ldi r23,0
 531 004e CE01      		movw r24,r28
 532 0050 0196      		adiw r24,1
 533 0052 0E94 0000 		call Endpoint_Write_Stream_LE
 534               	.LVL53:
 535               	.LBB264:
 536               	.LBB265:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 537               		.loc 3 456 0
 538 0056 8091 E800 		lds r24,232
 539 005a 8E77      		andi r24,lo8(126)
 540 005c 8093 E800 		sts 232,r24
 541               	.LVL54:
 542               	.L43:
 543               	/* epilogue start */
 544               	.LBE265:
 545               	.LBE264:
 737:./tmk_core/protocol/lufa/lufa.c **** 
 546               		.loc 1 737 0
 547 0060 0F90      		pop __tmp_reg__
 548 0062 0F90      		pop __tmp_reg__
 549 0064 0F90      		pop __tmp_reg__
 550 0066 DF91      		pop r29
 551 0068 CF91      		pop r28
 552 006a 0895      		ret
 553               		.cfi_endproc
 554               	.LFE132:
 556               		.section	.text.send_mouse,"ax",@progbits
 558               	send_mouse:
 559               	.LFB131:
 671:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 560               		.loc 1 671 0
 561               		.cfi_startproc
 562               	.LVL55:
 563 0000 CF93      		push r28
 564               	.LCFI10:
 565               		.cfi_def_cfa_offset 3
 566               		.cfi_offset 28, -2
 567 0002 DF93      		push r29
 568               	.LCFI11:
 569               		.cfi_def_cfa_offset 4
 570               		.cfi_offset 29, -3
 571               	/* prologue: function */
 572               	/* frame size = 0 */
 573               	/* stack size = 2 */
 574               	.L__stack_usage = 2
 575 0004 EC01      		movw r28,r24
 576               	.LVL56:
 674:./tmk_core/protocol/lufa/lufa.c **** 
 577               		.loc 1 674 0
 578 0006 0E94 0000 		call where_to_send
 579               	.LVL57:
 695:./tmk_core/protocol/lufa/lufa.c ****       return;
 580               		.loc 1 695 0
 581 000a 8230      		cpi r24,lo8(2)
 582 000c 01F0      		breq .L56
 695:./tmk_core/protocol/lufa/lufa.c ****       return;
 583               		.loc 1 695 0 is_stmt 0 discriminator 1
 584 000e 8430      		cpi r24,lo8(4)
 585 0010 01F4      		brne .L55
 586               	.L56:
 587               	.LVL58:
 588               	.LBB266:
 589               	.LBB267:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 590               		.loc 3 270 0 is_stmt 1
 591 0012 82E0      		ldi r24,lo8(2)
 592               	.LVL59:
 593 0014 8093 E900 		sts 233,r24
 594               	.LVL60:
 595 0018 8FEF      		ldi r24,lo8(-1)
 596               	.LVL61:
 597               	.L58:
 598               	.LBE267:
 599               	.LBE266:
 600               	.LBB268:
 601               	.LBB269:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 602               		.loc 3 360 0
 603 001a 9091 E800 		lds r25,232
 604 001e 8150      		subi r24,lo8(-(-1))
 605               	.LVL62:
 606               	.LBE269:
 607               	.LBE268:
 703:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 608               		.loc 1 703 0
 609 0020 95FD      		sbrc r25,5
 610 0022 00C0      		rjmp .L59
 611               	.LVL63:
 612               	.LBB270:
 613               	.LBB271:
 614               		.loc 4 276 0
 615 0024 95ED      		ldi r25,lo8(-43)
 616 0026 9A95      	1:	dec r25
 617 0028 01F4      		brne 1b
 618 002a 0000      		nop
 619               	.LVL64:
 620               	.LBE271:
 621               	.LBE270:
 703:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 622               		.loc 1 703 0
 623 002c 8111      		cpse r24,__zero_reg__
 624 002e 00C0      		rjmp .L58
 625               	.LVL65:
 626               	.L59:
 627               	.LBB272:
 628               	.LBB273:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 629               		.loc 3 360 0
 630 0030 8091 E800 		lds r24,232
 631               	.LBE273:
 632               	.LBE272:
 704:./tmk_core/protocol/lufa/lufa.c **** 
 633               		.loc 1 704 0
 634 0034 85FF      		sbrs r24,5
 635 0036 00C0      		rjmp .L55
 707:./tmk_core/protocol/lufa/lufa.c **** 
 636               		.loc 1 707 0
 637 0038 50E0      		ldi r21,0
 638 003a 40E0      		ldi r20,0
 639 003c 65E0      		ldi r22,lo8(5)
 640 003e 70E0      		ldi r23,0
 641 0040 CE01      		movw r24,r28
 642 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 643               	.LVL66:
 644               	.LBB274:
 645               	.LBB275:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 646               		.loc 3 456 0
 647 0046 8091 E800 		lds r24,232
 648 004a 8E77      		andi r24,lo8(126)
 649 004c 8093 E800 		sts 232,r24
 650               	.LVL67:
 651               	.L55:
 652               	/* epilogue start */
 653               	.LBE275:
 654               	.LBE274:
 712:./tmk_core/protocol/lufa/lufa.c **** 
 655               		.loc 1 712 0
 656 0050 DF91      		pop r29
 657 0052 CF91      		pop r28
 658               	.LVL68:
 659 0054 0895      		ret
 660               		.cfi_endproc
 661               	.LFE131:
 663               		.section	.text.send_keyboard,"ax",@progbits
 665               	send_keyboard:
 666               	.LFB130:
 605:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 667               		.loc 1 605 0
 668               		.cfi_startproc
 669               	.LVL69:
 670 0000 CF93      		push r28
 671               	.LCFI12:
 672               		.cfi_def_cfa_offset 3
 673               		.cfi_offset 28, -2
 674 0002 DF93      		push r29
 675               	.LCFI13:
 676               		.cfi_def_cfa_offset 4
 677               		.cfi_offset 29, -3
 678               	/* prologue: function */
 679               	/* frame size = 0 */
 680               	/* stack size = 2 */
 681               	.L__stack_usage = 2
 682 0004 EC01      		movw r28,r24
 683               	.LVL70:
 607:./tmk_core/protocol/lufa/lufa.c **** 
 684               		.loc 1 607 0
 685 0006 0E94 0000 		call where_to_send
 686               	.LVL71:
 629:./tmk_core/protocol/lufa/lufa.c ****       return;
 687               		.loc 1 629 0
 688 000a 8230      		cpi r24,lo8(2)
 689 000c 01F0      		breq .L75
 629:./tmk_core/protocol/lufa/lufa.c ****       return;
 690               		.loc 1 629 0 is_stmt 0 discriminator 1
 691 000e 8430      		cpi r24,lo8(4)
 692 0010 01F4      		brne .L74
 693               	.L75:
 694               	.LVL72:
 695               	.LBB276:
 696               	.LBB277:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 697               		.loc 3 270 0 is_stmt 1
 698 0012 81E0      		ldi r24,lo8(1)
 699               	.LVL73:
 700 0014 8093 E900 		sts 233,r24
 701               	.LVL74:
 702 0018 8FEF      		ldi r24,lo8(-1)
 703               	.LVL75:
 704               	.L77:
 705               	.LBE277:
 706               	.LBE276:
 707               	.LBB278:
 708               	.LBB279:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 709               		.loc 3 360 0
 710 001a 9091 E800 		lds r25,232
 711 001e 8150      		subi r24,lo8(-(-1))
 712               	.LVL76:
 713               	.LBE279:
 714               	.LBE278:
 653:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 715               		.loc 1 653 0
 716 0020 95FD      		sbrc r25,5
 717 0022 00C0      		rjmp .L78
 718               	.LVL77:
 719               	.LBB280:
 720               	.LBB281:
 721               		.loc 4 276 0
 722 0024 95ED      		ldi r25,lo8(-43)
 723 0026 9A95      	1:	dec r25
 724 0028 01F4      		brne 1b
 725 002a 0000      		nop
 726               	.LVL78:
 727               	.LBE281:
 728               	.LBE280:
 653:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 729               		.loc 1 653 0
 730 002c 8111      		cpse r24,__zero_reg__
 731 002e 00C0      		rjmp .L77
 732               	.LVL79:
 733               	.L78:
 734               	.LBB282:
 735               	.LBB283:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 736               		.loc 3 360 0
 737 0030 8091 E800 		lds r24,232
 738               	.LBE283:
 739               	.LBE282:
 654:./tmk_core/protocol/lufa/lufa.c **** 
 740               		.loc 1 654 0
 741 0034 85FF      		sbrs r24,5
 742 0036 00C0      		rjmp .L74
 657:./tmk_core/protocol/lufa/lufa.c ****     }
 743               		.loc 1 657 0
 744 0038 50E0      		ldi r21,0
 745 003a 40E0      		ldi r20,0
 746 003c 68E0      		ldi r22,lo8(8)
 747 003e 70E0      		ldi r23,0
 748 0040 CE01      		movw r24,r28
 749 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 750               	.LVL80:
 751               	.LBB284:
 752               	.LBB285:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 753               		.loc 3 456 0
 754 0046 8091 E800 		lds r24,232
 755 004a 8E77      		andi r24,lo8(126)
 756 004c 8093 E800 		sts 232,r24
 757               	.LBE285:
 758               	.LBE284:
 663:./tmk_core/protocol/lufa/lufa.c **** }
 759               		.loc 1 663 0
 760 0050 88E0      		ldi r24,lo8(8)
 761 0052 FE01      		movw r30,r28
 762 0054 A0E0      		ldi r26,lo8(keyboard_report_sent)
 763 0056 B0E0      		ldi r27,hi8(keyboard_report_sent)
 764               		0:
 765 0058 0190      		ld r0,Z+
 766 005a 0D92      		st X+,r0
 767 005c 8A95      		dec r24
 768 005e 01F4      		brne 0b
 769               	.LVL81:
 770               	.L74:
 771               	/* epilogue start */
 664:./tmk_core/protocol/lufa/lufa.c ****  
 772               		.loc 1 664 0
 773 0060 DF91      		pop r29
 774 0062 CF91      		pop r28
 775               	.LVL82:
 776 0064 0895      		ret
 777               		.cfi_endproc
 778               	.LFE130:
 780               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 781               	.global	EVENT_USB_Device_Connect
 783               	EVENT_USB_Device_Connect:
 784               	.LFB121:
 306:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 785               		.loc 1 306 0
 786               		.cfi_startproc
 787               	/* prologue: function */
 788               	/* frame size = 0 */
 789               	/* stack size = 0 */
 790               	.L__stack_usage = 0
 307:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 791               		.loc 1 307 0
 792 0000 80E0      		ldi r24,lo8(__c.5551)
 793 0002 90E0      		ldi r25,hi8(__c.5551)
 794 0004 0E94 0000 		call xputs
 795               	.LVL83:
 309:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 796               		.loc 1 309 0
 797 0008 8091 0000 		lds r24,USB_IsInitialized
 798 000c 8111      		cpse r24,__zero_reg__
 799 000e 00C0      		rjmp .L93
 310:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 800               		.loc 1 310 0
 801 0010 0E94 0000 		call USB_Disable
 802               	.LVL84:
 311:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 803               		.loc 1 311 0
 804 0014 0E94 0000 		call USB_Init
 805               	.LVL85:
 806               	.LBB286:
 807               	.LBB287:
 808               	.LBB288:
 809               		.file 5 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 810               		.loc 5 113 0
 811 0018 8091 E200 		lds r24,226
 812 001c 8460      		ori r24,lo8(4)
 813 001e 8093 E200 		sts 226,r24
 814               	.LVL86:
 815               	.L93:
 816               	/* epilogue start */
 817               	.LBE288:
 818               	.LBE287:
 819               	.LBE286:
 314:./tmk_core/protocol/lufa/lufa.c **** 
 820               		.loc 1 314 0
 821 0022 0895      		ret
 822               		.cfi_endproc
 823               	.LFE121:
 825               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 826               	.global	EVENT_USB_Device_Disconnect
 828               	EVENT_USB_Device_Disconnect:
 829               	.LFB122:
 321:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 830               		.loc 1 321 0
 831               		.cfi_startproc
 832               	/* prologue: function */
 833               	/* frame size = 0 */
 834               	/* stack size = 0 */
 835               	.L__stack_usage = 0
 322:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 836               		.loc 1 322 0
 837 0000 80E0      		ldi r24,lo8(__c.5556)
 838 0002 90E0      		ldi r25,hi8(__c.5556)
 839 0004 0E94 0000 		call xputs
 840               	.LVL87:
 324:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 841               		.loc 1 324 0
 842 0008 1092 0000 		sts USB_IsInitialized,__zero_reg__
 843               	/* epilogue start */
 332:./tmk_core/protocol/lufa/lufa.c **** 
 844               		.loc 1 332 0
 845 000c 0895      		ret
 846               		.cfi_endproc
 847               	.LFE122:
 849               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 850               	.global	EVENT_USB_Device_Reset
 852               	EVENT_USB_Device_Reset:
 853               	.LFB123:
 339:./tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 854               		.loc 1 339 0
 855               		.cfi_startproc
 856               	/* prologue: function */
 857               	/* frame size = 0 */
 858               	/* stack size = 0 */
 859               	.L__stack_usage = 0
 340:./tmk_core/protocol/lufa/lufa.c **** }
 860               		.loc 1 340 0
 861 0000 80E0      		ldi r24,lo8(__c.5561)
 862 0002 90E0      		ldi r25,hi8(__c.5561)
 863 0004 0C94 0000 		jmp xputs
 864               	.LVL88:
 865               		.cfi_endproc
 866               	.LFE123:
 868               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 869               	.global	EVENT_USB_Device_Suspend
 871               	EVENT_USB_Device_Suspend:
 872               	.LFB124:
 348:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 873               		.loc 1 348 0
 874               		.cfi_startproc
 875               	/* prologue: function */
 876               	/* frame size = 0 */
 877               	/* stack size = 0 */
 878               	.L__stack_usage = 0
 349:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 879               		.loc 1 349 0
 880 0000 80E0      		ldi r24,lo8(__c.5565)
 881 0002 90E0      		ldi r25,hi8(__c.5565)
 882 0004 0C94 0000 		jmp xputs
 883               	.LVL89:
 884               		.cfi_endproc
 885               	.LFE124:
 887               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 888               	.global	EVENT_USB_Device_WakeUp
 890               	EVENT_USB_Device_WakeUp:
 891               	.LFB125:
 360:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 892               		.loc 1 360 0
 893               		.cfi_startproc
 894               	/* prologue: function */
 895               	/* frame size = 0 */
 896               	/* stack size = 0 */
 897               	.L__stack_usage = 0
 361:./tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 898               		.loc 1 361 0
 899 0000 80E0      		ldi r24,lo8(__c.5569)
 900 0002 90E0      		ldi r25,hi8(__c.5569)
 901 0004 0E94 0000 		call xputs
 902               	.LVL90:
 362:./tmk_core/protocol/lufa/lufa.c **** 
 903               		.loc 1 362 0
 904 0008 0C94 0000 		jmp suspend_wakeup_init
 905               	.LVL91:
 906               		.cfi_endproc
 907               	.LFE125:
 909               		.section	.text.EVENT_USB_Device_StartOfFrame,"ax",@progbits
 910               	.global	EVENT_USB_Device_StartOfFrame
 912               	EVENT_USB_Device_StartOfFrame:
 913               	.LFB126:
 387:./tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 914               		.loc 1 387 0
 915               		.cfi_startproc
 916               	/* prologue: function */
 917               	/* frame size = 0 */
 918               	/* stack size = 0 */
 919               	.L__stack_usage = 0
 389:./tmk_core/protocol/lufa/lufa.c ****     count = 0;
 920               		.loc 1 389 0
 921 0000 2091 0000 		lds r18,count.5575
 922 0004 2F5F      		subi r18,lo8(-(1))
 923 0006 822F      		mov r24,r18
 924 0008 62E3      		ldi r22,lo8(50)
 925 000a 0E94 0000 		call __udivmodqi4
 926 000e 9923      		tst r25
 927 0010 01F0      		breq .L100
 928 0012 2093 0000 		sts count.5575,r18
 929 0016 0895      		ret
 930               	.L100:
 390:./tmk_core/protocol/lufa/lufa.c **** 
 931               		.loc 1 390 0
 932 0018 1092 0000 		sts count.5575,__zero_reg__
 392:./tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 933               		.loc 1 392 0
 934 001c 8091 0000 		lds r24,console_flush
 935 0020 8823      		tst r24
 936 0022 01F0      		breq .L99
 937               	.LBB313:
 938               	.LBB314:
 240:./tmk_core/protocol/lufa/lufa.c ****         return;
 939               		.loc 1 240 0
 940 0024 8091 0000 		lds r24,USB_DeviceState
 941 0028 8430      		cpi r24,lo8(4)
 942 002a 01F4      		brne .L103
 943               	.LBB315:
 944               	.LBB316:
 253:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 945               		.loc 3 253 0
 946 002c 9091 E900 		lds r25,233
 947 0030 9F70      		andi r25,lo8(15)
 948               	.LBB317:
 949               	.LBB318:
 240:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 950               		.loc 3 240 0
 951 0032 8091 EC00 		lds r24,236
 952 0036 80FD      		sbrc r24,0
 953 0038 00C0      		rjmp .L109
 954 003a 80E0      		ldi r24,0
 955               	.L104:
 956               	.LBE318:
 957               	.LBE317:
 253:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 958               		.loc 3 253 0
 959 003c 892B      		or r24,r25
 960               	.LVL92:
 961               	.LBE316:
 962               	.LBE315:
 963               	.LBB322:
 964               	.LBB323:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 965               		.loc 3 270 0
 966 003e 94E0      		ldi r25,lo8(4)
 967 0040 9093 E900 		sts 233,r25
 968               	.LVL93:
 969               	.LBE323:
 970               	.LBE322:
 971               	.LBB324:
 972               	.LBB325:
 313:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 973               		.loc 3 313 0
 974 0044 9091 EB00 		lds r25,235
 975               	.LBE325:
 976               	.LBE324:
 272:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 977               		.loc 1 272 0
 978 0048 90FF      		sbrs r25,0
 979 004a 00C0      		rjmp .L108
 980               	.LBB326:
 981               	.LBB327:
 370:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 982               		.loc 3 370 0
 983 004c 9091 EE00 		lds r25,238
 984               	.LBE327:
 985               	.LBE326:
 272:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 986               		.loc 1 272 0
 987 0050 97FD      		sbrc r25,7
 988 0052 00C0      		rjmp .L106
 989               	.L108:
 990               	.LVL94:
 991               	.LBB328:
 992               	.LBB329:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 993               		.loc 3 270 0
 994 0054 8F70      		andi r24,lo8(15)
 995               	.LVL95:
 996 0056 8093 E900 		sts 233,r24
 997               	.L103:
 998               	.LBE329:
 999               	.LBE328:
 1000               	.LBE314:
 1001               	.LBE313:
 394:./tmk_core/protocol/lufa/lufa.c **** }
 1002               		.loc 1 394 0
 1003 005a 1092 0000 		sts console_flush,__zero_reg__
 1004               	.L99:
 1005               	/* epilogue start */
 395:./tmk_core/protocol/lufa/lufa.c **** 
 1006               		.loc 1 395 0
 1007 005e 0895      		ret
 1008               	.L109:
 1009               	.LBB340:
 1010               	.LBB339:
 1011               	.LBB330:
 1012               	.LBB321:
 1013               	.LBB320:
 1014               	.LBB319:
 240:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1015               		.loc 3 240 0
 1016 0060 80E8      		ldi r24,lo8(-128)
 1017 0062 00C0      		rjmp .L104
 1018               	.L107:
 1019               	.LVL96:
 1020               	.LBE319:
 1021               	.LBE320:
 1022               	.LBE321:
 1023               	.LBE330:
 1024               	.LBB331:
 1025               	.LBB332:
 1026               		.loc 3 554 0
 1027 0064 1092 F100 		sts 241,__zero_reg__
 1028               	.LVL97:
 1029               	.L106:
 1030               	.LBE332:
 1031               	.LBE331:
 1032               	.LBB333:
 1033               	.LBB334:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1034               		.loc 3 360 0
 1035 0068 9091 E800 		lds r25,232
 1036               	.LBE334:
 1037               	.LBE333:
 278:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 1038               		.loc 1 278 0
 1039 006c 95FD      		sbrc r25,5
 1040 006e 00C0      		rjmp .L107
 1041               	.LBB335:
 1042               	.LBB336:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1043               		.loc 3 407 0
 1044 0070 9091 E800 		lds r25,232
 1045               	.LBE336:
 1046               	.LBE335:
 282:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 1047               		.loc 1 282 0
 1048 0074 90FF      		sbrs r25,0
 1049 0076 00C0      		rjmp .L108
 1050               	.LBB337:
 1051               	.LBB338:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1052               		.loc 3 456 0
 1053 0078 9091 E800 		lds r25,232
 1054 007c 9E77      		andi r25,lo8(126)
 1055 007e 9093 E800 		sts 232,r25
 1056 0082 00C0      		rjmp .L108
 1057               	.LBE338:
 1058               	.LBE337:
 1059               	.LBE339:
 1060               	.LBE340:
 1061               		.cfi_endproc
 1062               	.LFE126:
 1064               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 1065               	.global	EVENT_USB_Device_ConfigurationChanged
 1067               	EVENT_USB_Device_ConfigurationChanged:
 1068               	.LFB127:
 407:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 1069               		.loc 1 407 0
 1070               		.cfi_startproc
 1071               	/* prologue: function */
 1072               	/* frame size = 0 */
 1073               	/* stack size = 0 */
 1074               	.L__stack_usage = 0
 1075               	.LVL98:
 1076               	.LBB341:
 1077               	.LBB342:
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 1078               		.loc 3 210 0
 1079 0000 42E0      		ldi r20,lo8(2)
 1080 0002 61EC      		ldi r22,lo8(-63)
 1081 0004 81E0      		ldi r24,lo8(1)
 1082 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 1083               	.LVL99:
 1084               	.LBE342:
 1085               	.LBE341:
 1086               	.LBB343:
 1087               	.LBB344:
 1088 000a 42E0      		ldi r20,lo8(2)
 1089 000c 61EC      		ldi r22,lo8(-63)
 1090 000e 82E0      		ldi r24,lo8(2)
 1091 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 1092               	.LVL100:
 1093               	.LBE344:
 1094               	.LBE343:
 1095               	.LBB345:
 1096               	.LBB346:
 1097 0014 42E0      		ldi r20,lo8(2)
 1098 0016 61EC      		ldi r22,lo8(-63)
 1099 0018 83E0      		ldi r24,lo8(3)
 1100 001a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 1101               	.LVL101:
 1102               	.LBE346:
 1103               	.LBE345:
 1104               	.LBB347:
 1105               	.LBB348:
 1106 001e 42E2      		ldi r20,lo8(34)
 1107 0020 61EC      		ldi r22,lo8(-63)
 1108 0022 84E0      		ldi r24,lo8(4)
 1109 0024 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 1110               	.LVL102:
 1111               	.LBE348:
 1112               	.LBE347:
 1113               		.cfi_endproc
 1114               	.LFE127:
 1116               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 1117               	.global	EVENT_USB_Device_ControlRequest
 1119               	EVENT_USB_Device_ControlRequest:
 1120               	.LFB128:
 480:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 1121               		.loc 1 480 0
 1122               		.cfi_startproc
 1123               	/* prologue: function */
 1124               	/* frame size = 0 */
 1125               	/* stack size = 0 */
 1126               	.L__stack_usage = 0
 1127               	.LVL103:
 485:./tmk_core/protocol/lufa/lufa.c ****     {
 1128               		.loc 1 485 0
 1129 0000 8091 0000 		lds r24,USB_ControlRequest+1
 1130 0004 8330      		cpi r24,lo8(3)
 1131 0006 01F4      		brne .+2
 1132 0008 00C0      		rjmp .L123
 1133 000a 00F4      		brsh .L124
 1134 000c 8130      		cpi r24,lo8(1)
 1135 000e 01F0      		breq .L125
 1136 0010 8230      		cpi r24,lo8(2)
 1137 0012 01F4      		brne .+2
 1138 0014 00C0      		rjmp .L126
 1139 0016 0895      		ret
 1140               	.L124:
 1141 0018 8A30      		cpi r24,lo8(10)
 1142 001a 01F4      		brne .+2
 1143 001c 00C0      		rjmp .L127
 1144 001e 8B30      		cpi r24,lo8(11)
 1145 0020 01F4      		brne .+2
 1146 0022 00C0      		rjmp .L128
 1147 0024 8930      		cpi r24,lo8(9)
 1148 0026 01F0      		breq .+2
 1149 0028 00C0      		rjmp .L121
 508:./tmk_core/protocol/lufa/lufa.c ****             {
 1150               		.loc 1 508 0
 1151 002a 8091 0000 		lds r24,USB_ControlRequest
 1152 002e 8132      		cpi r24,lo8(33)
 1153 0030 01F4      		brne .L121
 512:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 1154               		.loc 1 512 0
 1155 0032 8091 0000 		lds r24,USB_ControlRequest+4
 1156 0036 9091 0000 		lds r25,USB_ControlRequest+4+1
 1157 003a 892B      		or r24,r25
 1158 003c 01F4      		brne .L121
 1159               	.LBB349:
 1160               	.LBB350:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1161               		.loc 3 444 0
 1162 003e 8091 E800 		lds r24,232
 1163 0042 877F      		andi r24,lo8(-9)
 1164 0044 8093 E800 		sts 232,r24
 1165               	.L135:
 1166               	.LBE350:
 1167               	.LBE349:
 1168               	.LBB351:
 1169               	.LBB352:
 419:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1170               		.loc 3 419 0
 1171 0048 8091 E800 		lds r24,232
 1172               	.LBE352:
 1173               	.LBE351:
 519:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 1174               		.loc 1 519 0
 1175 004c 82FF      		sbrs r24,2
 1176 004e 00C0      		rjmp .L136
 1177               	.LBB353:
 1178               	.LBB354:
 542:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1179               		.loc 3 542 0
 1180 0050 8091 F100 		lds r24,241
 1181               	.LBE354:
 1182               	.LBE353:
 523:./tmk_core/protocol/lufa/lufa.c **** 
 1183               		.loc 1 523 0
 1184 0054 8093 0000 		sts keyboard_led_stats,r24
 1185               	.LBB355:
 1186               	.LBB356:
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1187               		.loc 3 471 0
 1188 0058 8091 E800 		lds r24,232
 1189 005c 8B77      		andi r24,lo8(123)
 1190               	.L148:
 1191               	.LBE356:
 1192               	.LBE355:
 1193               	.LBB357:
 1194               	.LBB358:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1195               		.loc 3 456 0
 1196 005e 8093 E800 		sts 232,r24
 1197               	.LBE358:
 1198               	.LBE357:
 577:./tmk_core/protocol/lufa/lufa.c ****             }
 1199               		.loc 1 577 0
 1200 0062 0C94 0000 		jmp Endpoint_ClearStatusStage
 1201               	.LVL104:
 1202               	.L125:
 488:./tmk_core/protocol/lufa/lufa.c ****             {
 1203               		.loc 1 488 0
 1204 0066 8091 0000 		lds r24,USB_ControlRequest
 1205 006a 813A      		cpi r24,lo8(-95)
 1206 006c 01F4      		brne .L121
 1207               	.LBB360:
 1208               	.LBB361:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1209               		.loc 3 444 0
 1210 006e 8091 E800 		lds r24,232
 1211 0072 877F      		andi r24,lo8(-9)
 1212 0074 8093 E800 		sts 232,r24
 1213               	.LBE361:
 1214               	.LBE360:
 493:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 1215               		.loc 1 493 0
 1216 0078 8091 0000 		lds r24,USB_ControlRequest+4
 1217 007c 9091 0000 		lds r25,USB_ControlRequest+4+1
 1218 0080 892B      		or r24,r25
 1219 0082 01F4      		brne .L147
 497:./tmk_core/protocol/lufa/lufa.c ****                     break;
 1220               		.loc 1 497 0
 1221 0084 68E0      		ldi r22,lo8(8)
 496:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 1222               		.loc 1 496 0
 1223 0086 80E0      		ldi r24,lo8(keyboard_report_sent)
 1224 0088 90E0      		ldi r25,hi8(keyboard_report_sent)
 1225               	.L131:
 1226               	.LVL105:
 502:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 1227               		.loc 1 502 0
 1228 008a 70E0      		ldi r23,0
 1229 008c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 1230               	.LVL106:
 1231               	.LBB362:
 1232               	.LBB363:
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1233               		.loc 3 471 0
 1234 0090 8091 E800 		lds r24,232
 1235 0094 8B77      		andi r24,lo8(123)
 1236 0096 8093 E800 		sts 232,r24
 1237 009a 0895      		ret
 1238               	.LVL107:
 1239               	.L147:
 1240               	.LBE363:
 1241               	.LBE362:
 482:./tmk_core/protocol/lufa/lufa.c **** 
 1242               		.loc 1 482 0
 1243 009c 60E0      		ldi r22,0
 481:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 1244               		.loc 1 481 0
 1245 009e 90E0      		ldi r25,0
 1246 00a0 80E0      		ldi r24,0
 1247 00a2 00C0      		rjmp .L131
 1248               	.L136:
 520:./tmk_core/protocol/lufa/lufa.c ****                           return;
 1249               		.loc 1 520 0
 1250 00a4 8091 0000 		lds r24,USB_DeviceState
 1251 00a8 8111      		cpse r24,__zero_reg__
 1252 00aa 00C0      		rjmp .L135
 1253               	.L121:
 1254               	/* epilogue start */
 586:./tmk_core/protocol/lufa/lufa.c **** 
 1255               		.loc 1 586 0
 1256 00ac 0895      		ret
 1257               	.L123:
 535:./tmk_core/protocol/lufa/lufa.c ****             {
 1258               		.loc 1 535 0
 1259 00ae 8091 0000 		lds r24,USB_ControlRequest
 1260 00b2 813A      		cpi r24,lo8(-95)
 1261 00b4 01F4      		brne .L121
 537:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1262               		.loc 1 537 0
 1263 00b6 8091 0000 		lds r24,USB_ControlRequest+4
 1264 00ba 9091 0000 		lds r25,USB_ControlRequest+4+1
 1265 00be 892B      		or r24,r25
 1266 00c0 01F4      		brne .L121
 1267               	.LBB364:
 1268               	.LBB365:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1269               		.loc 3 444 0
 1270 00c2 8091 E800 		lds r24,232
 1271 00c6 877F      		andi r24,lo8(-9)
 1272 00c8 8093 E800 		sts 232,r24
 1273               	.L137:
 1274               	.LBE365:
 1275               	.LBE364:
 1276               	.LBB366:
 1277               	.LBB367:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1278               		.loc 3 407 0 discriminator 1
 1279 00cc 8091 E800 		lds r24,232
 1280               	.LBE367:
 1281               	.LBE366:
 539:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 1282               		.loc 1 539 0 discriminator 1
 1283 00d0 80FF      		sbrs r24,0
 1284 00d2 00C0      		rjmp .L137
 540:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 1285               		.loc 1 540 0
 1286 00d4 8091 0000 		lds r24,keyboard_protocol
 1287               	.LVL108:
 1288               	.L149:
 1289               	.LBB368:
 1290               	.LBB369:
 1291               		.loc 3 554 0
 1292 00d8 8093 F100 		sts 241,r24
 1293               	.LVL109:
 1294               	.LBE369:
 1295               	.LBE368:
 1296               	.LBB370:
 1297               	.LBB359:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1298               		.loc 3 456 0
 1299 00dc 8091 E800 		lds r24,232
 1300 00e0 8E77      		andi r24,lo8(126)
 1301 00e2 00C0      		rjmp .L148
 1302               	.L128:
 1303               	.LBE359:
 1304               	.LBE370:
 548:./tmk_core/protocol/lufa/lufa.c ****             {
 1305               		.loc 1 548 0
 1306 00e4 8091 0000 		lds r24,USB_ControlRequest
 1307 00e8 8132      		cpi r24,lo8(33)
 1308 00ea 01F4      		brne .L121
 550:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1309               		.loc 1 550 0
 1310 00ec 8091 0000 		lds r24,USB_ControlRequest+4
 1311 00f0 9091 0000 		lds r25,USB_ControlRequest+4+1
 1312 00f4 892B      		or r24,r25
 1313 00f6 01F4      		brne .L121
 1314               	.LBB371:
 1315               	.LBB372:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1316               		.loc 3 444 0
 1317 00f8 8091 E800 		lds r24,232
 1318 00fc 877F      		andi r24,lo8(-9)
 1319 00fe 8093 E800 		sts 232,r24
 1320               	.LBE372:
 1321               	.LBE371:
 552:./tmk_core/protocol/lufa/lufa.c **** 
 1322               		.loc 1 552 0
 1323 0102 0E94 0000 		call Endpoint_ClearStatusStage
 1324               	.LVL110:
 554:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 1325               		.loc 1 554 0
 1326 0106 8091 0000 		lds r24,USB_ControlRequest+2
 1327 010a 8093 0000 		sts keyboard_protocol,r24
 555:./tmk_core/protocol/lufa/lufa.c ****                 }
 1328               		.loc 1 555 0
 1329 010e 0C94 0000 		jmp clear_keyboard
 1330               	.LVL111:
 1331               	.L127:
 561:./tmk_core/protocol/lufa/lufa.c ****             {
 1332               		.loc 1 561 0
 1333 0112 8091 0000 		lds r24,USB_ControlRequest
 1334 0116 8132      		cpi r24,lo8(33)
 1335 0118 01F4      		brne .L121
 1336               	.LBB373:
 1337               	.LBB374:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1338               		.loc 3 444 0
 1339 011a 8091 E800 		lds r24,232
 1340 011e 877F      		andi r24,lo8(-9)
 1341 0120 8093 E800 		sts 232,r24
 1342               	.LBE374:
 1343               	.LBE373:
 564:./tmk_core/protocol/lufa/lufa.c **** 
 1344               		.loc 1 564 0
 1345 0124 0E94 0000 		call Endpoint_ClearStatusStage
 1346               	.LVL112:
 566:./tmk_core/protocol/lufa/lufa.c ****             }
 1347               		.loc 1 566 0
 1348 0128 8091 0000 		lds r24,USB_ControlRequest+3
 1349 012c 8093 0000 		sts keyboard_idle,r24
 1350 0130 0895      		ret
 1351               	.L126:
 571:./tmk_core/protocol/lufa/lufa.c ****             {
 1352               		.loc 1 571 0
 1353 0132 8091 0000 		lds r24,USB_ControlRequest
 1354 0136 813A      		cpi r24,lo8(-95)
 1355 0138 01F0      		breq .+2
 1356 013a 00C0      		rjmp .L121
 1357               	.LBB375:
 1358               	.LBB376:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1359               		.loc 3 444 0
 1360 013c 8091 E800 		lds r24,232
 1361 0140 877F      		andi r24,lo8(-9)
 1362 0142 8093 E800 		sts 232,r24
 1363               	.L138:
 1364               	.LBE376:
 1365               	.LBE375:
 1366               	.LBB377:
 1367               	.LBB378:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1368               		.loc 3 407 0 discriminator 1
 1369 0146 8091 E800 		lds r24,232
 1370               	.LBE378:
 1371               	.LBE377:
 574:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 1372               		.loc 1 574 0 discriminator 1
 1373 014a 80FF      		sbrs r24,0
 1374 014c 00C0      		rjmp .L138
 575:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 1375               		.loc 1 575 0
 1376 014e 8091 0000 		lds r24,keyboard_idle
 1377 0152 00C0      		rjmp .L149
 1378               		.cfi_endproc
 1379               	.LFE128:
 1381               		.section	.text.startup.main,"ax",@progbits
 1382               		.weak	main
 1384               	main:
 1385               	.LFB137:
 864:./tmk_core/protocol/lufa/lufa.c **** #else
 865:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 866:./tmk_core/protocol/lufa/lufa.c **** {
 867:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 868:./tmk_core/protocol/lufa/lufa.c **** }
 869:./tmk_core/protocol/lufa/lufa.c **** #endif
 870:./tmk_core/protocol/lufa/lufa.c **** 
 871:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 872:./tmk_core/protocol/lufa/lufa.c ****  * MIDI
 873:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 874:./tmk_core/protocol/lufa/lufa.c **** 
 875:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 876:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 877:./tmk_core/protocol/lufa/lufa.c **** {
 878:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 879:./tmk_core/protocol/lufa/lufa.c ****   {
 880:./tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 881:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 882:./tmk_core/protocol/lufa/lufa.c ****     {
 883:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 884:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 885:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 886:./tmk_core/protocol/lufa/lufa.c ****     },
 887:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 888:./tmk_core/protocol/lufa/lufa.c ****     {
 889:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 890:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 891:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 892:./tmk_core/protocol/lufa/lufa.c ****     },
 893:./tmk_core/protocol/lufa/lufa.c ****   },
 894:./tmk_core/protocol/lufa/lufa.c **** };
 895:./tmk_core/protocol/lufa/lufa.c **** 
 896:./tmk_core/protocol/lufa/lufa.c **** void send_midi_packet(MIDI_EventPacket_t* event) {
 897:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, event);
 898:./tmk_core/protocol/lufa/lufa.c **** }
 899:./tmk_core/protocol/lufa/lufa.c **** 
 900:./tmk_core/protocol/lufa/lufa.c **** bool recv_midi_packet(MIDI_EventPacket_t* const event) {
 901:./tmk_core/protocol/lufa/lufa.c ****   return MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, event);
 902:./tmk_core/protocol/lufa/lufa.c **** }
 903:./tmk_core/protocol/lufa/lufa.c **** 
 904:./tmk_core/protocol/lufa/lufa.c **** #endif
 905:./tmk_core/protocol/lufa/lufa.c **** 
 906:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 907:./tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
 908:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 909:./tmk_core/protocol/lufa/lufa.c **** 
 910:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 911:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Init
 912:./tmk_core/protocol/lufa/lufa.c ****  *
 913:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 914:./tmk_core/protocol/lufa/lufa.c ****  */
 915:./tmk_core/protocol/lufa/lufa.c **** void virtser_init(void)
 916:./tmk_core/protocol/lufa/lufa.c **** {
 917:./tmk_core/protocol/lufa/lufa.c ****   cdc_device.State.ControlLineStates.DeviceToHost = CDC_CONTROL_LINE_IN_DSR ;
 918:./tmk_core/protocol/lufa/lufa.c ****   CDC_Device_SendControlLineStateChange(&cdc_device);
 919:./tmk_core/protocol/lufa/lufa.c **** }
 920:./tmk_core/protocol/lufa/lufa.c **** 
 921:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Receive
 922:./tmk_core/protocol/lufa/lufa.c ****  *
 923:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 924:./tmk_core/protocol/lufa/lufa.c ****  */
 925:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) __attribute__ ((weak));
 926:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c)
 927:./tmk_core/protocol/lufa/lufa.c **** {
 928:./tmk_core/protocol/lufa/lufa.c ****   // Ignore by default
 929:./tmk_core/protocol/lufa/lufa.c **** }
 930:./tmk_core/protocol/lufa/lufa.c **** 
 931:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Task
 932:./tmk_core/protocol/lufa/lufa.c ****  *
 933:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 934:./tmk_core/protocol/lufa/lufa.c ****  */
 935:./tmk_core/protocol/lufa/lufa.c **** void virtser_task(void)
 936:./tmk_core/protocol/lufa/lufa.c **** {
 937:./tmk_core/protocol/lufa/lufa.c ****   uint16_t count = CDC_Device_BytesReceived(&cdc_device);
 938:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ch;
 939:./tmk_core/protocol/lufa/lufa.c ****   if (count)
 940:./tmk_core/protocol/lufa/lufa.c ****   {
 941:./tmk_core/protocol/lufa/lufa.c ****     ch = CDC_Device_ReceiveByte(&cdc_device);
 942:./tmk_core/protocol/lufa/lufa.c ****     virtser_recv(ch);
 943:./tmk_core/protocol/lufa/lufa.c ****   }
 944:./tmk_core/protocol/lufa/lufa.c **** }
 945:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Send
 946:./tmk_core/protocol/lufa/lufa.c ****  *
 947:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 948:./tmk_core/protocol/lufa/lufa.c ****  */
 949:./tmk_core/protocol/lufa/lufa.c **** void virtser_send(const uint8_t byte)
 950:./tmk_core/protocol/lufa/lufa.c **** {
 951:./tmk_core/protocol/lufa/lufa.c ****   uint8_t timeout = 255;
 952:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ep = Endpoint_GetCurrentEndpoint();
 953:./tmk_core/protocol/lufa/lufa.c **** 
 954:./tmk_core/protocol/lufa/lufa.c ****   if (cdc_device.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR)
 955:./tmk_core/protocol/lufa/lufa.c ****   {
 956:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 957:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(cdc_device.Config.DataINEndpoint.Address);
 958:./tmk_core/protocol/lufa/lufa.c **** 
 959:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 960:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 961:./tmk_core/protocol/lufa/lufa.c ****         return;
 962:./tmk_core/protocol/lufa/lufa.c ****     }
 963:./tmk_core/protocol/lufa/lufa.c **** 
 964:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 965:./tmk_core/protocol/lufa/lufa.c **** 
 966:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(byte);
 967:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_Flush(&cdc_device);
 968:./tmk_core/protocol/lufa/lufa.c **** 
 969:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 970:./tmk_core/protocol/lufa/lufa.c ****       Endpoint_ClearIN();
 971:./tmk_core/protocol/lufa/lufa.c ****     }
 972:./tmk_core/protocol/lufa/lufa.c **** 
 973:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 974:./tmk_core/protocol/lufa/lufa.c ****   }
 975:./tmk_core/protocol/lufa/lufa.c **** }
 976:./tmk_core/protocol/lufa/lufa.c **** #endif
 977:./tmk_core/protocol/lufa/lufa.c **** 
 978:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 979:./tmk_core/protocol/lufa/lufa.c ****  * main
 980:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 981:./tmk_core/protocol/lufa/lufa.c **** /** \brief Setup MCU
 982:./tmk_core/protocol/lufa/lufa.c ****  *
 983:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 984:./tmk_core/protocol/lufa/lufa.c ****  */
 985:./tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
 986:./tmk_core/protocol/lufa/lufa.c **** {
 987:./tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 988:./tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 989:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 990:./tmk_core/protocol/lufa/lufa.c **** 
 991:./tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
 992:./tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
 993:./tmk_core/protocol/lufa/lufa.c **** 
 994:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
 995:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 996:./tmk_core/protocol/lufa/lufa.c **** }
 997:./tmk_core/protocol/lufa/lufa.c **** 
 998:./tmk_core/protocol/lufa/lufa.c **** /** \brief Setup USB
 999:./tmk_core/protocol/lufa/lufa.c ****  *
1000:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1001:./tmk_core/protocol/lufa/lufa.c ****  */
1002:./tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
1003:./tmk_core/protocol/lufa/lufa.c **** {
1004:./tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
1005:./tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
1006:./tmk_core/protocol/lufa/lufa.c **** 
1007:./tmk_core/protocol/lufa/lufa.c ****     USB_Init();
1008:./tmk_core/protocol/lufa/lufa.c **** 
1009:./tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
1010:./tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
1011:./tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
1012:./tmk_core/protocol/lufa/lufa.c **** }
1013:./tmk_core/protocol/lufa/lufa.c **** 
1014:./tmk_core/protocol/lufa/lufa.c **** /** \brief Main
1015:./tmk_core/protocol/lufa/lufa.c ****  *
1016:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1017:./tmk_core/protocol/lufa/lufa.c ****  */
1018:./tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
1019:./tmk_core/protocol/lufa/lufa.c **** int main(void)
1020:./tmk_core/protocol/lufa/lufa.c **** {
 1386               		.loc 1 1020 0
 1387               		.cfi_startproc
 1388               	/* prologue: function */
 1389               	/* frame size = 0 */
 1390               	/* stack size = 0 */
 1391               	.L__stack_usage = 0
 1392               	.LBB390:
 1393               	.LBB391:
 988:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1394               		.loc 1 988 0
 1395 0000 84B7      		in r24,0x34
 1396 0002 877F      		andi r24,lo8(-9)
 1397 0004 84BF      		out 0x34,r24
 1398               	.LBB392:
 1399               	.LBB393:
 1400               		.file 6 "/usr/avr/include/avr/wdt.h"
   1:/usr/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/avr/include/avr/wdt.h **** 
   5:/usr/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/avr/include/avr/wdt.h **** 
   8:/usr/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/avr/include/avr/wdt.h **** 
  11:/usr/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/avr/include/avr/wdt.h ****      distribution.
  15:/usr/avr/include/avr/wdt.h **** 
  16:/usr/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/avr/include/avr/wdt.h **** 
  20:/usr/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/avr/include/avr/wdt.h **** 
  32:/usr/avr/include/avr/wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:/usr/avr/include/avr/wdt.h **** 
  34:/usr/avr/include/avr/wdt.h **** /*
  35:/usr/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/avr/include/avr/wdt.h ****  */
  37:/usr/avr/include/avr/wdt.h **** 
  38:/usr/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/avr/include/avr/wdt.h **** 
  41:/usr/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/avr/include/avr/wdt.h **** 
  44:/usr/avr/include/avr/wdt.h **** /** \file */
  45:/usr/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/avr/include/avr/wdt.h **** 
  48:/usr/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/avr/include/avr/wdt.h **** 
  57:/usr/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/avr/include/avr/wdt.h **** 
  61:/usr/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/avr/include/avr/wdt.h ****     the following:
  68:/usr/avr/include/avr/wdt.h **** 
  69:/usr/avr/include/avr/wdt.h ****     \code
  70:/usr/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/avr/include/avr/wdt.h **** 
  73:/usr/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/avr/include/avr/wdt.h **** 
  75:/usr/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/avr/include/avr/wdt.h ****     {
  80:/usr/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/avr/include/avr/wdt.h ****     }
  84:/usr/avr/include/avr/wdt.h ****     \endcode
  85:/usr/avr/include/avr/wdt.h **** 
  86:/usr/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/avr/include/avr/wdt.h **** */
  91:/usr/avr/include/avr/wdt.h **** 
  92:/usr/avr/include/avr/wdt.h **** /**
  93:/usr/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/avr/include/avr/wdt.h **** */
  98:/usr/avr/include/avr/wdt.h **** 
  99:/usr/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/avr/include/avr/wdt.h **** 
 101:/usr/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/avr/include/avr/wdt.h **** 
 103:/usr/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/avr/include/avr/wdt.h **** #else
 106:/usr/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/avr/include/avr/wdt.h **** #endif
 108:/usr/avr/include/avr/wdt.h **** 
 109:/usr/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/avr/include/avr/wdt.h **** #else
 114:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/avr/include/avr/wdt.h **** #endif
 116:/usr/avr/include/avr/wdt.h **** 
 117:/usr/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/avr/include/avr/wdt.h **** #else
 120:/usr/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/avr/include/avr/wdt.h **** #endif
 122:/usr/avr/include/avr/wdt.h **** 
 123:/usr/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/avr/include/avr/wdt.h **** 
 125:/usr/avr/include/avr/wdt.h **** 
 126:/usr/avr/include/avr/wdt.h **** /**
 127:/usr/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/avr/include/avr/wdt.h **** 
 134:/usr/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/avr/include/avr/wdt.h **** */
 136:/usr/avr/include/avr/wdt.h **** 
 137:/usr/avr/include/avr/wdt.h **** 
 138:/usr/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/avr/include/avr/wdt.h **** 
 140:/usr/avr/include/avr/wdt.h **** /*
 141:/usr/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 142:/usr/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:/usr/avr/include/avr/wdt.h ****    registers to the CCP register
 144:/usr/avr/include/avr/wdt.h **** ** At the same time,
 145:/usr/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:/usr/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:/usr/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 148:/usr/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:/usr/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:/usr/avr/include/avr/wdt.h ****    sync is finished).
 151:/usr/avr/include/avr/wdt.h **** */
 152:/usr/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 153:/usr/avr/include/avr/wdt.h **** do { \
 154:/usr/avr/include/avr/wdt.h **** uint8_t temp; \
 155:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 156:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:/usr/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:/usr/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:/usr/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:/usr/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:/usr/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:/usr/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 165:/usr/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:/usr/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:/usr/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:/usr/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:/usr/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:/usr/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:/usr/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:/usr/avr/include/avr/wdt.h ****     : "r0" \
 173:/usr/avr/include/avr/wdt.h **** ); \
 174:/usr/avr/include/avr/wdt.h **** } while(0)
 175:/usr/avr/include/avr/wdt.h **** 
 176:/usr/avr/include/avr/wdt.h **** #define wdt_disable() \
 177:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 178:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:/usr/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:/usr/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:/usr/avr/include/avr/wdt.h ****     : \
 184:/usr/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:/usr/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:/usr/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:/usr/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:/usr/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:/usr/avr/include/avr/wdt.h ****     : "r0" \
 190:/usr/avr/include/avr/wdt.h **** );
 191:/usr/avr/include/avr/wdt.h **** 
 192:/usr/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 193:/usr/avr/include/avr/wdt.h **** 
 194:/usr/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 195:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 196:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:/usr/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 198:/usr/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 199:/usr/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:/usr/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:/usr/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:/usr/avr/include/avr/wdt.h ****     : /* no outputs */  \
 203:/usr/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:/usr/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:/usr/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:/usr/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:/usr/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:/usr/avr/include/avr/wdt.h ****     : "r16" \
 209:/usr/avr/include/avr/wdt.h **** )
 210:/usr/avr/include/avr/wdt.h **** 
 211:/usr/avr/include/avr/wdt.h **** #define wdt_disable() \
 212:/usr/avr/include/avr/wdt.h **** do { \
 213:/usr/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 214:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 215:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:/usr/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 217:/usr/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 218:/usr/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:/usr/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:/usr/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:/usr/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:/usr/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:/usr/avr/include/avr/wdt.h ****     : /*no output */ \
 224:/usr/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:/usr/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:/usr/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:/usr/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:/usr/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:/usr/avr/include/avr/wdt.h ****     : "r16" \
 230:/usr/avr/include/avr/wdt.h **** ); \
 231:/usr/avr/include/avr/wdt.h **** }while(0)
 232:/usr/avr/include/avr/wdt.h **** 
 233:/usr/avr/include/avr/wdt.h **** #elif defined(CCP)
 234:/usr/avr/include/avr/wdt.h **** 
 235:/usr/avr/include/avr/wdt.h **** static __inline__
 236:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 237:/usr/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 238:/usr/avr/include/avr/wdt.h **** {
 239:/usr/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:/usr/avr/include/avr/wdt.h **** 	{
 241:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 242:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 244:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 245:/usr/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:/usr/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 249:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:/usr/avr/include/avr/wdt.h **** 			: "r0"
 255:/usr/avr/include/avr/wdt.h **** 			);
 256:/usr/avr/include/avr/wdt.h **** 	}
 257:/usr/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:/usr/avr/include/avr/wdt.h **** 	{
 259:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 260:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 262:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 263:/usr/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:/usr/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 267:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:/usr/avr/include/avr/wdt.h **** 			: "r0"
 273:/usr/avr/include/avr/wdt.h **** 			);
 274:/usr/avr/include/avr/wdt.h **** 	}
 275:/usr/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:/usr/avr/include/avr/wdt.h **** 	{
 277:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 278:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 280:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 281:/usr/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:/usr/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 285:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:/usr/avr/include/avr/wdt.h **** 			: "r0"
 291:/usr/avr/include/avr/wdt.h **** 			);
 292:/usr/avr/include/avr/wdt.h **** 	}
 293:/usr/avr/include/avr/wdt.h **** 	else
 294:/usr/avr/include/avr/wdt.h ****  	{
 295:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 296:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 298:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 299:/usr/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:/usr/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 303:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:/usr/avr/include/avr/wdt.h **** 			: "r0"
 309:/usr/avr/include/avr/wdt.h **** 			);
 310:/usr/avr/include/avr/wdt.h **** 	}
 311:/usr/avr/include/avr/wdt.h **** }
 312:/usr/avr/include/avr/wdt.h **** 
 313:/usr/avr/include/avr/wdt.h **** static __inline__
 314:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 315:/usr/avr/include/avr/wdt.h **** void wdt_disable (void)
 316:/usr/avr/include/avr/wdt.h **** {
 317:/usr/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:/usr/avr/include/avr/wdt.h **** 	{
 319:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 320:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 321:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 323:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 324:/usr/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:/usr/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:/usr/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 330:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:/usr/avr/include/avr/wdt.h **** 				: "r0"
 336:/usr/avr/include/avr/wdt.h **** 				);
 337:/usr/avr/include/avr/wdt.h **** 	}
 338:/usr/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:/usr/avr/include/avr/wdt.h **** 	{
 340:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 341:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 342:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 344:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 345:/usr/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:/usr/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 351:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:/usr/avr/include/avr/wdt.h **** 				: "r0"
 357:/usr/avr/include/avr/wdt.h **** 				);
 358:/usr/avr/include/avr/wdt.h **** 	}
 359:/usr/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:/usr/avr/include/avr/wdt.h **** 	{
 361:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 362:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 363:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 365:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 366:/usr/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:/usr/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:/usr/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 372:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:/usr/avr/include/avr/wdt.h **** 				: "r0"
 378:/usr/avr/include/avr/wdt.h **** 				);
 379:/usr/avr/include/avr/wdt.h **** 	}
 380:/usr/avr/include/avr/wdt.h **** 	else
 381:/usr/avr/include/avr/wdt.h **** 	{
 382:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 383:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 384:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 386:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 387:/usr/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:/usr/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 393:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:/usr/avr/include/avr/wdt.h **** 				: "r0"
 399:/usr/avr/include/avr/wdt.h **** 				);
 400:/usr/avr/include/avr/wdt.h **** 	}
 401:/usr/avr/include/avr/wdt.h **** }
 402:/usr/avr/include/avr/wdt.h **** 
 403:/usr/avr/include/avr/wdt.h **** #else
 404:/usr/avr/include/avr/wdt.h **** 
 405:/usr/avr/include/avr/wdt.h **** static __inline__
 406:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 407:/usr/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 408:/usr/avr/include/avr/wdt.h **** {
 409:/usr/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:/usr/avr/include/avr/wdt.h **** 	{
 411:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 412:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 414:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 415:/usr/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 416:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:/usr/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 418:/usr/avr/include/avr/wdt.h **** 				: /* no outputs */
 419:/usr/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:/usr/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:/usr/avr/include/avr/wdt.h **** 				: "r0"
 424:/usr/avr/include/avr/wdt.h **** 		);
 425:/usr/avr/include/avr/wdt.h **** 	}
 426:/usr/avr/include/avr/wdt.h **** 	else
 427:/usr/avr/include/avr/wdt.h **** 	{
 428:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 429:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 433:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:/usr/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 435:/usr/avr/include/avr/wdt.h **** 				: /* no outputs */
 436:/usr/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:/usr/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:/usr/avr/include/avr/wdt.h **** 				: "r0"
 441:/usr/avr/include/avr/wdt.h **** 		);
 442:/usr/avr/include/avr/wdt.h **** 	}
 443:/usr/avr/include/avr/wdt.h **** }
 444:/usr/avr/include/avr/wdt.h **** 
 445:/usr/avr/include/avr/wdt.h **** static __inline__
 446:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 447:/usr/avr/include/avr/wdt.h **** void wdt_disable (void)
 448:/usr/avr/include/avr/wdt.h **** {
 449:/usr/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 450:/usr/avr/include/avr/wdt.h **** 	{
 451:/usr/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 452:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 453:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:/usr/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 455:/usr/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 456:/usr/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:/usr/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:/usr/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:/usr/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:/usr/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:/usr/avr/include/avr/wdt.h **** 				: "r0"
 465:/usr/avr/include/avr/wdt.h **** 		);
 466:/usr/avr/include/avr/wdt.h **** 	}
 467:/usr/avr/include/avr/wdt.h **** 	else
 468:/usr/avr/include/avr/wdt.h **** 	{
 469:/usr/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 470:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 1401               		.loc 6 470 0
 1402               	/* #APP */
 1403               	 ;  470 "/usr/avr/include/avr/wdt.h" 1
 1404 0006 0FB6      		in __tmp_reg__,__SREG__
 1405 0008 F894      		cli
 1406 000a A895      		wdr
 1407 000c 8091 6000 		lds r24,96
 1408 0010 8861      		ori r24,24
 1409 0012 8093 6000 		sts 96,r24
 1410 0016 1092 6000 		sts 96,__zero_reg__
 1411 001a 0FBE      		out __SREG__,__tmp_reg__
 1412               		
 1413               	 ;  0 "" 2
 1414               	/* #NOAPP */
 1415               	.LBE393:
 1416               	.LBE392:
 994:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1417               		.loc 1 994 0
 1418 001c 80E8      		ldi r24,lo8(-128)
 1419 001e 8093 6100 		sts 97,r24
 995:./tmk_core/protocol/lufa/lufa.c **** }
 1420               		.loc 1 995 0
 1421 0022 1092 6100 		sts 97,__zero_reg__
 1422               	.LBE391:
 1423               	.LBE390:
1021:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1022:./tmk_core/protocol/lufa/lufa.c ****     setup_midi();
1023:./tmk_core/protocol/lufa/lufa.c **** #endif
1024:./tmk_core/protocol/lufa/lufa.c **** 
1025:./tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
1026:./tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 1424               		.loc 1 1026 0
 1425 0026 0E94 0000 		call keyboard_setup
 1426               	.LVL113:
 1427               	.LBB394:
 1428               	.LBB395:
1005:./tmk_core/protocol/lufa/lufa.c **** 
 1429               		.loc 1 1005 0
 1430 002a 0E94 0000 		call USB_Disable
 1431               	.LVL114:
1007:./tmk_core/protocol/lufa/lufa.c **** 
 1432               		.loc 1 1007 0
 1433 002e 0E94 0000 		call USB_Init
 1434               	.LVL115:
 1435               	.LBB396:
 1436               	.LBB397:
 1437               	.LBB398:
 1438               		.loc 5 113 0
 1439 0032 8091 E200 		lds r24,226
 1440 0036 8460      		ori r24,lo8(4)
 1441 0038 8093 E200 		sts 226,r24
 1442               	.LVL116:
 1443               	.LBE398:
 1444               	.LBE397:
 1445               	.LBE396:
1011:./tmk_core/protocol/lufa/lufa.c **** }
 1446               		.loc 1 1011 0
 1447 003c 80E0      		ldi r24,lo8(gs(sendchar))
 1448 003e 90E0      		ldi r25,hi8(gs(sendchar))
 1449 0040 0E94 0000 		call print_set_sendchar
 1450               	.LVL117:
 1451               	.LBE395:
 1452               	.LBE394:
1027:./tmk_core/protocol/lufa/lufa.c ****     setup_usb();
1028:./tmk_core/protocol/lufa/lufa.c ****     sei();
 1453               		.loc 1 1028 0
 1454               	/* #APP */
 1455               	 ;  1028 "./tmk_core/protocol/lufa/lufa.c" 1
 1456 0044 7894      		sei
 1457               	 ;  0 "" 2
1029:./tmk_core/protocol/lufa/lufa.c **** 
1030:./tmk_core/protocol/lufa/lufa.c **** #if defined(MODULE_ADAFRUIT_EZKEY) || defined(MODULE_RN42)
1031:./tmk_core/protocol/lufa/lufa.c ****     serial_init();
1032:./tmk_core/protocol/lufa/lufa.c **** #endif
1033:./tmk_core/protocol/lufa/lufa.c **** 
1034:./tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
1035:./tmk_core/protocol/lufa/lufa.c **** 
1036:./tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
1037:./tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
1038:./tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
1039:./tmk_core/protocol/lufa/lufa.c ****             ;
1040:./tmk_core/protocol/lufa/lufa.c ****     #else
1041:./tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
1042:./tmk_core/protocol/lufa/lufa.c ****     #endif
1043:./tmk_core/protocol/lufa/lufa.c ****     }
1044:./tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
1045:./tmk_core/protocol/lufa/lufa.c **** #else
1046:./tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 1458               		.loc 1 1046 0
 1459               	/* #NOAPP */
 1460 0046 0E94 0000 		call USB_USBTask
 1461               	.LVL118:
1047:./tmk_core/protocol/lufa/lufa.c **** #endif
1048:./tmk_core/protocol/lufa/lufa.c ****     /* init modules */
1049:./tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 1462               		.loc 1 1049 0
 1463 004a 0E94 0000 		call keyboard_init
 1464               	.LVL119:
1050:./tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1465               		.loc 1 1050 0
 1466 004e 80E0      		ldi r24,lo8(lufa_driver)
 1467 0050 90E0      		ldi r25,hi8(lufa_driver)
 1468 0052 0E94 0000 		call host_set_driver
 1469               	.LVL120:
1051:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
1052:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
1053:./tmk_core/protocol/lufa/lufa.c **** #endif
1054:./tmk_core/protocol/lufa/lufa.c **** 
1055:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1056:./tmk_core/protocol/lufa/lufa.c ****     virtser_init();
1057:./tmk_core/protocol/lufa/lufa.c **** #endif
1058:./tmk_core/protocol/lufa/lufa.c **** 
1059:./tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
 1470               		.loc 1 1059 0
 1471 0056 80E0      		ldi r24,lo8(__c.5675)
 1472 0058 90E0      		ldi r25,hi8(__c.5675)
 1473 005a 0E94 0000 		call xputs
 1474               	.LVL121:
 1475               	.L151:
1060:./tmk_core/protocol/lufa/lufa.c ****     while (1) {
1061:./tmk_core/protocol/lufa/lufa.c ****         #if !defined(NO_USB_STARTUP_CHECK)
1062:./tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1476               		.loc 1 1062 0
 1477 005e 8091 0000 		lds r24,USB_DeviceState
 1478 0062 8530      		cpi r24,lo8(5)
 1479 0064 01F0      		breq .L155
1063:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
1064:./tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
1065:./tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
1066:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
1067:./tmk_core/protocol/lufa/lufa.c ****             }
1068:./tmk_core/protocol/lufa/lufa.c ****         }
1069:./tmk_core/protocol/lufa/lufa.c ****         #endif
1070:./tmk_core/protocol/lufa/lufa.c **** 
1071:./tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 1480               		.loc 1 1071 0
 1481 0066 0E94 0000 		call keyboard_task
 1482               	.LVL122:
1062:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 1483               		.loc 1 1062 0
 1484 006a 00C0      		rjmp .L151
 1485               	.L155:
1063:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 1486               		.loc 1 1063 0
 1487 006c 80E0      		ldi r24,lo8(__c.5677)
 1488 006e 90E0      		ldi r25,hi8(__c.5677)
 1489 0070 0E94 0000 		call xputs
 1490               	.LVL123:
1064:./tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1491               		.loc 1 1064 0
 1492 0074 0E94 0000 		call suspend_power_down
 1493               	.LVL124:
1065:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1494               		.loc 1 1065 0
 1495 0078 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1496 007c 8823      		tst r24
 1497 007e 01F0      		breq .L151
1065:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1498               		.loc 1 1065 0 is_stmt 0 discriminator 1
 1499 0080 0E94 0000 		call suspend_wakeup_condition
 1500               	.LVL125:
 1501 0084 8823      		tst r24
 1502 0086 01F0      		breq .L151
1066:./tmk_core/protocol/lufa/lufa.c ****             }
 1503               		.loc 1 1066 0 is_stmt 1
 1504 0088 0E94 0000 		call USB_Device_SendRemoteWakeup
 1505               	.LVL126:
 1506 008c 00C0      		rjmp .L151
 1507               		.cfi_endproc
 1508               	.LFE137:
 1510               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
 1511               	.global	CALLBACK_USB_GetDescriptor
 1513               	CALLBACK_USB_GetDescriptor:
 1514               	.LFB138:
1072:./tmk_core/protocol/lufa/lufa.c **** 
1073:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1074:./tmk_core/protocol/lufa/lufa.c ****         MIDI_Device_USBTask(&USB_MIDI_Interface);
1075:./tmk_core/protocol/lufa/lufa.c **** #endif
1076:./tmk_core/protocol/lufa/lufa.c **** 
1077:./tmk_core/protocol/lufa/lufa.c **** #if defined(RGBLIGHT_ANIMATIONS) & defined(RGBLIGHT_ENABLE)
1078:./tmk_core/protocol/lufa/lufa.c ****         rgblight_task();
1079:./tmk_core/protocol/lufa/lufa.c **** #endif
1080:./tmk_core/protocol/lufa/lufa.c **** 
1081:./tmk_core/protocol/lufa/lufa.c **** #ifdef MODULE_ADAFRUIT_BLE
1082:./tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_task();
1083:./tmk_core/protocol/lufa/lufa.c **** #endif
1084:./tmk_core/protocol/lufa/lufa.c **** 
1085:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1086:./tmk_core/protocol/lufa/lufa.c ****         virtser_task();
1087:./tmk_core/protocol/lufa/lufa.c ****         CDC_Device_USBTask(&cdc_device);
1088:./tmk_core/protocol/lufa/lufa.c **** #endif
1089:./tmk_core/protocol/lufa/lufa.c **** 
1090:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
1091:./tmk_core/protocol/lufa/lufa.c ****         raw_hid_task();
1092:./tmk_core/protocol/lufa/lufa.c **** #endif
1093:./tmk_core/protocol/lufa/lufa.c **** 
1094:./tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
1095:./tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
1096:./tmk_core/protocol/lufa/lufa.c **** #endif
1097:./tmk_core/protocol/lufa/lufa.c **** 
1098:./tmk_core/protocol/lufa/lufa.c ****     }
1099:./tmk_core/protocol/lufa/lufa.c **** }
1100:./tmk_core/protocol/lufa/lufa.c **** 
1101:./tmk_core/protocol/lufa/lufa.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
1102:./tmk_core/protocol/lufa/lufa.c ****                                     const uint16_t wIndex,
1103:./tmk_core/protocol/lufa/lufa.c ****                                     const void** const DescriptorAddress)
1104:./tmk_core/protocol/lufa/lufa.c **** {
 1515               		.loc 1 1104 0
 1516               		.cfi_startproc
 1517               	.LVL127:
 1518               	/* prologue: function */
 1519               	/* frame size = 0 */
 1520               	/* stack size = 0 */
 1521               	.L__stack_usage = 0
1105:./tmk_core/protocol/lufa/lufa.c ****   return get_usb_descriptor(wValue, wIndex, DescriptorAddress);
 1522               		.loc 1 1105 0
 1523 0000 0C94 0000 		jmp get_usb_descriptor
 1524               	.LVL128:
 1525               		.cfi_endproc
 1526               	.LFE138:
 1528               		.section	.progmem.data.__c.5677,"a",@progbits
 1531               	__c.5677:
 1532 0000 5B73 5D00 		.string	"[s]"
 1533               		.section	.progmem.data.__c.5675,"a",@progbits
 1536               	__c.5675:
 1537 0000 4B65 7962 		.string	"Keyboard start.\n"
 1537      6F61 7264 
 1537      2073 7461 
 1537      7274 2E0A 
 1537      00
 1538               		.section	.bss.timeouted.5644,"aw",@nobits
 1541               	timeouted.5644:
 1542 0000 00        		.zero	1
 1543               		.section	.bss.count.5575,"aw",@nobits
 1546               	count.5575:
 1547 0000 00        		.zero	1
 1548               		.section	.progmem.data.__c.5569,"a",@progbits
 1551               	__c.5569:
 1552 0000 5B57 5D00 		.string	"[W]"
 1553               		.section	.progmem.data.__c.5565,"a",@progbits
 1556               	__c.5565:
 1557 0000 5B53 5D00 		.string	"[S]"
 1558               		.section	.progmem.data.__c.5561,"a",@progbits
 1561               	__c.5561:
 1562 0000 5B52 5D00 		.string	"[R]"
 1563               		.section	.progmem.data.__c.5556,"a",@progbits
 1566               	__c.5556:
 1567 0000 5B44 5D00 		.string	"[D]"
 1568               		.section	.progmem.data.__c.5551,"a",@progbits
 1571               	__c.5551:
 1572 0000 5B43 5D00 		.string	"[C]"
 1573               		.section	.bss.console_flush,"aw",@nobits
 1576               	console_flush:
 1577 0000 00        		.zero	1
 1578               	.global	lufa_driver
 1579               		.section	.data.lufa_driver,"aw",@progbits
 1582               	lufa_driver:
 1583 0000 0000      		.word	gs(keyboard_leds)
 1584 0002 0000      		.word	gs(send_keyboard)
 1585 0004 0000      		.word	gs(send_mouse)
 1586 0006 0000      		.word	gs(send_system)
 1587 0008 0000      		.word	gs(send_consumer)
 1588               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1591               	keyboard_report_sent:
 1592 0000 0000 0000 		.zero	8
 1592      0000 0000 
 1593               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1596               	keyboard_led_stats:
 1597 0000 00        		.zero	1
 1598               	.global	keyboard_protocol
 1599               		.section	.data.keyboard_protocol,"aw",@progbits
 1602               	keyboard_protocol:
 1603 0000 01        		.byte	1
 1604               	.global	keyboard_idle
 1605               		.section	.bss.keyboard_idle,"aw",@nobits
 1608               	keyboard_idle:
 1609 0000 00        		.zero	1
 1610               		.text
 1611               	.Letext0:
 1612               		.file 7 "/usr/avr/include/stdint.h"
 1613               		.file 8 "./tmk_core/common/report.h"
 1614               		.file 9 "./tmk_core/common/host_driver.h"
 1615               		.file 10 "./tmk_core/common/host.h"
 1616               		.file 11 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 1617               		.file 12 "./tmk_core/common/avr/xprintf.h"
 1618               		.file 13 "./tmk_core/common/debug.h"
 1619               		.file 14 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1620               		.file 15 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1621               		.file 16 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1622               		.file 17 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 1623               		.file 18 "./lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1624               		.file 19 "/usr/avr/include/stdio.h"
 1625               		.file 20 "./lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 1626               		.file 21 "./tmk_core/protocol/lufa/lufa.h"
 1627               		.file 22 "./quantum/keycode_config.h"
 1628               		.file 23 "./quantum/keymap.h"
 1629               		.file 24 "./tmk_core/common/action_layer.h"
 1630               		.file 25 "./tmk_core/common/timer.h"
 1631               		.file 26 "./tmk_core/common/action_util.h"
 1632               		.file 27 "/usr/avr/include/stdlib.h"
 1633               		.file 28 "./quantum/quantum.h"
 1634               		.file 29 "./tmk_core/protocol/lufa/outputselect.h"
 1635               		.file 30 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 1636               		.file 31 "tmk_core/protocol/usb_descriptor.h"
 1637               		.file 32 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1638               		.file 33 "./tmk_core/common/print.h"
 1639               		.file 34 "./tmk_core/common/keyboard.h"
 1640               		.file 35 "./tmk_core/common/suspend.h"
 1641               		.file 36 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1642               		.file 37 "./tmk_core/common/action.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
 /var/tmp/ccGdrOPT.s:2      *ABS*:000000000000003e __SP_H__
 /var/tmp/ccGdrOPT.s:3      *ABS*:000000000000003d __SP_L__
 /var/tmp/ccGdrOPT.s:4      *ABS*:000000000000003f __SREG__
 /var/tmp/ccGdrOPT.s:5      *ABS*:0000000000000000 __tmp_reg__
 /var/tmp/ccGdrOPT.s:6      *ABS*:0000000000000001 __zero_reg__
 /var/tmp/ccGdrOPT.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
 /var/tmp/ccGdrOPT.s:1596   .bss.keyboard_led_stats:0000000000000000 keyboard_led_stats
 /var/tmp/ccGdrOPT.s:31     .text.sendchar:0000000000000000 sendchar
 /var/tmp/ccGdrOPT.s:1576   .bss.console_flush:0000000000000000 console_flush
 /var/tmp/ccGdrOPT.s:1541   .bss.timeouted.5644:0000000000000000 timeouted.5644
 /var/tmp/ccGdrOPT.s:304    .text.send_consumer:0000000000000000 send_consumer
 /var/tmp/ccGdrOPT.s:437    .text.send_system:0000000000000000 send_system
 /var/tmp/ccGdrOPT.s:558    .text.send_mouse:0000000000000000 send_mouse
 /var/tmp/ccGdrOPT.s:665    .text.send_keyboard:0000000000000000 send_keyboard
 /var/tmp/ccGdrOPT.s:1591   .bss.keyboard_report_sent:0000000000000000 keyboard_report_sent
 /var/tmp/ccGdrOPT.s:783    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
 /var/tmp/ccGdrOPT.s:1571   .progmem.data.__c.5551:0000000000000000 __c.5551
 /var/tmp/ccGdrOPT.s:828    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
 /var/tmp/ccGdrOPT.s:1566   .progmem.data.__c.5556:0000000000000000 __c.5556
 /var/tmp/ccGdrOPT.s:852    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
 /var/tmp/ccGdrOPT.s:1561   .progmem.data.__c.5561:0000000000000000 __c.5561
 /var/tmp/ccGdrOPT.s:871    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
 /var/tmp/ccGdrOPT.s:1556   .progmem.data.__c.5565:0000000000000000 __c.5565
 /var/tmp/ccGdrOPT.s:890    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
 /var/tmp/ccGdrOPT.s:1551   .progmem.data.__c.5569:0000000000000000 __c.5569
 /var/tmp/ccGdrOPT.s:912    .text.EVENT_USB_Device_StartOfFrame:0000000000000000 EVENT_USB_Device_StartOfFrame
 /var/tmp/ccGdrOPT.s:1546   .bss.count.5575:0000000000000000 count.5575
 /var/tmp/ccGdrOPT.s:1067   .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
 /var/tmp/ccGdrOPT.s:1119   .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
 /var/tmp/ccGdrOPT.s:1602   .data.keyboard_protocol:0000000000000000 keyboard_protocol
 /var/tmp/ccGdrOPT.s:1608   .bss.keyboard_idle:0000000000000000 keyboard_idle
 /var/tmp/ccGdrOPT.s:1384   .text.startup.main:0000000000000000 main
 /var/tmp/ccGdrOPT.s:1582   .data.lufa_driver:0000000000000000 lufa_driver
 /var/tmp/ccGdrOPT.s:1536   .progmem.data.__c.5675:0000000000000000 __c.5675
 /var/tmp/ccGdrOPT.s:1531   .progmem.data.__c.5677:0000000000000000 __c.5677
 /var/tmp/ccGdrOPT.s:1513   .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor

UNDEFINED SYMBOLS
USB_DeviceState
where_to_send
Endpoint_Write_Stream_LE
xputs
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
__udivmodqi4
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_ClearStatusStage
Endpoint_Write_Control_Stream_LE
clear_keyboard
keyboard_setup
print_set_sendchar
USB_USBTask
keyboard_init
host_set_driver
keyboard_task
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
get_usb_descriptor
__do_copy_data
__do_clear_bss
